// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class StockmovementBean
// extends+ 

// extends- 
{
    private Long stockmovementid;
    private boolean stockmovementid_is_modified = false;
    private boolean stockmovementid_is_initialized = false;
    
    private Integer stockid;
    private boolean stockid_is_modified = false;
    private boolean stockid_is_initialized = false;
    
    private java.sql.Timestamp operdate;
    private boolean operdate_is_modified = false;
    private boolean operdate_is_initialized = false;
    
    private Long productid;
    private boolean productid_is_modified = false;
    private boolean productid_is_initialized = false;
    
    private Integer operid;
    private boolean operid_is_modified = false;
    private boolean operid_is_initialized = false;
    
    private Double quantity;
    private boolean quantity_is_modified = false;
    private boolean quantity_is_initialized = false;
    
    private Double unitprice;
    private boolean unitprice_is_modified = false;
    private boolean unitprice_is_initialized = false;
    
    private Long parentid;
    private boolean parentid_is_modified = false;
    private boolean parentid_is_initialized = false;
    
    private Double curquantity;
    private boolean curquantity_is_modified = false;
    private boolean curquantity_is_initialized = false;
    
    private Integer mstockid;
    private boolean mstockid_is_modified = false;
    private boolean mstockid_is_initialized = false;
    
    private Long mcontragentid;
    private boolean mcontragentid_is_modified = false;
    private boolean mcontragentid_is_initialized = false;
    
    private Long testresultid;
    private boolean testresultid_is_modified = false;
    private boolean testresultid_is_initialized = false;
    
    private Double testresultquantity;
    private boolean testresultquantity_is_modified = false;
    private boolean testresultquantity_is_initialized = false;
    
    private Long invoiceid;
    private boolean invoiceid_is_modified = false;
    private boolean invoiceid_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private java.sql.Timestamp expdate1;
    private boolean expdate1_is_modified = false;
    private boolean expdate1_is_initialized = false;
    
    private java.sql.Timestamp expdate2;
    private boolean expdate2_is_modified = false;
    private boolean expdate2_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    StockmovementBean()
    {
    }
    
    /**
     * Getter method for stockmovementid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.stockmovementid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of stockmovementid
     */
    public Long getStockmovementid()
    {
        return stockmovementid; 
    }

    /**
     * Setter method for stockmovementid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to stockmovementid
     */
    public void setStockmovementid(Long newVal) {
        if ((newVal != null && this.stockmovementid != null && (newVal.compareTo(this.stockmovementid) == 0)) || 
            (newVal == null && this.stockmovementid == null && stockmovementid_is_initialized)) {
            return; 
        } 
        this.stockmovementid = newVal; 
        stockmovementid_is_modified = true; 
        stockmovementid_is_initialized = true; 
    }

    /**
     * Setter method for stockmovementid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to stockmovementid
     */
    public void setStockmovementid(long newVal) {
        setStockmovementid(new Long(newVal));
    }

    /**
     * Determines if the stockmovementid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStockmovementidModified() {
        return stockmovementid_is_modified; 
    }

    /**
     * Determines if the stockmovementid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStockmovementidInitialized() {
        return stockmovementid_is_initialized; 
    }

    /**
     * Getter method for stockid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.stockid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of stockid
     */
    public Integer getStockid()
    {
        return stockid; 
    }

    /**
     * Setter method for stockid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to stockid
     */
    public void setStockid(Integer newVal) {
        if ((newVal != null && this.stockid != null && (newVal.compareTo(this.stockid) == 0)) || 
            (newVal == null && this.stockid == null && stockid_is_initialized)) {
            return; 
        } 
        this.stockid = newVal; 
        stockid_is_modified = true; 
        stockid_is_initialized = true; 
    }

    /**
     * Setter method for stockid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to stockid
     */
    public void setStockid(int newVal) {
        setStockid(new Integer(newVal));
    }

    /**
     * Determines if the stockid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStockidModified() {
        return stockid_is_modified; 
    }

    /**
     * Determines if the stockid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStockidInitialized() {
        return stockid_is_initialized; 
    }

    /**
     * Getter method for operdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.operdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of operdate
     */
    public java.sql.Timestamp getOperdate()
    {
        return operdate; 
    }

    /**
     * Setter method for operdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to operdate
     */
    public void setOperdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.operdate != null && (newVal.compareTo(this.operdate) == 0)) || 
            (newVal == null && this.operdate == null && operdate_is_initialized)) {
            return; 
        } 
        this.operdate = newVal; 
        operdate_is_modified = true; 
        operdate_is_initialized = true; 
    }

    /**
     * Setter method for operdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to operdate
     */
    public void setOperdate(long newVal) {
        setOperdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the operdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOperdateModified() {
        return operdate_is_modified; 
    }

    /**
     * Determines if the operdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOperdateInitialized() {
        return operdate_is_initialized; 
    }

    /**
     * Getter method for productid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.productid
     * <li> foreign key: product.productid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of productid
     */
    public Long getProductid()
    {
        return productid; 
    }

    /**
     * Setter method for productid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(Long newVal) {
        if ((newVal != null && this.productid != null && (newVal.compareTo(this.productid) == 0)) || 
            (newVal == null && this.productid == null && productid_is_initialized)) {
            return; 
        } 
        this.productid = newVal; 
        productid_is_modified = true; 
        productid_is_initialized = true; 
    }

    /**
     * Setter method for productid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(long newVal) {
        setProductid(new Long(newVal));
    }

    /**
     * Determines if the productid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductidModified() {
        return productid_is_modified; 
    }

    /**
     * Determines if the productid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductidInitialized() {
        return productid_is_initialized; 
    }

    /**
     * Getter method for operid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.operid
     * <li> foreign key: oper.operid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of operid
     */
    public Integer getOperid()
    {
        return operid; 
    }

    /**
     * Setter method for operid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to operid
     */
    public void setOperid(Integer newVal) {
        if ((newVal != null && this.operid != null && (newVal.compareTo(this.operid) == 0)) || 
            (newVal == null && this.operid == null && operid_is_initialized)) {
            return; 
        } 
        this.operid = newVal; 
        operid_is_modified = true; 
        operid_is_initialized = true; 
    }

    /**
     * Setter method for operid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to operid
     */
    public void setOperid(int newVal) {
        setOperid(new Integer(newVal));
    }

    /**
     * Determines if the operid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOperidModified() {
        return operid_is_modified; 
    }

    /**
     * Determines if the operid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOperidInitialized() {
        return operid_is_initialized; 
    }

    /**
     * Getter method for quantity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.quantity
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of quantity
     */
    public Double getQuantity()
    {
        return quantity; 
    }

    /**
     * Setter method for quantity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to quantity
     */
    public void setQuantity(Double newVal) {
        if ((newVal != null && this.quantity != null && (newVal.compareTo(this.quantity) == 0)) || 
            (newVal == null && this.quantity == null && quantity_is_initialized)) {
            return; 
        } 
        this.quantity = newVal; 
        quantity_is_modified = true; 
        quantity_is_initialized = true; 
    }

    /**
     * Setter method for quantity.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to quantity
     */
    public void setQuantity(double newVal) {
        setQuantity(new Double(newVal));
    }

    /**
     * Determines if the quantity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQuantityModified() {
        return quantity_is_modified; 
    }

    /**
     * Determines if the quantity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQuantityInitialized() {
        return quantity_is_initialized; 
    }

    /**
     * Getter method for unitprice.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.unitprice
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of unitprice
     */
    public Double getUnitprice()
    {
        return unitprice; 
    }

    /**
     * Setter method for unitprice.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to unitprice
     */
    public void setUnitprice(Double newVal) {
        if ((newVal != null && this.unitprice != null && (newVal.compareTo(this.unitprice) == 0)) || 
            (newVal == null && this.unitprice == null && unitprice_is_initialized)) {
            return; 
        } 
        this.unitprice = newVal; 
        unitprice_is_modified = true; 
        unitprice_is_initialized = true; 
    }

    /**
     * Setter method for unitprice.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to unitprice
     */
    public void setUnitprice(double newVal) {
        setUnitprice(new Double(newVal));
    }

    /**
     * Determines if the unitprice has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUnitpriceModified() {
        return unitprice_is_modified; 
    }

    /**
     * Determines if the unitprice has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUnitpriceInitialized() {
        return unitprice_is_initialized; 
    }

    /**
     * Getter method for parentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.parentid
     * <li> foreign key: stockmovement.stockmovementid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parentid
     */
    public Long getParentid()
    {
        return parentid; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(Long newVal) {
        if ((newVal != null && this.parentid != null && (newVal.compareTo(this.parentid) == 0)) || 
            (newVal == null && this.parentid == null && parentid_is_initialized)) {
            return; 
        } 
        this.parentid = newVal; 
        parentid_is_modified = true; 
        parentid_is_initialized = true; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(long newVal) {
        setParentid(new Long(newVal));
    }

    /**
     * Determines if the parentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParentidModified() {
        return parentid_is_modified; 
    }

    /**
     * Determines if the parentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParentidInitialized() {
        return parentid_is_initialized; 
    }

    /**
     * Getter method for curquantity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.curquantity
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of curquantity
     */
    public Double getCurquantity()
    {
        return curquantity; 
    }

    /**
     * Setter method for curquantity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to curquantity
     */
    public void setCurquantity(Double newVal) {
        if ((newVal != null && this.curquantity != null && (newVal.compareTo(this.curquantity) == 0)) || 
            (newVal == null && this.curquantity == null && curquantity_is_initialized)) {
            return; 
        } 
        this.curquantity = newVal; 
        curquantity_is_modified = true; 
        curquantity_is_initialized = true; 
    }

    /**
     * Setter method for curquantity.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to curquantity
     */
    public void setCurquantity(double newVal) {
        setCurquantity(new Double(newVal));
    }

    /**
     * Determines if the curquantity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCurquantityModified() {
        return curquantity_is_modified; 
    }

    /**
     * Determines if the curquantity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCurquantityInitialized() {
        return curquantity_is_initialized; 
    }

    /**
     * Getter method for mstockid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.mstockid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of mstockid
     */
    public Integer getMstockid()
    {
        return mstockid; 
    }

    /**
     * Setter method for mstockid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mstockid
     */
    public void setMstockid(Integer newVal) {
        if ((newVal != null && this.mstockid != null && (newVal.compareTo(this.mstockid) == 0)) || 
            (newVal == null && this.mstockid == null && mstockid_is_initialized)) {
            return; 
        } 
        this.mstockid = newVal; 
        mstockid_is_modified = true; 
        mstockid_is_initialized = true; 
    }

    /**
     * Setter method for mstockid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mstockid
     */
    public void setMstockid(int newVal) {
        setMstockid(new Integer(newVal));
    }

    /**
     * Determines if the mstockid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMstockidModified() {
        return mstockid_is_modified; 
    }

    /**
     * Determines if the mstockid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMstockidInitialized() {
        return mstockid_is_initialized; 
    }

    /**
     * Getter method for mcontragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.mcontragentid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of mcontragentid
     */
    public Long getMcontragentid()
    {
        return mcontragentid; 
    }

    /**
     * Setter method for mcontragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to mcontragentid
     */
    public void setMcontragentid(Long newVal) {
        if ((newVal != null && this.mcontragentid != null && (newVal.compareTo(this.mcontragentid) == 0)) || 
            (newVal == null && this.mcontragentid == null && mcontragentid_is_initialized)) {
            return; 
        } 
        this.mcontragentid = newVal; 
        mcontragentid_is_modified = true; 
        mcontragentid_is_initialized = true; 
    }

    /**
     * Setter method for mcontragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to mcontragentid
     */
    public void setMcontragentid(long newVal) {
        setMcontragentid(new Long(newVal));
    }

    /**
     * Determines if the mcontragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMcontragentidModified() {
        return mcontragentid_is_modified; 
    }

    /**
     * Determines if the mcontragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMcontragentidInitialized() {
        return mcontragentid_is_initialized; 
    }

    /**
     * Getter method for testresultid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.testresultid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of testresultid
     */
    public Long getTestresultid()
    {
        return testresultid; 
    }

    /**
     * Setter method for testresultid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to testresultid
     */
    public void setTestresultid(Long newVal) {
        if ((newVal != null && this.testresultid != null && (newVal.compareTo(this.testresultid) == 0)) || 
            (newVal == null && this.testresultid == null && testresultid_is_initialized)) {
            return; 
        } 
        this.testresultid = newVal; 
        testresultid_is_modified = true; 
        testresultid_is_initialized = true; 
    }

    /**
     * Setter method for testresultid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to testresultid
     */
    public void setTestresultid(long newVal) {
        setTestresultid(new Long(newVal));
    }

    /**
     * Determines if the testresultid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTestresultidModified() {
        return testresultid_is_modified; 
    }

    /**
     * Determines if the testresultid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTestresultidInitialized() {
        return testresultid_is_initialized; 
    }

    /**
     * Getter method for testresultquantity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.testresultquantity
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of testresultquantity
     */
    public Double getTestresultquantity()
    {
        return testresultquantity; 
    }

    /**
     * Setter method for testresultquantity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to testresultquantity
     */
    public void setTestresultquantity(Double newVal) {
        if ((newVal != null && this.testresultquantity != null && (newVal.compareTo(this.testresultquantity) == 0)) || 
            (newVal == null && this.testresultquantity == null && testresultquantity_is_initialized)) {
            return; 
        } 
        this.testresultquantity = newVal; 
        testresultquantity_is_modified = true; 
        testresultquantity_is_initialized = true; 
    }

    /**
     * Setter method for testresultquantity.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to testresultquantity
     */
    public void setTestresultquantity(double newVal) {
        setTestresultquantity(new Double(newVal));
    }

    /**
     * Determines if the testresultquantity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTestresultquantityModified() {
        return testresultquantity_is_modified; 
    }

    /**
     * Determines if the testresultquantity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTestresultquantityInitialized() {
        return testresultquantity_is_initialized; 
    }

    /**
     * Getter method for invoiceid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.invoiceid
     * <li> foreign key: invoice.invoiceid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of invoiceid
     */
    public Long getInvoiceid()
    {
        return invoiceid; 
    }

    /**
     * Setter method for invoiceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invoiceid
     */
    public void setInvoiceid(Long newVal) {
        if ((newVal != null && this.invoiceid != null && (newVal.compareTo(this.invoiceid) == 0)) || 
            (newVal == null && this.invoiceid == null && invoiceid_is_initialized)) {
            return; 
        } 
        this.invoiceid = newVal; 
        invoiceid_is_modified = true; 
        invoiceid_is_initialized = true; 
    }

    /**
     * Setter method for invoiceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to invoiceid
     */
    public void setInvoiceid(long newVal) {
        setInvoiceid(new Long(newVal));
    }

    /**
     * Determines if the invoiceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvoiceidModified() {
        return invoiceid_is_modified; 
    }

    /**
     * Determines if the invoiceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvoiceidInitialized() {
        return invoiceid_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.note
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.regbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for expdate1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.expdate1
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of expdate1
     */
    public java.sql.Timestamp getExpdate1()
    {
        return expdate1; 
    }

    /**
     * Setter method for expdate1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to expdate1
     */
    public void setExpdate1(java.sql.Timestamp newVal) {
        if ((newVal != null && this.expdate1 != null && (newVal.compareTo(this.expdate1) == 0)) || 
            (newVal == null && this.expdate1 == null && expdate1_is_initialized)) {
            return; 
        } 
        this.expdate1 = newVal; 
        expdate1_is_modified = true; 
        expdate1_is_initialized = true; 
    }

    /**
     * Setter method for expdate1.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to expdate1
     */
    public void setExpdate1(long newVal) {
        setExpdate1(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the expdate1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExpdate1Modified() {
        return expdate1_is_modified; 
    }

    /**
     * Determines if the expdate1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExpdate1Initialized() {
        return expdate1_is_initialized; 
    }

    /**
     * Getter method for expdate2.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: stockmovement.expdate2
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of expdate2
     */
    public java.sql.Timestamp getExpdate2()
    {
        return expdate2; 
    }

    /**
     * Setter method for expdate2.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to expdate2
     */
    public void setExpdate2(java.sql.Timestamp newVal) {
        if ((newVal != null && this.expdate2 != null && (newVal.compareTo(this.expdate2) == 0)) || 
            (newVal == null && this.expdate2 == null && expdate2_is_initialized)) {
            return; 
        } 
        this.expdate2 = newVal; 
        expdate2_is_modified = true; 
        expdate2_is_initialized = true; 
    }

    /**
     * Setter method for expdate2.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to expdate2
     */
    public void setExpdate2(long newVal) {
        setExpdate2(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the expdate2 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExpdate2Modified() {
        return expdate2_is_modified; 
    }

    /**
     * Determines if the expdate2 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExpdate2Initialized() {
        return expdate2_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return stockmovementid_is_modified || 
		stockid_is_modified || 
		operdate_is_modified || 
		productid_is_modified || 
		operid_is_modified || 
		quantity_is_modified || 
		unitprice_is_modified || 
		parentid_is_modified || 
		curquantity_is_modified || 
		mstockid_is_modified || 
		mcontragentid_is_modified || 
		testresultid_is_modified || 
		testresultquantity_is_modified || 
		invoiceid_is_modified || 
		note_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		expdate1_is_modified || 
		expdate2_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        stockmovementid_is_modified = false;
        stockid_is_modified = false;
        operdate_is_modified = false;
        productid_is_modified = false;
        operid_is_modified = false;
        quantity_is_modified = false;
        unitprice_is_modified = false;
        parentid_is_modified = false;
        curquantity_is_modified = false;
        mstockid_is_modified = false;
        mcontragentid_is_modified = false;
        testresultid_is_modified = false;
        testresultquantity_is_modified = false;
        invoiceid_is_modified = false;
        note_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        expdate1_is_modified = false;
        expdate2_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(StockmovementBean bean) {
        setStockmovementid(bean.getStockmovementid());
        setStockid(bean.getStockid());
        setOperdate(bean.getOperdate());
        setProductid(bean.getProductid());
        setOperid(bean.getOperid());
        setQuantity(bean.getQuantity());
        setUnitprice(bean.getUnitprice());
        setParentid(bean.getParentid());
        setCurquantity(bean.getCurquantity());
        setMstockid(bean.getMstockid());
        setMcontragentid(bean.getMcontragentid());
        setTestresultid(bean.getTestresultid());
        setTestresultquantity(bean.getTestresultquantity());
        setInvoiceid(bean.getInvoiceid());
        setNote(bean.getNote());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setExpdate1(bean.getExpdate1());
        setExpdate2(bean.getExpdate2());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[stockmovement] "
                 + "\n - stockmovement.stockmovementid = " + (stockmovementid_is_initialized ? ("[" + (stockmovementid == null ? null : stockmovementid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.stockid = " + (stockid_is_initialized ? ("[" + (stockid == null ? null : stockid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.operdate = " + (operdate_is_initialized ? ("[" + (operdate == null ? null : operdate.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.productid = " + (productid_is_initialized ? ("[" + (productid == null ? null : productid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.operid = " + (operid_is_initialized ? ("[" + (operid == null ? null : operid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.quantity = " + (quantity_is_initialized ? ("[" + (quantity == null ? null : quantity.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.unitprice = " + (unitprice_is_initialized ? ("[" + (unitprice == null ? null : unitprice.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.parentid = " + (parentid_is_initialized ? ("[" + (parentid == null ? null : parentid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.curquantity = " + (curquantity_is_initialized ? ("[" + (curquantity == null ? null : curquantity.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.mstockid = " + (mstockid_is_initialized ? ("[" + (mstockid == null ? null : mstockid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.mcontragentid = " + (mcontragentid_is_initialized ? ("[" + (mcontragentid == null ? null : mcontragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.testresultid = " + (testresultid_is_initialized ? ("[" + (testresultid == null ? null : testresultid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.testresultquantity = " + (testresultquantity_is_initialized ? ("[" + (testresultquantity == null ? null : testresultquantity.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.invoiceid = " + (invoiceid_is_initialized ? ("[" + (invoiceid == null ? null : invoiceid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.expdate1 = " + (expdate1_is_initialized ? ("[" + (expdate1 == null ? null : expdate1.toString()) + "]") : "not initialized") + ""
                 + "\n - stockmovement.expdate2 = " + (expdate2_is_initialized ? ("[" + (expdate2 == null ? null : expdate2.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
