// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the PlatetemplateBean objects.
 */
public class PlatetemplateComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for PlatetemplateComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PlatetemplateComparator(PlatetemplateManager.PLATETEMPLATEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PlatetemplateManager.ID_PLATETEMPLATEID
     *   <li>PlatetemplateManager.ID_NAME
     *   <li>PlatetemplateManager.ID_W
     *   <li>PlatetemplateManager.ID_H
     *   <li>PlatetemplateManager.ID_LABTESTID
     *   <li>PlatetemplateManager.ID_REGDATE
     * </ul>
     */
    public PlatetemplateComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for PlatetemplateComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PlatetemplateComparator(PlatetemplateManager.PLATETEMPLATEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PlatetemplateManager.ID_PLATETEMPLATEID
     *   <li>PlatetemplateManager.ID_NAME
     *   <li>PlatetemplateManager.ID_W
     *   <li>PlatetemplateManager.ID_H
     *   <li>PlatetemplateManager.ID_LABTESTID
     *   <li>PlatetemplateManager.ID_ZDEFAULT
     *   <li>PlatetemplateManager.ID_REGDATE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public PlatetemplateComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        PlatetemplateBean b1 = (PlatetemplateBean)pObj1;
        PlatetemplateBean b2 = (PlatetemplateBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case PlatetemplateManager.ID_PLATETEMPLATEID:
                if (b1.getPlatetemplateid() == null && b2.getPlatetemplateid() != null) {
                    iReturn = -1;
                } else if (b1.getPlatetemplateid() == null && b2.getPlatetemplateid() == null) {
                    iReturn = 0;
                } else if (b1.getPlatetemplateid() != null && b2.getPlatetemplateid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPlatetemplateid().compareTo(b2.getPlatetemplateid());
                }
                break;
            case PlatetemplateManager.ID_NAME:
                if (b1.getName() == null && b2.getName() != null) {
                    iReturn = -1;
                } else if (b1.getName() == null && b2.getName() == null) {
                    iReturn = 0;
                } else if (b1.getName() != null && b2.getName() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getName().compareTo(b2.getName());
                }
                break;
            case PlatetemplateManager.ID_W:
                if (b1.getW() == null && b2.getW() != null) {
                    iReturn = -1;
                } else if (b1.getW() == null && b2.getW() == null) {
                    iReturn = 0;
                } else if (b1.getW() != null && b2.getW() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getW().compareTo(b2.getW());
                }
                break;
            case PlatetemplateManager.ID_H:
                if (b1.getH() == null && b2.getH() != null) {
                    iReturn = -1;
                } else if (b1.getH() == null && b2.getH() == null) {
                    iReturn = 0;
                } else if (b1.getH() != null && b2.getH() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getH().compareTo(b2.getH());
                }
                break;
            case PlatetemplateManager.ID_LABTESTID:
                if (b1.getLabtestid() == null && b2.getLabtestid() != null) {
                    iReturn = -1;
                } else if (b1.getLabtestid() == null && b2.getLabtestid() == null) {
                    iReturn = 0;
                } else if (b1.getLabtestid() != null && b2.getLabtestid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLabtestid().compareTo(b2.getLabtestid());
                }
                break;
            case PlatetemplateManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
