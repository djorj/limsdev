// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class LabtestanswerBean
// extends+ 

// extends- 
{
    private Integer labtestanswerid;
    private boolean labtestanswerid_is_modified = false;
    private boolean labtestanswerid_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private String val;
    private boolean val_is_modified = false;
    private boolean val_is_initialized = false;
    
    private Boolean norm;
    private boolean norm_is_modified = false;
    private boolean norm_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    LabtestanswerBean()
    {
    }
    
    /**
     * Getter method for labtestanswerid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtestanswer.labtestanswerid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestanswerid
     */
    public Integer getLabtestanswerid()
    {
        return labtestanswerid; 
    }

    /**
     * Setter method for labtestanswerid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestanswerid
     */
    public void setLabtestanswerid(Integer newVal) {
        if ((newVal != null && this.labtestanswerid != null && (newVal.compareTo(this.labtestanswerid) == 0)) || 
            (newVal == null && this.labtestanswerid == null && labtestanswerid_is_initialized)) {
            return; 
        } 
        this.labtestanswerid = newVal; 
        labtestanswerid_is_modified = true; 
        labtestanswerid_is_initialized = true; 
    }

    /**
     * Setter method for labtestanswerid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestanswerid
     */
    public void setLabtestanswerid(int newVal) {
        setLabtestanswerid(new Integer(newVal));
    }

    /**
     * Determines if the labtestanswerid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestansweridModified() {
        return labtestanswerid_is_modified; 
    }

    /**
     * Determines if the labtestanswerid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestansweridInitialized() {
        return labtestanswerid_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtestanswer.labtestid
     * <li> foreign key: labtest.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for val.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtestanswer.val
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of val
     */
    public String getVal()
    {
        return val; 
    }

    /**
     * Setter method for val.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to val
     */
    public void setVal(String newVal) {
        if ((newVal != null && this.val != null && (newVal.compareTo(this.val) == 0)) || 
            (newVal == null && this.val == null && val_is_initialized)) {
            return; 
        } 
        this.val = newVal; 
        val_is_modified = true; 
        val_is_initialized = true; 
    }

    /**
     * Determines if the val has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isValModified() {
        return val_is_modified; 
    }

    /**
     * Determines if the val has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isValInitialized() {
        return val_is_initialized; 
    }

    /**
     * Getter method for norm.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtestanswer.norm
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of norm
     */
    public Boolean getNorm()
    {
        return norm; 
    }

    /**
     * Setter method for norm.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to norm
     */
    public void setNorm(Boolean newVal) {
        if ((newVal != null && this.norm != null && newVal.equals(this.norm)) || 
            (newVal == null && this.norm == null && norm_is_initialized)) {
            return; 
        } 
        this.norm = newVal; 
        norm_is_modified = true; 
        norm_is_initialized = true; 
    }

    /**
     * Setter method for norm.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to norm
     */
    public void setNorm(boolean newVal) {
        setNorm(new Boolean(newVal));
    }

    /**
     * Determines if the norm has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNormModified() {
        return norm_is_modified; 
    }

    /**
     * Determines if the norm has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNormInitialized() {
        return norm_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return labtestanswerid_is_modified || 
		labtestid_is_modified || 
		val_is_modified || 
		norm_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        labtestanswerid_is_modified = false;
        labtestid_is_modified = false;
        val_is_modified = false;
        norm_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(LabtestanswerBean bean) {
        setLabtestanswerid(bean.getLabtestanswerid());
        setLabtestid(bean.getLabtestid());
        setVal(bean.getVal());
        setNorm(bean.getNorm());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[labtestanswer] "
                 + "\n - labtestanswer.labtestanswerid = " + (labtestanswerid_is_initialized ? ("[" + (labtestanswerid == null ? null : labtestanswerid.toString()) + "]") : "not initialized") + ""
                 + "\n - labtestanswer.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - labtestanswer.val = " + (val_is_initialized ? ("[" + (val == null ? null : val.toString()) + "]") : "not initialized") + ""
                 + "\n - labtestanswer.norm = " + (norm_is_initialized ? ("[" + (norm == null ? null : norm.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
