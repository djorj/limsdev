// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the ContractsampletypeBean objects.
 */
public class ContractsampletypeComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ContractsampletypeComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractsampletypeComparator(ContractsampletypeManager.CONTRACTSAMPLETYPEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractsampletypeManager.ID_CONTRACTSAMPLETYPEID
     *   <li>ContractsampletypeManager.ID_CONTRACTID
     *   <li>ContractsampletypeManager.ID_SAMPLETYPEID
     *   <li>ContractsampletypeManager.ID_BOXNUM
     *   <li>ContractsampletypeManager.ID_QUANTITY
     *   <li>ContractsampletypeManager.ID_REGBYID
     *   <li>ContractsampletypeManager.ID_REGDATE
     *   <li>ContractsampletypeManager.ID_PARENTID
     *   <li>ContractsampletypeManager.ID_INFO
     *   <li>ContractsampletypeManager.ID_SPECIESID
     *   <li>ContractsampletypeManager.ID_STAMP
     *   <li>ContractsampletypeManager.ID_APPEALID
     *   <li>ContractsampletypeManager.ID_ACTID
     * </ul>
     */
    public ContractsampletypeComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ContractsampletypeComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractsampletypeComparator(ContractsampletypeManager.CONTRACTSAMPLETYPEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractsampletypeManager.ID_CONTRACTSAMPLETYPEID
     *   <li>ContractsampletypeManager.ID_CONTRACTID
     *   <li>ContractsampletypeManager.ID_SAMPLETYPEID
     *   <li>ContractsampletypeManager.ID_BOXNUM
     *   <li>ContractsampletypeManager.ID_QUANTITY
     *   <li>ContractsampletypeManager.ID_REGBYID
     *   <li>ContractsampletypeManager.ID_REGDATE
     *   <li>ContractsampletypeManager.ID_ISBOX
     *   <li>ContractsampletypeManager.ID_PARENTID
     *   <li>ContractsampletypeManager.ID_DELETED
     *   <li>ContractsampletypeManager.ID_INFO
     *   <li>ContractsampletypeManager.ID_SPECIESID
     *   <li>ContractsampletypeManager.ID_STAMP
     *   <li>ContractsampletypeManager.ID_APPEALID
     *   <li>ContractsampletypeManager.ID_ACTID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ContractsampletypeComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ContractsampletypeBean b1 = (ContractsampletypeBean)pObj1;
        ContractsampletypeBean b2 = (ContractsampletypeBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ContractsampletypeManager.ID_CONTRACTSAMPLETYPEID:
                if (b1.getContractsampletypeid() == null && b2.getContractsampletypeid() != null) {
                    iReturn = -1;
                } else if (b1.getContractsampletypeid() == null && b2.getContractsampletypeid() == null) {
                    iReturn = 0;
                } else if (b1.getContractsampletypeid() != null && b2.getContractsampletypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractsampletypeid().compareTo(b2.getContractsampletypeid());
                }
                break;
            case ContractsampletypeManager.ID_CONTRACTID:
                if (b1.getContractid() == null && b2.getContractid() != null) {
                    iReturn = -1;
                } else if (b1.getContractid() == null && b2.getContractid() == null) {
                    iReturn = 0;
                } else if (b1.getContractid() != null && b2.getContractid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractid().compareTo(b2.getContractid());
                }
                break;
            case ContractsampletypeManager.ID_SAMPLETYPEID:
                if (b1.getSampletypeid() == null && b2.getSampletypeid() != null) {
                    iReturn = -1;
                } else if (b1.getSampletypeid() == null && b2.getSampletypeid() == null) {
                    iReturn = 0;
                } else if (b1.getSampletypeid() != null && b2.getSampletypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSampletypeid().compareTo(b2.getSampletypeid());
                }
                break;
            case ContractsampletypeManager.ID_BOXNUM:
                if (b1.getBoxnum() == null && b2.getBoxnum() != null) {
                    iReturn = -1;
                } else if (b1.getBoxnum() == null && b2.getBoxnum() == null) {
                    iReturn = 0;
                } else if (b1.getBoxnum() != null && b2.getBoxnum() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBoxnum().compareTo(b2.getBoxnum());
                }
                break;
            case ContractsampletypeManager.ID_QUANTITY:
                if (b1.getQuantity() == null && b2.getQuantity() != null) {
                    iReturn = -1;
                } else if (b1.getQuantity() == null && b2.getQuantity() == null) {
                    iReturn = 0;
                } else if (b1.getQuantity() != null && b2.getQuantity() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getQuantity().compareTo(b2.getQuantity());
                }
                break;
            case ContractsampletypeManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case ContractsampletypeManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case ContractsampletypeManager.ID_PARENTID:
                if (b1.getParentid() == null && b2.getParentid() != null) {
                    iReturn = -1;
                } else if (b1.getParentid() == null && b2.getParentid() == null) {
                    iReturn = 0;
                } else if (b1.getParentid() != null && b2.getParentid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getParentid().compareTo(b2.getParentid());
                }
                break;
            case ContractsampletypeManager.ID_INFO:
                if (b1.getInfo() == null && b2.getInfo() != null) {
                    iReturn = -1;
                } else if (b1.getInfo() == null && b2.getInfo() == null) {
                    iReturn = 0;
                } else if (b1.getInfo() != null && b2.getInfo() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInfo().compareTo(b2.getInfo());
                }
                break;
            case ContractsampletypeManager.ID_SPECIESID:
                if (b1.getSpeciesid() == null && b2.getSpeciesid() != null) {
                    iReturn = -1;
                } else if (b1.getSpeciesid() == null && b2.getSpeciesid() == null) {
                    iReturn = 0;
                } else if (b1.getSpeciesid() != null && b2.getSpeciesid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSpeciesid().compareTo(b2.getSpeciesid());
                }
                break;
            case ContractsampletypeManager.ID_STAMP:
                if (b1.getStamp() == null && b2.getStamp() != null) {
                    iReturn = -1;
                } else if (b1.getStamp() == null && b2.getStamp() == null) {
                    iReturn = 0;
                } else if (b1.getStamp() != null && b2.getStamp() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getStamp().compareTo(b2.getStamp());
                }
                break;
            case ContractsampletypeManager.ID_APPEALID:
                if (b1.getAppealid() == null && b2.getAppealid() != null) {
                    iReturn = -1;
                } else if (b1.getAppealid() == null && b2.getAppealid() == null) {
                    iReturn = 0;
                } else if (b1.getAppealid() != null && b2.getAppealid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAppealid().compareTo(b2.getAppealid());
                }
                break;
            case ContractsampletypeManager.ID_ACTID:
                if (b1.getActid() == null && b2.getActid() != null) {
                    iReturn = -1;
                } else if (b1.getActid() == null && b2.getActid() == null) {
                    iReturn = 0;
                } else if (b1.getActid() != null && b2.getActid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getActid().compareTo(b2.getActid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
