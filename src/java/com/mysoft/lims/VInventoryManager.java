// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the v_inventory table.
 */
public class VInventoryManager
// extends+ 

// extends- 
{

    /**
     * Column institutionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INSTITUTIONID = 0;
    public static final int TYPE_INSTITUTIONID = Types.INTEGER;
    public static final String NAME_INSTITUTIONID = "institutionid";

    /**
     * Column productgroupid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PRODUCTGROUPID = 1;
    public static final int TYPE_PRODUCTGROUPID = Types.INTEGER;
    public static final String NAME_PRODUCTGROUPID = "productgroupid";

    /**
     * Column productid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PRODUCTID = 2;
    public static final int TYPE_PRODUCTID = Types.BIGINT;
    public static final String NAME_PRODUCTID = "productid";

    /**
     * Column accountname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ACCOUNTNAME = 3;
    public static final int TYPE_ACCOUNTNAME = Types.VARCHAR;
    public static final String NAME_ACCOUNTNAME = "accountname";

    /**
     * Column code of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CODE = 4;
    public static final int TYPE_CODE = Types.VARCHAR;
    public static final String NAME_CODE = "code";

    /**
     * Column compnum of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMPNUM = 5;
    public static final int TYPE_COMPNUM = Types.INTEGER;
    public static final String NAME_COMPNUM = "compnum";

    /**
     * Column invnumber of type Types.VARCHAR mapped to String.
     */
    public static final int ID_INVNUMBER = 6;
    public static final int TYPE_INVNUMBER = Types.VARCHAR;
    public static final String NAME_INVNUMBER = "invnumber";

    /**
     * Column productname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PRODUCTNAME = 7;
    public static final int TYPE_PRODUCTNAME = Types.VARCHAR;
    public static final String NAME_PRODUCTNAME = "productname";

    /**
     * Column unitname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_UNITNAME = 8;
    public static final int TYPE_UNITNAME = Types.VARCHAR;
    public static final String NAME_UNITNAME = "unitname";

    /**
     * Column price of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_PRICE = 9;
    public static final int TYPE_PRICE = Types.DOUBLE;
    public static final String NAME_PRICE = "price";

    /**
     * Column realamount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_REALAMOUNT = 10;
    public static final int TYPE_REALAMOUNT = Types.DOUBLE;
    public static final String NAME_REALAMOUNT = "realamount";

    /**
     * Column realprice of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_REALPRICE = 11;
    public static final int TYPE_REALPRICE = Types.DOUBLE;
    public static final String NAME_REALPRICE = "realprice";

    /**
     * Column amount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNT = 12;
    public static final int TYPE_AMOUNT = Types.DOUBLE;
    public static final String NAME_AMOUNT = "amount";

    /**
     * Column accprice of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_ACCPRICE = 13;
    public static final int TYPE_ACCPRICE = Types.DOUBLE;
    public static final String NAME_ACCPRICE = "accprice";

    /**
     * Column lessamount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_LESSAMOUNT = 14;
    public static final int TYPE_LESSAMOUNT = Types.DOUBLE;
    public static final String NAME_LESSAMOUNT = "lessamount";

    /**
     * Column lessprice of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_LESSPRICE = 15;
    public static final int TYPE_LESSPRICE = Types.DOUBLE;
    public static final String NAME_LESSPRICE = "lessprice";

    /**
     * Column moreamount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_MOREAMOUNT = 16;
    public static final int TYPE_MOREAMOUNT = Types.DOUBLE;
    public static final String NAME_MOREAMOUNT = "moreamount";

    /**
     * Column moreprice of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_MOREPRICE = 17;
    public static final int TYPE_MOREPRICE = Types.DOUBLE;
    public static final String NAME_MOREPRICE = "moreprice";

    /**
     * Column note of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NOTE = 18;
    public static final int TYPE_NOTE = Types.VARCHAR;
    public static final String NAME_NOTE = "note";

    /**
     * Column inventoryid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INVENTORYID = 19;
    public static final int TYPE_INVENTORYID = Types.INTEGER;
    public static final String NAME_INVENTORYID = "inventoryid";


    private static final String TABLE_NAME = "v_inventory";

    /**
     * Create an array of type string containing all the fields of the v_inventory table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "v_inventory.institutionid"
        ,"v_inventory.productgroupid"
        ,"v_inventory.productid"
        ,"v_inventory.accountname"
        ,"v_inventory.code"
        ,"v_inventory.compnum"
        ,"v_inventory.invnumber"
        ,"v_inventory.productname"
        ,"v_inventory.unitname"
        ,"v_inventory.price"
        ,"v_inventory.realamount"
        ,"v_inventory.realprice"
        ,"v_inventory.amount"
        ,"v_inventory.accprice"
        ,"v_inventory.lessamount"
        ,"v_inventory.lessprice"
        ,"v_inventory.moreamount"
        ,"v_inventory.moreprice"
        ,"v_inventory.note"
        ,"v_inventory.inventoryid"
    };

    /**
     * Field that contains the comma separated fields of the v_inventory table.
     */
    private static final String ALL_FIELDS = "v_inventory.institutionid"
                            + ",v_inventory.productgroupid"
                            + ",v_inventory.productid"
                            + ",v_inventory.accountname"
                            + ",v_inventory.code"
                            + ",v_inventory.compnum"
                            + ",v_inventory.invnumber"
                            + ",v_inventory.productname"
                            + ",v_inventory.unitname"
                            + ",v_inventory.price"
                            + ",v_inventory.realamount"
                            + ",v_inventory.realprice"
                            + ",v_inventory.amount"
                            + ",v_inventory.accprice"
                            + ",v_inventory.lessamount"
                            + ",v_inventory.lessprice"
                            + ",v_inventory.moreamount"
                            + ",v_inventory.moreprice"
                            + ",v_inventory.note"
                            + ",v_inventory.inventoryid";

    private static VInventoryManager singleton = new VInventoryManager();

    /**
     * Get the VInventoryManager singleton.
     *
     * @return VInventoryManager 
     */
    synchronized public static VInventoryManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own VInventoryManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(VInventoryManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new VInventoryBean instance.
     *
     * @return the new VInventoryBean 
     */
    public VInventoryBean createVInventoryBean()
    {
        return new VInventoryBean();
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from v_inventory.
     *
     * @return an array of VInventoryManager pObject
     */
    //38
    public VInventoryBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM v_inventory",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of VInventoryBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting VInventoryBean table 
     */
    //49
    public VInventoryBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of VInventoryBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting VInventoryBean table 
     */
    //51
    public VInventoryBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from v_inventory " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from v_inventory ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (VInventoryBean[])v.toArray(new VInventoryBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from v_inventory table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the v_inventory table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM v_inventory " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the VInventoryBean pObject into the database.
     *
     * @param pObject the VInventoryBean pObject to be saved
     */
    //100
    public VInventoryBean save(VInventoryBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into v_inventory (");
    
                if (pObject.isInstitutionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("institutionid");
                    _dirtyCount++;
                }

                if (pObject.isProductgroupidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("productgroupid");
                    _dirtyCount++;
                }

                if (pObject.isProductidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("productid");
                    _dirtyCount++;
                }

                if (pObject.isAccountnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("accountname");
                    _dirtyCount++;
                }

                if (pObject.isCodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("code");
                    _dirtyCount++;
                }

                if (pObject.isCompnumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("compnum");
                    _dirtyCount++;
                }

                if (pObject.isInvnumberModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("invnumber");
                    _dirtyCount++;
                }

                if (pObject.isProductnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("productname");
                    _dirtyCount++;
                }

                if (pObject.isUnitnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("unitname");
                    _dirtyCount++;
                }

                if (pObject.isPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("price");
                    _dirtyCount++;
                }

                if (pObject.isRealamountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("realamount");
                    _dirtyCount++;
                }

                if (pObject.isRealpriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("realprice");
                    _dirtyCount++;
                }

                if (pObject.isAmountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amount");
                    _dirtyCount++;
                }

                if (pObject.isAccpriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("accprice");
                    _dirtyCount++;
                }

                if (pObject.isLessamountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("lessamount");
                    _dirtyCount++;
                }

                if (pObject.isLesspriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("lessprice");
                    _dirtyCount++;
                }

                if (pObject.isMoreamountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("moreamount");
                    _dirtyCount++;
                }

                if (pObject.isMorepriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("moreprice");
                    _dirtyCount++;
                }

                if (pObject.isNoteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("note");
                    _dirtyCount++;
                }

                if (pObject.isInventoryidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("inventoryid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isProductgroupidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
                }
    
                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isAccountnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getAccountname());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isCompnumModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompnum());
                }
    
                if (pObject.isInvnumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getInvnumber());
                }
    
                if (pObject.isProductnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getProductname());
                }
    
                if (pObject.isUnitnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getUnitname());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isRealamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
                }
    
                if (pObject.isRealpriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRealprice());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isAccpriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAccprice());
                }
    
                if (pObject.isLessamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLessamount());
                }
    
                if (pObject.isLesspriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLessprice());
                }
    
                if (pObject.isMoreamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreamount());
                }
    
                if (pObject.isMorepriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreprice());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isInventoryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE v_inventory SET ");
                boolean useComma=false;

                if (pObject.isInstitutionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("institutionid").append("=?");
                }

                if (pObject.isProductgroupidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("productgroupid").append("=?");
                }

                if (pObject.isProductidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("productid").append("=?");
                }

                if (pObject.isAccountnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("accountname").append("=?");
                }

                if (pObject.isCodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("code").append("=?");
                }

                if (pObject.isCompnumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("compnum").append("=?");
                }

                if (pObject.isInvnumberModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("invnumber").append("=?");
                }

                if (pObject.isProductnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("productname").append("=?");
                }

                if (pObject.isUnitnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("unitname").append("=?");
                }

                if (pObject.isPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("price").append("=?");
                }

                if (pObject.isRealamountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("realamount").append("=?");
                }

                if (pObject.isRealpriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("realprice").append("=?");
                }

                if (pObject.isAmountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amount").append("=?");
                }

                if (pObject.isAccpriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("accprice").append("=?");
                }

                if (pObject.isLessamountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("lessamount").append("=?");
                }

                if (pObject.isLesspriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("lessprice").append("=?");
                }

                if (pObject.isMoreamountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("moreamount").append("=?");
                }

                if (pObject.isMorepriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("moreprice").append("=?");
                }

                if (pObject.isNoteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("note").append("=?");
                }

                if (pObject.isInventoryidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("inventoryid").append("=?");
                }
                _sql.append("");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isInstitutionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }

                if (pObject.isProductgroupidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
                }

                if (pObject.isProductidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }

                if (pObject.isAccountnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getAccountname());
                }

                if (pObject.isCodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getCode());
                }

                if (pObject.isCompnumModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCompnum());
                }

                if (pObject.isInvnumberModified()) {
                      ps.setString(++_dirtyCount, pObject.getInvnumber());
                }

                if (pObject.isProductnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getProductname());
                }

                if (pObject.isUnitnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getUnitname());
                }

                if (pObject.isPriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }

                if (pObject.isRealamountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
                }

                if (pObject.isRealpriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getRealprice());
                }

                if (pObject.isAmountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }

                if (pObject.isAccpriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAccprice());
                }

                if (pObject.isLessamountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getLessamount());
                }

                if (pObject.isLesspriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getLessprice());
                }

                if (pObject.isMoreamountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreamount());
                }

                if (pObject.isMorepriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreprice());
                }

                if (pObject.isNoteModified()) {
                      ps.setString(++_dirtyCount, pObject.getNote());
                }

                if (pObject.isInventoryidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of VInventoryBean pObjects into the database.
     *
     * @param pObjects the VInventoryBean pObject table to be saved
     * @return the saved VInventoryBean array.
     */
    //65
    public VInventoryBean[] save(VInventoryBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique VInventoryBean pObject from a template one giving a c
     *
     * @param pObject the VInventoryBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public VInventoryBean loadUniqueUsingTemplate(VInventoryBean pObject) throws SQLException
    {
         VInventoryBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of VInventoryBean from a template one.
     *
     * @param pObject the VInventoryBean template to look for
     * @return all the VInventoryBean matching the template
     */
    //88
    public VInventoryBean[] loadUsingTemplate(VInventoryBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from v_inventory WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isInstitutionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
             }
    
             if (pObject.isProductgroupidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productgroupid= ?");
             }
    
             if (pObject.isProductidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
             }
    
             if (pObject.isAccountnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("accountname= ?");
             }
    
             if (pObject.isCodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
             }
    
             if (pObject.isCompnumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("compnum= ?");
             }
    
             if (pObject.isInvnumberModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invnumber= ?");
             }
    
             if (pObject.isProductnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productname= ?");
             }
    
             if (pObject.isUnitnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("unitname= ?");
             }
    
             if (pObject.isPriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
             }
    
             if (pObject.isRealamountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("realamount= ?");
             }
    
             if (pObject.isRealpriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("realprice= ?");
             }
    
             if (pObject.isAmountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
             }
    
             if (pObject.isAccpriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("accprice= ?");
             }
    
             if (pObject.isLessamountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lessamount= ?");
             }
    
             if (pObject.isLesspriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lessprice= ?");
             }
    
             if (pObject.isMoreamountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("moreamount= ?");
             }
    
             if (pObject.isMorepriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("moreprice= ?");
             }
    
             if (pObject.isNoteModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
             }
    
             if (pObject.isInventoryidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("inventoryid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isInstitutionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
             }
    
             if (pObject.isProductgroupidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
             }
    
             if (pObject.isProductidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
             }
    
             if (pObject.isAccountnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getAccountname());
             }
    
             if (pObject.isCodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getCode());
             }
    
             if (pObject.isCompnumModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCompnum());
             }
    
             if (pObject.isInvnumberModified()) {
                 ps.setString(++_dirtyCount, pObject.getInvnumber());
             }
    
             if (pObject.isProductnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getProductname());
             }
    
             if (pObject.isUnitnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getUnitname());
             }
    
             if (pObject.isPriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
             }
    
             if (pObject.isRealamountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
             }
    
             if (pObject.isRealpriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getRealprice());
             }
    
             if (pObject.isAmountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
             }
    
             if (pObject.isAccpriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAccprice());
             }
    
             if (pObject.isLessamountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getLessamount());
             }
    
             if (pObject.isLesspriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getLessprice());
             }
    
             if (pObject.isMoreamountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreamount());
             }
    
             if (pObject.isMorepriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreprice());
             }
    
             if (pObject.isNoteModified()) {
                 ps.setString(++_dirtyCount, pObject.getNote());
             }
    
             if (pObject.isInventoryidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a VInventoryBean template.
     *
     * @param pObject the VInventoryBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(VInventoryBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM v_inventory WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isInstitutionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("institutionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isProductgroupidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("productgroupid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isProductidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("productid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAccountnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("accountname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("code").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompnumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("compnum").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInvnumberInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("invnumber").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isProductnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("productname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isUnitnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("unitname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("price").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRealamountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("realamount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRealpriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("realprice").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAccpriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("accprice").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLessamountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("lessamount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLesspriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("lessprice").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMoreamountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("moreamount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMorepriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("moreprice").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNoteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("note").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInventoryidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("inventoryid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isInstitutionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
            }
    
            if (pObject.isProductgroupidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
            }
    
            if (pObject.isProductidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
            }
    
            if (pObject.isAccountnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAccountname());
            }
    
            if (pObject.isCodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCode());
            }
    
            if (pObject.isCompnumInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCompnum());
            }
    
            if (pObject.isInvnumberInitialized()) {
                ps.setString(++_dirtyCount, pObject.getInvnumber());
            }
    
            if (pObject.isProductnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getProductname());
            }
    
            if (pObject.isUnitnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getUnitname());
            }
    
            if (pObject.isPriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
            }
    
            if (pObject.isRealamountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
            }
    
            if (pObject.isRealpriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getRealprice());
            }
    
            if (pObject.isAmountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
            }
    
            if (pObject.isAccpriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAccprice());
            }
    
            if (pObject.isLessamountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getLessamount());
            }
    
            if (pObject.isLesspriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getLessprice());
            }
    
            if (pObject.isMoreamountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreamount());
            }
    
            if (pObject.isMorepriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreprice());
            }
    
            if (pObject.isNoteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNote());
            }
    
            if (pObject.isInventoryidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table v_inventory.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table v_inventory with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from v_inventory " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table v_inventory with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific VInventoryBean pObject given a c
     *
     * @param pObject the VInventoryBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(VInventoryBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from v_inventory WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isInstitutionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
                }
    
                if (pObject.isProductgroupidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productgroupid= ?");
                }
    
                if (pObject.isProductidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
                }
    
                if (pObject.isAccountnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("accountname= ?");
                }
    
                if (pObject.isCodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
                }
    
                if (pObject.isCompnumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("compnum= ?");
                }
    
                if (pObject.isInvnumberModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invnumber= ?");
                }
    
                if (pObject.isProductnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productname= ?");
                }
    
                if (pObject.isUnitnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("unitname= ?");
                }
    
                if (pObject.isPriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
                }
    
                if (pObject.isRealamountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("realamount= ?");
                }
    
                if (pObject.isRealpriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("realprice= ?");
                }
    
                if (pObject.isAmountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
                }
    
                if (pObject.isAccpriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("accprice= ?");
                }
    
                if (pObject.isLessamountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lessamount= ?");
                }
    
                if (pObject.isLesspriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lessprice= ?");
                }
    
                if (pObject.isMoreamountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("moreamount= ?");
                }
    
                if (pObject.isMorepriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("moreprice= ?");
                }
    
                if (pObject.isNoteModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
                }
    
                if (pObject.isInventoryidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("inventoryid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isProductgroupidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
                }
    
                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isAccountnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getAccountname());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isCompnumModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompnum());
                }
    
                if (pObject.isInvnumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getInvnumber());
                }
    
                if (pObject.isProductnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getProductname());
                }
    
                if (pObject.isUnitnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getUnitname());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isRealamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
                }
    
                if (pObject.isRealpriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRealprice());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isAccpriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAccprice());
                }
    
                if (pObject.isLessamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLessamount());
                }
    
                if (pObject.isLesspriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLessprice());
                }
    
                if (pObject.isMoreamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreamount());
                }
    
                if (pObject.isMorepriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getMoreprice());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isInventoryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the v_inventory on a VInventoryBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting VInventoryBean pObject
     */
    //72
    public VInventoryBean decodeRow(ResultSet rs) throws SQLException
    {
        VInventoryBean pObject = createVInventoryBean();
        pObject.setInstitutionid(Manager.getInteger(rs, 1));
        pObject.setProductgroupid(Manager.getInteger(rs, 2));
        pObject.setProductid(Manager.getLong(rs, 3));
        pObject.setAccountname(rs.getString(4));
        pObject.setCode(rs.getString(5));
        pObject.setCompnum(Manager.getInteger(rs, 6));
        pObject.setInvnumber(rs.getString(7));
        pObject.setProductname(rs.getString(8));
        pObject.setUnitname(rs.getString(9));
        pObject.setPrice(Manager.getDouble(rs, 10));
        pObject.setRealamount(Manager.getDouble(rs, 11));
        pObject.setRealprice(Manager.getDouble(rs, 12));
        pObject.setAmount(Manager.getDouble(rs, 13));
        pObject.setAccprice(Manager.getDouble(rs, 14));
        pObject.setLessamount(Manager.getDouble(rs, 15));
        pObject.setLessprice(Manager.getDouble(rs, 16));
        pObject.setMoreamount(Manager.getDouble(rs, 17));
        pObject.setMoreprice(Manager.getDouble(rs, 18));
        pObject.setNote(rs.getString(19));
        pObject.setInventoryid(Manager.getInteger(rs, 20));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the v_inventory table on a VInventoryBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting VInventoryBean pObject
     */
    //73
    public VInventoryBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        VInventoryBean pObject = createVInventoryBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_INSTITUTIONID:
                    ++pos;
                    pObject.setInstitutionid(Manager.getInteger(rs, pos));
                    break;
                case ID_PRODUCTGROUPID:
                    ++pos;
                    pObject.setProductgroupid(Manager.getInteger(rs, pos));
                    break;
                case ID_PRODUCTID:
                    ++pos;
                    pObject.setProductid(Manager.getLong(rs, pos));
                    break;
                case ID_ACCOUNTNAME:
                    ++pos;
                    pObject.setAccountname(rs.getString(pos));
                    break;
                case ID_CODE:
                    ++pos;
                    pObject.setCode(rs.getString(pos));
                    break;
                case ID_COMPNUM:
                    ++pos;
                    pObject.setCompnum(Manager.getInteger(rs, pos));
                    break;
                case ID_INVNUMBER:
                    ++pos;
                    pObject.setInvnumber(rs.getString(pos));
                    break;
                case ID_PRODUCTNAME:
                    ++pos;
                    pObject.setProductname(rs.getString(pos));
                    break;
                case ID_UNITNAME:
                    ++pos;
                    pObject.setUnitname(rs.getString(pos));
                    break;
                case ID_PRICE:
                    ++pos;
                    pObject.setPrice(Manager.getDouble(rs, pos));
                    break;
                case ID_REALAMOUNT:
                    ++pos;
                    pObject.setRealamount(Manager.getDouble(rs, pos));
                    break;
                case ID_REALPRICE:
                    ++pos;
                    pObject.setRealprice(Manager.getDouble(rs, pos));
                    break;
                case ID_AMOUNT:
                    ++pos;
                    pObject.setAmount(Manager.getDouble(rs, pos));
                    break;
                case ID_ACCPRICE:
                    ++pos;
                    pObject.setAccprice(Manager.getDouble(rs, pos));
                    break;
                case ID_LESSAMOUNT:
                    ++pos;
                    pObject.setLessamount(Manager.getDouble(rs, pos));
                    break;
                case ID_LESSPRICE:
                    ++pos;
                    pObject.setLessprice(Manager.getDouble(rs, pos));
                    break;
                case ID_MOREAMOUNT:
                    ++pos;
                    pObject.setMoreamount(Manager.getDouble(rs, pos));
                    break;
                case ID_MOREPRICE:
                    ++pos;
                    pObject.setMoreprice(Manager.getDouble(rs, pos));
                    break;
                case ID_NOTE:
                    ++pos;
                    pObject.setNote(rs.getString(pos));
                    break;
                case ID_INVENTORYID:
                    ++pos;
                    pObject.setInventoryid(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of VInventoryBean 
     */
    //41
    public VInventoryBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of VInventoryBean 
     */
    public VInventoryBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (VInventoryBean[])v.toArray(new VInventoryBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private VInventoryListener listener = null;

    /**
     * Registers a unique VInventoryListener listener.
     */
    //66.5
    public void registerListener(VInventoryListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the VInventoryBean pObject.
     *
     * @param pObject the VInventoryBean pObject to be saved
     */
    //67
    void beforeInsert(VInventoryBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the VInventoryBean pObject.
     *
     * @param pObject the VInventoryBean pObject to be saved
     */
    //68
    void afterInsert(VInventoryBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the VInventoryBean pObject.
     *
     * @param pObject the VInventoryBean pObject to be updated
     */
    //69
    void beforeUpdate(VInventoryBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the VInventoryBean pObject.
     *
     * @param pObject the VInventoryBean pObject to be updated
     */
    //70
    void afterUpdate(VInventoryBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
