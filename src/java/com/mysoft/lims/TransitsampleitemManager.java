// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the transitsampleitem table.
 */
public class TransitsampleitemManager
// extends+ 

// extends- 
{

    /**
     * Column transitsampleitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_TRANSITSAMPLEITEMID = 0;
    public static final int TYPE_TRANSITSAMPLEITEMID = Types.BIGINT;
    public static final String NAME_TRANSITSAMPLEITEMID = "transitsampleitemid";

    /**
     * Column contractsampleitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTSAMPLEITEMID = 1;
    public static final int TYPE_CONTRACTSAMPLEITEMID = Types.BIGINT;
    public static final String NAME_CONTRACTSAMPLEITEMID = "contractsampleitemid";

    /**
     * Column locationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LOCATIONID = 2;
    public static final int TYPE_LOCATIONID = Types.INTEGER;
    public static final String NAME_LOCATIONID = "locationid";

    /**
     * Column outside of type Types.BIT mapped to Boolean.
     */
    public static final int ID_OUTSIDE = 3;
    public static final int TYPE_OUTSIDE = Types.BIT;
    public static final String NAME_OUTSIDE = "outside";

    /**
     * Column transitdate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_TRANSITDATE = 4;
    public static final int TYPE_TRANSITDATE = Types.DATE;
    public static final String NAME_TRANSITDATE = "transitdate";

    /**
     * Column transittime of type Types.TIME mapped to java.util.Date.
     */
    public static final int ID_TRANSITTIME = 5;
    public static final int TYPE_TRANSITTIME = Types.TIME;
    public static final String NAME_TRANSITTIME = "transittime";

    /**
     * Column container of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CONTAINER = 6;
    public static final int TYPE_CONTAINER = Types.VARCHAR;
    public static final String NAME_CONTAINER = "container";

    /**
     * Column receiver of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RECEIVER = 7;
    public static final int TYPE_RECEIVER = Types.VARCHAR;
    public static final String NAME_RECEIVER = "receiver";

    /**
     * Column researcher of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RESEARCHER = 8;
    public static final int TYPE_RESEARCHER = Types.VARCHAR;
    public static final String NAME_RESEARCHER = "researcher";

    /**
     * Column personals of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PERSONALS = 9;
    public static final int TYPE_PERSONALS = Types.VARCHAR;
    public static final String NAME_PERSONALS = "personals";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 10;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 11;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 12;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";

    /**
     * Column parentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PARENTID = 13;
    public static final int TYPE_PARENTID = Types.BIGINT;
    public static final String NAME_PARENTID = "parentid";

    /**
     * Column responsibleid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RESPONSIBLEID = 14;
    public static final int TYPE_RESPONSIBLEID = Types.INTEGER;
    public static final String NAME_RESPONSIBLEID = "responsibleid";

    /**
     * Column sendreason of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SENDREASON = 15;
    public static final int TYPE_SENDREASON = Types.VARCHAR;
    public static final String NAME_SENDREASON = "sendreason";

    /**
     * Column sendcondition of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SENDCONDITION = 16;
    public static final int TYPE_SENDCONDITION = Types.VARCHAR;
    public static final String NAME_SENDCONDITION = "sendcondition";

    /**
     * Column getdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_GETDATE = 17;
    public static final int TYPE_GETDATE = Types.TIMESTAMP;
    public static final String NAME_GETDATE = "getdate";

    /**
     * Column getbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_GETBYID = 18;
    public static final int TYPE_GETBYID = Types.INTEGER;
    public static final String NAME_GETBYID = "getbyid";

    /**
     * Column fromlocationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FROMLOCATIONID = 19;
    public static final int TYPE_FROMLOCATIONID = Types.INTEGER;
    public static final String NAME_FROMLOCATIONID = "fromlocationid";

    /**
     * Column transitactid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_TRANSITACTID = 20;
    public static final int TYPE_TRANSITACTID = Types.BIGINT;
    public static final String NAME_TRANSITACTID = "transitactid";


    private static final String TABLE_NAME = "transitsampleitem";

    /**
     * Create an array of type string containing all the fields of the transitsampleitem table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "transitsampleitem.transitsampleitemid"
        ,"transitsampleitem.contractsampleitemid"
        ,"transitsampleitem.locationid"
        ,"transitsampleitem.outside"
        ,"transitsampleitem.transitdate"
        ,"transitsampleitem.transittime"
        ,"transitsampleitem.container"
        ,"transitsampleitem.receiver"
        ,"transitsampleitem.researcher"
        ,"transitsampleitem.personals"
        ,"transitsampleitem.regbyid"
        ,"transitsampleitem.regdate"
        ,"transitsampleitem.status"
        ,"transitsampleitem.parentid"
        ,"transitsampleitem.responsibleid"
        ,"transitsampleitem.sendreason"
        ,"transitsampleitem.sendcondition"
        ,"transitsampleitem.getdate"
        ,"transitsampleitem.getbyid"
        ,"transitsampleitem.fromlocationid"
        ,"transitsampleitem.transitactid"
    };

    /**
     * Field that contains the comma separated fields of the transitsampleitem table.
     */
    private static final String ALL_FIELDS = "transitsampleitem.transitsampleitemid"
                            + ",transitsampleitem.contractsampleitemid"
                            + ",transitsampleitem.locationid"
                            + ",transitsampleitem.outside"
                            + ",transitsampleitem.transitdate"
                            + ",transitsampleitem.transittime"
                            + ",transitsampleitem.container"
                            + ",transitsampleitem.receiver"
                            + ",transitsampleitem.researcher"
                            + ",transitsampleitem.personals"
                            + ",transitsampleitem.regbyid"
                            + ",transitsampleitem.regdate"
                            + ",transitsampleitem.status"
                            + ",transitsampleitem.parentid"
                            + ",transitsampleitem.responsibleid"
                            + ",transitsampleitem.sendreason"
                            + ",transitsampleitem.sendcondition"
                            + ",transitsampleitem.getdate"
                            + ",transitsampleitem.getbyid"
                            + ",transitsampleitem.fromlocationid"
                            + ",transitsampleitem.transitactid";

    private static TransitsampleitemManager singleton = new TransitsampleitemManager();

    /**
     * Get the TransitsampleitemManager singleton.
     *
     * @return TransitsampleitemManager 
     */
    synchronized public static TransitsampleitemManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own TransitsampleitemManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(TransitsampleitemManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new TransitsampleitemBean instance.
     *
     * @return the new TransitsampleitemBean 
     */
    public TransitsampleitemBean createTransitsampleitemBean()
    {
        return new TransitsampleitemBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a TransitsampleitemBean from the transitsampleitem using its key fields.
     *
     * @return a unique TransitsampleitemBean 
     */
    //12
    public TransitsampleitemBean loadByPrimaryKey(Long transitsampleitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitsampleitem WHERE transitsampleitem.transitsampleitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, transitsampleitemid);
            TransitsampleitemBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long transitsampleitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from transitsampleitem WHERE transitsampleitem.transitsampleitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, transitsampleitemid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads TransitsampleitemBean array from the transitsampleitem table using its contractsampleitemid field.
     *
     * @return an array of TransitsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitsampleitemBean[] loadByContractsampleitemid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitsampleitem WHERE contractsampleitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitsampleitem table by contractsampleitemid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractsampleitemid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitsampleitem WHERE contractsampleitemid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitsampleitemBean array from the transitsampleitem table using its fromlocationid field.
     *
     * @return an array of TransitsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitsampleitemBean[] loadByFromlocationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitsampleitem WHERE fromlocationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitsampleitem table by fromlocationid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByFromlocationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitsampleitem WHERE fromlocationid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitsampleitemBean array from the transitsampleitem table using its getbyid field.
     *
     * @return an array of TransitsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitsampleitemBean[] loadByGetbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitsampleitem WHERE getbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitsampleitem table by getbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByGetbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitsampleitem WHERE getbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitsampleitemBean array from the transitsampleitem table using its transitactid field.
     *
     * @return an array of TransitsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitsampleitemBean[] loadByTransitactid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitsampleitem WHERE transitactid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitsampleitem table by transitactid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByTransitactid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitsampleitem WHERE transitactid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ContractsampleitemBean object from the transitsampleitem.contractsampleitemid field.
     *
     * @param pObject the TransitsampleitemBean 
     * @return the associated ContractsampleitemBean pObject
     */
    // GET IMPORTED
    public ContractsampleitemBean getContractsampleitemBean(TransitsampleitemBean pObject) throws SQLException
    {
        ContractsampleitemBean other = ContractsampleitemManager.getInstance().createContractsampleitemBean();
        other.setContractsampleitemid(pObject.getContractsampleitemid());
        return ContractsampleitemManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitsampleitemBean object to the ContractsampleitemBean object.
     *
     * @param pObject the TransitsampleitemBean object to use
     * @param pObjectToBeSet the ContractsampleitemBean object to associate to the TransitsampleitemBean 
     * @return the associated ContractsampleitemBean pObject
     */
    // SET IMPORTED
    public TransitsampleitemBean setContractsampleitemBean(TransitsampleitemBean pObject,ContractsampleitemBean pObjectToBeSet)
    {
        pObject.setContractsampleitemid(pObjectToBeSet.getContractsampleitemid());
        return pObject;
    }

    /**
     * Retrieves the InstitutionBean object from the transitsampleitem.institutionid field.
     *
     * @param pObject the TransitsampleitemBean 
     * @return the associated InstitutionBean pObject
     */
    // GET IMPORTED
    public InstitutionBean getInstitutionBean(TransitsampleitemBean pObject) throws SQLException
    {
        InstitutionBean other = InstitutionManager.getInstance().createInstitutionBean();
        other.setInstitutionid(pObject.getFromlocationid());
        return InstitutionManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitsampleitemBean object to the InstitutionBean object.
     *
     * @param pObject the TransitsampleitemBean object to use
     * @param pObjectToBeSet the InstitutionBean object to associate to the TransitsampleitemBean 
     * @return the associated InstitutionBean pObject
     */
    // SET IMPORTED
    public TransitsampleitemBean setInstitutionBean(TransitsampleitemBean pObject,InstitutionBean pObjectToBeSet)
    {
        pObject.setFromlocationid(pObjectToBeSet.getInstitutionid());
        return pObject;
    }

    /**
     * Retrieves the PersonellBean object from the transitsampleitem.personellid field.
     *
     * @param pObject the TransitsampleitemBean 
     * @return the associated PersonellBean pObject
     */
    // GET IMPORTED
    public PersonellBean getPersonellBean(TransitsampleitemBean pObject) throws SQLException
    {
        PersonellBean other = PersonellManager.getInstance().createPersonellBean();
        other.setPersonellid(pObject.getGetbyid());
        return PersonellManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitsampleitemBean object to the PersonellBean object.
     *
     * @param pObject the TransitsampleitemBean object to use
     * @param pObjectToBeSet the PersonellBean object to associate to the TransitsampleitemBean 
     * @return the associated PersonellBean pObject
     */
    // SET IMPORTED
    public TransitsampleitemBean setPersonellBean(TransitsampleitemBean pObject,PersonellBean pObjectToBeSet)
    {
        pObject.setGetbyid(pObjectToBeSet.getPersonellid());
        return pObject;
    }

    /**
     * Retrieves the TransitactBean object from the transitsampleitem.transitactid field.
     *
     * @param pObject the TransitsampleitemBean 
     * @return the associated TransitactBean pObject
     */
    // GET IMPORTED
    public TransitactBean getTransitactBean(TransitsampleitemBean pObject) throws SQLException
    {
        TransitactBean other = TransitactManager.getInstance().createTransitactBean();
        other.setTransitactid(pObject.getTransitactid());
        return TransitactManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitsampleitemBean object to the TransitactBean object.
     *
     * @param pObject the TransitsampleitemBean object to use
     * @param pObjectToBeSet the TransitactBean object to associate to the TransitsampleitemBean 
     * @return the associated TransitactBean pObject
     */
    // SET IMPORTED
    public TransitsampleitemBean setTransitactBean(TransitsampleitemBean pObject,TransitactBean pObjectToBeSet)
    {
        pObject.setTransitactid(pObjectToBeSet.getTransitactid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from transitsampleitem.
     *
     * @return an array of TransitsampleitemManager pObject
     */
    //38
    public TransitsampleitemBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitsampleitem",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TransitsampleitemBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TransitsampleitemBean table 
     */
    //49
    public TransitsampleitemBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TransitsampleitemBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting TransitsampleitemBean table 
     */
    //51
    public TransitsampleitemBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from transitsampleitem " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from transitsampleitem ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (TransitsampleitemBean[])v.toArray(new TransitsampleitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from transitsampleitem table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the transitsampleitem table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM transitsampleitem " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the TransitsampleitemBean pObject into the database.
     *
     * @param pObject the TransitsampleitemBean pObject to be saved
     */
    //100
    public TransitsampleitemBean save(TransitsampleitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isTransitsampleitemidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('transitsampleitemid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setTransitsampleitemid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into transitsampleitem (");
    
                if (pObject.isTransitsampleitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("transitsampleitemid");
                    _dirtyCount++;
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractsampleitemid");
                    _dirtyCount++;
                }

                if (pObject.isLocationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("locationid");
                    _dirtyCount++;
                }

                if (pObject.isOutsideModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("outside");
                    _dirtyCount++;
                }

                if (pObject.isTransitdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("transitdate");
                    _dirtyCount++;
                }

                if (pObject.isTransittimeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("transittime");
                    _dirtyCount++;
                }

                if (pObject.isContainerModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("container");
                    _dirtyCount++;
                }

                if (pObject.isReceiverModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("receiver");
                    _dirtyCount++;
                }

                if (pObject.isResearcherModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("researcher");
                    _dirtyCount++;
                }

                if (pObject.isPersonalsModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("personals");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                if (pObject.isParentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("parentid");
                    _dirtyCount++;
                }

                if (pObject.isResponsibleidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("responsibleid");
                    _dirtyCount++;
                }

                if (pObject.isSendreasonModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sendreason");
                    _dirtyCount++;
                }

                if (pObject.isSendconditionModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sendcondition");
                    _dirtyCount++;
                }

                if (pObject.isGetdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("getdate");
                    _dirtyCount++;
                }

                if (pObject.isGetbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("getbyid");
                    _dirtyCount++;
                }

                if (pObject.isFromlocationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fromlocationid");
                    _dirtyCount++;
                }

                if (pObject.isTransitactidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("transitactid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isTransitsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTransitsampleitemid());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isLocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLocationid());
                }
    
                if (pObject.isOutsideModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getOutside());
                }
    
                if (pObject.isTransitdateModified()) {
                    if (pObject.getTransitdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getTransitdate().getTime()));
                }
    
                if (pObject.isTransittimeModified()) {
                    if (pObject.getTransittime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getTransittime().getTime()));
                }
    
                if (pObject.isContainerModified()) {
                    ps.setString(++_dirtyCount, pObject.getContainer());
                }
    
                if (pObject.isReceiverModified()) {
                    ps.setString(++_dirtyCount, pObject.getReceiver());
                }
    
                if (pObject.isResearcherModified()) {
                    ps.setString(++_dirtyCount, pObject.getResearcher());
                }
    
                if (pObject.isPersonalsModified()) {
                    ps.setString(++_dirtyCount, pObject.getPersonals());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isResponsibleidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
                }
    
                if (pObject.isSendreasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendreason());
                }
    
                if (pObject.isSendconditionModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendcondition());
                }
    
                if (pObject.isGetdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
                }
    
                if (pObject.isGetbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
                }
    
                if (pObject.isFromlocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
                }
    
                if (pObject.isTransitactidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE transitsampleitem SET ");
                boolean useComma=false;

                if (pObject.isTransitsampleitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("transitsampleitemid").append("=?");
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractsampleitemid").append("=?");
                }

                if (pObject.isLocationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("locationid").append("=?");
                }

                if (pObject.isOutsideModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("outside").append("=?");
                }

                if (pObject.isTransitdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("transitdate").append("=?");
                }

                if (pObject.isTransittimeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("transittime").append("=?");
                }

                if (pObject.isContainerModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("container").append("=?");
                }

                if (pObject.isReceiverModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("receiver").append("=?");
                }

                if (pObject.isResearcherModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("researcher").append("=?");
                }

                if (pObject.isPersonalsModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("personals").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }

                if (pObject.isParentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("parentid").append("=?");
                }

                if (pObject.isResponsibleidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("responsibleid").append("=?");
                }

                if (pObject.isSendreasonModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sendreason").append("=?");
                }

                if (pObject.isSendconditionModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sendcondition").append("=?");
                }

                if (pObject.isGetdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("getdate").append("=?");
                }

                if (pObject.isGetbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("getbyid").append("=?");
                }

                if (pObject.isFromlocationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fromlocationid").append("=?");
                }

                if (pObject.isTransitactidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("transitactid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("transitsampleitem.transitsampleitemid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isTransitsampleitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getTransitsampleitemid());
                }

                if (pObject.isContractsampleitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }

                if (pObject.isLocationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLocationid());
                }

                if (pObject.isOutsideModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getOutside());
                }

                if (pObject.isTransitdateModified()) {
                      if (pObject.getTransitdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getTransitdate().getTime()));
                }

                if (pObject.isTransittimeModified()) {
                      if (pObject.getTransittime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getTransittime().getTime()));
                }

                if (pObject.isContainerModified()) {
                      ps.setString(++_dirtyCount, pObject.getContainer());
                }

                if (pObject.isReceiverModified()) {
                      ps.setString(++_dirtyCount, pObject.getReceiver());
                }

                if (pObject.isResearcherModified()) {
                      ps.setString(++_dirtyCount, pObject.getResearcher());
                }

                if (pObject.isPersonalsModified()) {
                      ps.setString(++_dirtyCount, pObject.getPersonals());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }

                if (pObject.isParentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }

                if (pObject.isResponsibleidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
                }

                if (pObject.isSendreasonModified()) {
                      ps.setString(++_dirtyCount, pObject.getSendreason());
                }

                if (pObject.isSendconditionModified()) {
                      ps.setString(++_dirtyCount, pObject.getSendcondition());
                }

                if (pObject.isGetdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
                }

                if (pObject.isGetbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
                }

                if (pObject.isFromlocationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
                }

                if (pObject.isTransitactidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getTransitsampleitemid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of TransitsampleitemBean pObjects into the database.
     *
     * @param pObjects the TransitsampleitemBean pObject table to be saved
     * @return the saved TransitsampleitemBean array.
     */
    //65
    public TransitsampleitemBean[] save(TransitsampleitemBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique TransitsampleitemBean pObject from a template one giving a c
     *
     * @param pObject the TransitsampleitemBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public TransitsampleitemBean loadUniqueUsingTemplate(TransitsampleitemBean pObject) throws SQLException
    {
         TransitsampleitemBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of TransitsampleitemBean from a template one.
     *
     * @param pObject the TransitsampleitemBean template to look for
     * @return all the TransitsampleitemBean matching the template
     */
    //88
    public TransitsampleitemBean[] loadUsingTemplate(TransitsampleitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from transitsampleitem WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isTransitsampleitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitsampleitemid= ?");
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
             }
    
             if (pObject.isLocationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("locationid= ?");
             }
    
             if (pObject.isOutsideModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("outside= ?");
             }
    
             if (pObject.isTransitdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitdate= ?");
             }
    
             if (pObject.isTransittimeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transittime= ?");
             }
    
             if (pObject.isContainerModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("container= ?");
             }
    
             if (pObject.isReceiverModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("receiver= ?");
             }
    
             if (pObject.isResearcherModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("researcher= ?");
             }
    
             if (pObject.isPersonalsModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("personals= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (pObject.isParentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
             }
    
             if (pObject.isResponsibleidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("responsibleid= ?");
             }
    
             if (pObject.isSendreasonModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendreason= ?");
             }
    
             if (pObject.isSendconditionModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendcondition= ?");
             }
    
             if (pObject.isGetdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getdate= ?");
             }
    
             if (pObject.isGetbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getbyid= ?");
             }
    
             if (pObject.isFromlocationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fromlocationid= ?");
             }
    
             if (pObject.isTransitactidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitactid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isTransitsampleitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getTransitsampleitemid());
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
             }
    
             if (pObject.isLocationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLocationid());
             }
    
             if (pObject.isOutsideModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getOutside());
             }
    
             if (pObject.isTransitdateModified()) {
                 if (pObject.getTransitdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getTransitdate().getTime()));
             }
    
             if (pObject.isTransittimeModified()) {
                 if (pObject.getTransittime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getTransittime().getTime()));
             }
    
             if (pObject.isContainerModified()) {
                 ps.setString(++_dirtyCount, pObject.getContainer());
             }
    
             if (pObject.isReceiverModified()) {
                 ps.setString(++_dirtyCount, pObject.getReceiver());
             }
    
             if (pObject.isResearcherModified()) {
                 ps.setString(++_dirtyCount, pObject.getResearcher());
             }
    
             if (pObject.isPersonalsModified()) {
                 ps.setString(++_dirtyCount, pObject.getPersonals());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             if (pObject.isParentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
             }
    
             if (pObject.isResponsibleidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
             }
    
             if (pObject.isSendreasonModified()) {
                 ps.setString(++_dirtyCount, pObject.getSendreason());
             }
    
             if (pObject.isSendconditionModified()) {
                 ps.setString(++_dirtyCount, pObject.getSendcondition());
             }
    
             if (pObject.isGetdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
             }
    
             if (pObject.isGetbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
             }
    
             if (pObject.isFromlocationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
             }
    
             if (pObject.isTransitactidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a TransitsampleitemBean template.
     *
     * @param pObject the TransitsampleitemBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(TransitsampleitemBean pObject) throws SQLException
    {
        if (pObject.isTransitsampleitemidInitialized())
            return deleteByPrimaryKey(pObject.getTransitsampleitemid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM transitsampleitem WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isTransitsampleitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("transitsampleitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractsampleitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLocationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("locationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOutsideInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("outside").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTransitdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("transitdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTransittimeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("transittime").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContainerInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("container").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReceiverInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("receiver").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResearcherInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("researcher").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPersonalsInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("personals").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isParentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("parentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResponsibleidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("responsibleid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSendreasonInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sendreason").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSendconditionInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sendcondition").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGetdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("getdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGetbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("getbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFromlocationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fromlocationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTransitactidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("transitactid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isTransitsampleitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getTransitsampleitemid());
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
            }
    
            if (pObject.isLocationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLocationid());
            }
    
            if (pObject.isOutsideInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getOutside());
            }
    
            if (pObject.isTransitdateInitialized()) {
                if (pObject.getTransitdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getTransitdate().getTime()));
            }
    
            if (pObject.isTransittimeInitialized()) {
                if (pObject.getTransittime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getTransittime().getTime()));
            }
    
            if (pObject.isContainerInitialized()) {
                ps.setString(++_dirtyCount, pObject.getContainer());
            }
    
            if (pObject.isReceiverInitialized()) {
                ps.setString(++_dirtyCount, pObject.getReceiver());
            }
    
            if (pObject.isResearcherInitialized()) {
                ps.setString(++_dirtyCount, pObject.getResearcher());
            }
    
            if (pObject.isPersonalsInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPersonals());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            if (pObject.isParentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
            }
    
            if (pObject.isResponsibleidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
            }
    
            if (pObject.isSendreasonInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSendreason());
            }
    
            if (pObject.isSendconditionInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSendcondition());
            }
    
            if (pObject.isGetdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
            }
    
            if (pObject.isGetbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
            }
    
            if (pObject.isFromlocationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
            }
    
            if (pObject.isTransitactidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table transitsampleitem.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table transitsampleitem with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from transitsampleitem " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table transitsampleitem with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific TransitsampleitemBean pObject given a c
     *
     * @param pObject the TransitsampleitemBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(TransitsampleitemBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from transitsampleitem WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isTransitsampleitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitsampleitemid= ?");
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
                }
    
                if (pObject.isLocationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("locationid= ?");
                }
    
                if (pObject.isOutsideModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("outside= ?");
                }
    
                if (pObject.isTransitdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitdate= ?");
                }
    
                if (pObject.isTransittimeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transittime= ?");
                }
    
                if (pObject.isContainerModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("container= ?");
                }
    
                if (pObject.isReceiverModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("receiver= ?");
                }
    
                if (pObject.isResearcherModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("researcher= ?");
                }
    
                if (pObject.isPersonalsModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("personals= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (pObject.isParentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
                }
    
                if (pObject.isResponsibleidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("responsibleid= ?");
                }
    
                if (pObject.isSendreasonModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendreason= ?");
                }
    
                if (pObject.isSendconditionModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendcondition= ?");
                }
    
                if (pObject.isGetdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getdate= ?");
                }
    
                if (pObject.isGetbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getbyid= ?");
                }
    
                if (pObject.isFromlocationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fromlocationid= ?");
                }
    
                if (pObject.isTransitactidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitactid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isTransitsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTransitsampleitemid());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isLocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLocationid());
                }
    
                if (pObject.isOutsideModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getOutside());
                }
    
                if (pObject.isTransitdateModified()) {
                    if (pObject.getTransitdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getTransitdate().getTime()));
                }
    
                if (pObject.isTransittimeModified()) {
                    if (pObject.getTransittime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getTransittime().getTime()));
                }
    
                if (pObject.isContainerModified()) {
                    ps.setString(++_dirtyCount, pObject.getContainer());
                }
    
                if (pObject.isReceiverModified()) {
                    ps.setString(++_dirtyCount, pObject.getReceiver());
                }
    
                if (pObject.isResearcherModified()) {
                    ps.setString(++_dirtyCount, pObject.getResearcher());
                }
    
                if (pObject.isPersonalsModified()) {
                    ps.setString(++_dirtyCount, pObject.getPersonals());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isResponsibleidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
                }
    
                if (pObject.isSendreasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendreason());
                }
    
                if (pObject.isSendconditionModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendcondition());
                }
    
                if (pObject.isGetdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
                }
    
                if (pObject.isGetbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
                }
    
                if (pObject.isFromlocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
                }
    
                if (pObject.isTransitactidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the transitsampleitem on a TransitsampleitemBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting TransitsampleitemBean pObject
     */
    //72
    public TransitsampleitemBean decodeRow(ResultSet rs) throws SQLException
    {
        TransitsampleitemBean pObject = createTransitsampleitemBean();
        pObject.setTransitsampleitemid(Manager.getLong(rs, 1));
        pObject.setContractsampleitemid(Manager.getLong(rs, 2));
        pObject.setLocationid(Manager.getInteger(rs, 3));
        pObject.setOutside(Manager.getBoolean(rs, 4));
        pObject.setTransitdate(rs.getDate(5));
        pObject.setTransittime(rs.getTime(6));
        pObject.setContainer(rs.getString(7));
        pObject.setReceiver(rs.getString(8));
        pObject.setResearcher(rs.getString(9));
        pObject.setPersonals(rs.getString(10));
        pObject.setRegbyid(Manager.getInteger(rs, 11));
        pObject.setRegdate(rs.getTimestamp(12));
        pObject.setStatus(Manager.getInteger(rs, 13));
        pObject.setParentid(Manager.getLong(rs, 14));
        pObject.setResponsibleid(Manager.getInteger(rs, 15));
        pObject.setSendreason(rs.getString(16));
        pObject.setSendcondition(rs.getString(17));
        pObject.setGetdate(rs.getTimestamp(18));
        pObject.setGetbyid(Manager.getInteger(rs, 19));
        pObject.setFromlocationid(Manager.getInteger(rs, 20));
        pObject.setTransitactid(Manager.getLong(rs, 21));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the transitsampleitem table on a TransitsampleitemBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting TransitsampleitemBean pObject
     */
    //73
    public TransitsampleitemBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        TransitsampleitemBean pObject = createTransitsampleitemBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_TRANSITSAMPLEITEMID:
                    ++pos;
                    pObject.setTransitsampleitemid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTSAMPLEITEMID:
                    ++pos;
                    pObject.setContractsampleitemid(Manager.getLong(rs, pos));
                    break;
                case ID_LOCATIONID:
                    ++pos;
                    pObject.setLocationid(Manager.getInteger(rs, pos));
                    break;
                case ID_OUTSIDE:
                    ++pos;
                    pObject.setOutside(Manager.getBoolean(rs, pos));
                    break;
                case ID_TRANSITDATE:
                    ++pos;
                    pObject.setTransitdate(rs.getDate(pos));
                    break;
                case ID_TRANSITTIME:
                    ++pos;
                    pObject.setTransittime(rs.getTime(pos));
                    break;
                case ID_CONTAINER:
                    ++pos;
                    pObject.setContainer(rs.getString(pos));
                    break;
                case ID_RECEIVER:
                    ++pos;
                    pObject.setReceiver(rs.getString(pos));
                    break;
                case ID_RESEARCHER:
                    ++pos;
                    pObject.setResearcher(rs.getString(pos));
                    break;
                case ID_PERSONALS:
                    ++pos;
                    pObject.setPersonals(rs.getString(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
                case ID_PARENTID:
                    ++pos;
                    pObject.setParentid(Manager.getLong(rs, pos));
                    break;
                case ID_RESPONSIBLEID:
                    ++pos;
                    pObject.setResponsibleid(Manager.getInteger(rs, pos));
                    break;
                case ID_SENDREASON:
                    ++pos;
                    pObject.setSendreason(rs.getString(pos));
                    break;
                case ID_SENDCONDITION:
                    ++pos;
                    pObject.setSendcondition(rs.getString(pos));
                    break;
                case ID_GETDATE:
                    ++pos;
                    pObject.setGetdate(rs.getTimestamp(pos));
                    break;
                case ID_GETBYID:
                    ++pos;
                    pObject.setGetbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_FROMLOCATIONID:
                    ++pos;
                    pObject.setFromlocationid(Manager.getInteger(rs, pos));
                    break;
                case ID_TRANSITACTID:
                    ++pos;
                    pObject.setTransitactid(Manager.getLong(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TransitsampleitemBean 
     */
    //41
    public TransitsampleitemBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TransitsampleitemBean 
     */
    public TransitsampleitemBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (TransitsampleitemBean[])v.toArray(new TransitsampleitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private TransitsampleitemListener listener = null;

    /**
     * Registers a unique TransitsampleitemListener listener.
     */
    //66.5
    public void registerListener(TransitsampleitemListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the TransitsampleitemBean pObject.
     *
     * @param pObject the TransitsampleitemBean pObject to be saved
     */
    //67
    void beforeInsert(TransitsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the TransitsampleitemBean pObject.
     *
     * @param pObject the TransitsampleitemBean pObject to be saved
     */
    //68
    void afterInsert(TransitsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the TransitsampleitemBean pObject.
     *
     * @param pObject the TransitsampleitemBean pObject to be updated
     */
    //69
    void beforeUpdate(TransitsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the TransitsampleitemBean pObject.
     *
     * @param pObject the TransitsampleitemBean pObject to be updated
     */
    //70
    void afterUpdate(TransitsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
