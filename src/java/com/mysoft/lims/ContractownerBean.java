// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ContractownerBean
// extends+ 

// extends- 
{
    private Long contractownerid;
    private boolean contractownerid_is_modified = false;
    private boolean contractownerid_is_initialized = false;
    
    private Integer companyid;
    private boolean companyid_is_modified = false;
    private boolean companyid_is_initialized = false;
    
    private String fname;
    private boolean fname_is_modified = false;
    private boolean fname_is_initialized = false;
    
    private String lname;
    private boolean lname_is_modified = false;
    private boolean lname_is_initialized = false;
    
    private String idn;
    private boolean idn_is_modified = false;
    private boolean idn_is_initialized = false;
    
    private Integer regionid;
    private boolean regionid_is_modified = false;
    private boolean regionid_is_initialized = false;
    
    private Integer raionid;
    private boolean raionid_is_modified = false;
    private boolean raionid_is_initialized = false;
    
    private Integer villageid;
    private boolean villageid_is_modified = false;
    private boolean villageid_is_initialized = false;
    
    private String address;
    private boolean address_is_modified = false;
    private boolean address_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ContractownerBean()
    {
    }
    
    /**
     * Getter method for contractownerid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.contractownerid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractownerid
     */
    public Long getContractownerid()
    {
        return contractownerid; 
    }

    /**
     * Setter method for contractownerid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractownerid
     */
    public void setContractownerid(Long newVal) {
        if ((newVal != null && this.contractownerid != null && (newVal.compareTo(this.contractownerid) == 0)) || 
            (newVal == null && this.contractownerid == null && contractownerid_is_initialized)) {
            return; 
        } 
        this.contractownerid = newVal; 
        contractownerid_is_modified = true; 
        contractownerid_is_initialized = true; 
    }

    /**
     * Setter method for contractownerid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractownerid
     */
    public void setContractownerid(long newVal) {
        setContractownerid(new Long(newVal));
    }

    /**
     * Determines if the contractownerid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractowneridModified() {
        return contractownerid_is_modified; 
    }

    /**
     * Determines if the contractownerid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractowneridInitialized() {
        return contractownerid_is_initialized; 
    }

    /**
     * Getter method for companyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.companyid
     * <li> foreign key: company.companyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of companyid
     */
    public Integer getCompanyid()
    {
        return companyid; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(Integer newVal) {
        if ((newVal != null && this.companyid != null && (newVal.compareTo(this.companyid) == 0)) || 
            (newVal == null && this.companyid == null && companyid_is_initialized)) {
            return; 
        } 
        this.companyid = newVal; 
        companyid_is_modified = true; 
        companyid_is_initialized = true; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(int newVal) {
        setCompanyid(new Integer(newVal));
    }

    /**
     * Determines if the companyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyidModified() {
        return companyid_is_modified; 
    }

    /**
     * Determines if the companyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyidInitialized() {
        return companyid_is_initialized; 
    }

    /**
     * Getter method for fname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.fname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of fname
     */
    public String getFname()
    {
        return fname; 
    }

    /**
     * Setter method for fname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fname
     */
    public void setFname(String newVal) {
        if ((newVal != null && this.fname != null && (newVal.compareTo(this.fname) == 0)) || 
            (newVal == null && this.fname == null && fname_is_initialized)) {
            return; 
        } 
        this.fname = newVal; 
        fname_is_modified = true; 
        fname_is_initialized = true; 
    }

    /**
     * Determines if the fname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFnameModified() {
        return fname_is_modified; 
    }

    /**
     * Determines if the fname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFnameInitialized() {
        return fname_is_initialized; 
    }

    /**
     * Getter method for lname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.lname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of lname
     */
    public String getLname()
    {
        return lname; 
    }

    /**
     * Setter method for lname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lname
     */
    public void setLname(String newVal) {
        if ((newVal != null && this.lname != null && (newVal.compareTo(this.lname) == 0)) || 
            (newVal == null && this.lname == null && lname_is_initialized)) {
            return; 
        } 
        this.lname = newVal; 
        lname_is_modified = true; 
        lname_is_initialized = true; 
    }

    /**
     * Determines if the lname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLnameModified() {
        return lname_is_modified; 
    }

    /**
     * Determines if the lname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLnameInitialized() {
        return lname_is_initialized; 
    }

    /**
     * Getter method for idn.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.idn
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of idn
     */
    public String getIdn()
    {
        return idn; 
    }

    /**
     * Setter method for idn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to idn
     */
    public void setIdn(String newVal) {
        if ((newVal != null && this.idn != null && (newVal.compareTo(this.idn) == 0)) || 
            (newVal == null && this.idn == null && idn_is_initialized)) {
            return; 
        } 
        this.idn = newVal; 
        idn_is_modified = true; 
        idn_is_initialized = true; 
    }

    /**
     * Determines if the idn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIdnModified() {
        return idn_is_modified; 
    }

    /**
     * Determines if the idn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIdnInitialized() {
        return idn_is_initialized; 
    }

    /**
     * Getter method for regionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.regionid
     * <li> foreign key: tunit.tunitid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regionid
     */
    public Integer getRegionid()
    {
        return regionid; 
    }

    /**
     * Setter method for regionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regionid
     */
    public void setRegionid(Integer newVal) {
        if ((newVal != null && this.regionid != null && (newVal.compareTo(this.regionid) == 0)) || 
            (newVal == null && this.regionid == null && regionid_is_initialized)) {
            return; 
        } 
        this.regionid = newVal; 
        regionid_is_modified = true; 
        regionid_is_initialized = true; 
    }

    /**
     * Setter method for regionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regionid
     */
    public void setRegionid(int newVal) {
        setRegionid(new Integer(newVal));
    }

    /**
     * Determines if the regionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegionidModified() {
        return regionid_is_modified; 
    }

    /**
     * Determines if the regionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegionidInitialized() {
        return regionid_is_initialized; 
    }

    /**
     * Getter method for raionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.raionid
     * <li> foreign key: tunit.tunitid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of raionid
     */
    public Integer getRaionid()
    {
        return raionid; 
    }

    /**
     * Setter method for raionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to raionid
     */
    public void setRaionid(Integer newVal) {
        if ((newVal != null && this.raionid != null && (newVal.compareTo(this.raionid) == 0)) || 
            (newVal == null && this.raionid == null && raionid_is_initialized)) {
            return; 
        } 
        this.raionid = newVal; 
        raionid_is_modified = true; 
        raionid_is_initialized = true; 
    }

    /**
     * Setter method for raionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to raionid
     */
    public void setRaionid(int newVal) {
        setRaionid(new Integer(newVal));
    }

    /**
     * Determines if the raionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRaionidModified() {
        return raionid_is_modified; 
    }

    /**
     * Determines if the raionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRaionidInitialized() {
        return raionid_is_initialized; 
    }

    /**
     * Getter method for villageid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.villageid
     * <li> foreign key: tunit.tunitid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of villageid
     */
    public Integer getVillageid()
    {
        return villageid; 
    }

    /**
     * Setter method for villageid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to villageid
     */
    public void setVillageid(Integer newVal) {
        if ((newVal != null && this.villageid != null && (newVal.compareTo(this.villageid) == 0)) || 
            (newVal == null && this.villageid == null && villageid_is_initialized)) {
            return; 
        } 
        this.villageid = newVal; 
        villageid_is_modified = true; 
        villageid_is_initialized = true; 
    }

    /**
     * Setter method for villageid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to villageid
     */
    public void setVillageid(int newVal) {
        setVillageid(new Integer(newVal));
    }

    /**
     * Determines if the villageid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVillageidModified() {
        return villageid_is_modified; 
    }

    /**
     * Determines if the villageid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVillageidInitialized() {
        return villageid_is_initialized; 
    }

    /**
     * Getter method for address.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.address
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of address
     */
    public String getAddress()
    {
        return address; 
    }

    /**
     * Setter method for address.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to address
     */
    public void setAddress(String newVal) {
        if ((newVal != null && this.address != null && (newVal.compareTo(this.address) == 0)) || 
            (newVal == null && this.address == null && address_is_initialized)) {
            return; 
        } 
        this.address = newVal; 
        address_is_modified = true; 
        address_is_initialized = true; 
    }

    /**
     * Determines if the address has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAddressModified() {
        return address_is_modified; 
    }

    /**
     * Determines if the address has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAddressInitialized() {
        return address_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractowner.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return contractownerid_is_modified || 
		companyid_is_modified || 
		fname_is_modified || 
		lname_is_modified || 
		idn_is_modified || 
		regionid_is_modified || 
		raionid_is_modified || 
		villageid_is_modified || 
		address_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		deleted_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        contractownerid_is_modified = false;
        companyid_is_modified = false;
        fname_is_modified = false;
        lname_is_modified = false;
        idn_is_modified = false;
        regionid_is_modified = false;
        raionid_is_modified = false;
        villageid_is_modified = false;
        address_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        deleted_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContractownerBean bean) {
        setContractownerid(bean.getContractownerid());
        setCompanyid(bean.getCompanyid());
        setFname(bean.getFname());
        setLname(bean.getLname());
        setIdn(bean.getIdn());
        setRegionid(bean.getRegionid());
        setRaionid(bean.getRaionid());
        setVillageid(bean.getVillageid());
        setAddress(bean.getAddress());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDeleted(bean.getDeleted());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[contractowner] "
                 + "\n - contractowner.contractownerid = " + (contractownerid_is_initialized ? ("[" + (contractownerid == null ? null : contractownerid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.companyid = " + (companyid_is_initialized ? ("[" + (companyid == null ? null : companyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.fname = " + (fname_is_initialized ? ("[" + (fname == null ? null : fname.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.lname = " + (lname_is_initialized ? ("[" + (lname == null ? null : lname.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.idn = " + (idn_is_initialized ? ("[" + (idn == null ? null : idn.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.regionid = " + (regionid_is_initialized ? ("[" + (regionid == null ? null : regionid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.raionid = " + (raionid_is_initialized ? ("[" + (raionid == null ? null : raionid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.villageid = " + (villageid_is_initialized ? ("[" + (villageid == null ? null : villageid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.address = " + (address_is_initialized ? ("[" + (address == null ? null : address.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - contractowner.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
