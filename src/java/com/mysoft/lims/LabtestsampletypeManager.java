// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the labtestsampletype table.
 */
public class LabtestsampletypeManager
// extends+ 

// extends- 
{

    /**
     * Column labtestid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LABTESTID = 0;
    public static final int TYPE_LABTESTID = Types.INTEGER;
    public static final String NAME_LABTESTID = "labtestid";

    /**
     * Column sampletypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SAMPLETYPEID = 1;
    public static final int TYPE_SAMPLETYPEID = Types.INTEGER;
    public static final String NAME_SAMPLETYPEID = "sampletypeid";


    private static final String TABLE_NAME = "labtestsampletype";

    /**
     * Create an array of type string containing all the fields of the labtestsampletype table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "labtestsampletype.labtestid"
        ,"labtestsampletype.sampletypeid"
    };

    /**
     * Field that contains the comma separated fields of the labtestsampletype table.
     */
    private static final String ALL_FIELDS = "labtestsampletype.labtestid"
                            + ",labtestsampletype.sampletypeid";

    private static LabtestsampletypeManager singleton = new LabtestsampletypeManager();

    /**
     * Get the LabtestsampletypeManager singleton.
     *
     * @return LabtestsampletypeManager 
     */
    synchronized public static LabtestsampletypeManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own LabtestsampletypeManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(LabtestsampletypeManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new LabtestsampletypeBean instance.
     *
     * @return the new LabtestsampletypeBean 
     */
    public LabtestsampletypeBean createLabtestsampletypeBean()
    {
        return new LabtestsampletypeBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a LabtestsampletypeBean from the labtestsampletype using its key fields.
     *
     * @return a unique LabtestsampletypeBean 
     */
    //12
    public LabtestsampletypeBean loadByPrimaryKey(Integer labtestid, Integer sampletypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtestsampletype WHERE labtestsampletype.labtestid=? and labtestsampletype.sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, labtestid);
            Manager.setInteger(ps, 2, sampletypeid);
            LabtestsampletypeBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer labtestid, Integer sampletypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from labtestsampletype WHERE labtestsampletype.labtestid=? and labtestsampletype.sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, labtestid);
            Manager.setInteger(ps, 2, sampletypeid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads LabtestsampletypeBean array from the labtestsampletype table using its labtestid field.
     *
     * @return an array of LabtestsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public LabtestsampletypeBean[] loadByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtestsampletype WHERE labtestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the labtestsampletype table by labtestid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM labtestsampletype WHERE labtestid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads LabtestsampletypeBean array from the labtestsampletype table using its sampletypeid field.
     *
     * @return an array of LabtestsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public LabtestsampletypeBean[] loadBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtestsampletype WHERE sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the labtestsampletype table by sampletypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM labtestsampletype WHERE sampletypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the LabtestBean object from the labtestsampletype.labtestid field.
     *
     * @param pObject the LabtestsampletypeBean 
     * @return the associated LabtestBean pObject
     */
    // GET IMPORTED
    public LabtestBean getLabtestBean(LabtestsampletypeBean pObject) throws SQLException
    {
        LabtestBean other = LabtestManager.getInstance().createLabtestBean();
        other.setLabtestid(pObject.getLabtestid());
        return LabtestManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the LabtestsampletypeBean object to the LabtestBean object.
     *
     * @param pObject the LabtestsampletypeBean object to use
     * @param pObjectToBeSet the LabtestBean object to associate to the LabtestsampletypeBean 
     * @return the associated LabtestBean pObject
     */
    // SET IMPORTED
    public LabtestsampletypeBean setLabtestBean(LabtestsampletypeBean pObject,LabtestBean pObjectToBeSet)
    {
        pObject.setLabtestid(pObjectToBeSet.getLabtestid());
        return pObject;
    }

    /**
     * Retrieves the SampletypeBean object from the labtestsampletype.sampletypeid field.
     *
     * @param pObject the LabtestsampletypeBean 
     * @return the associated SampletypeBean pObject
     */
    // GET IMPORTED
    public SampletypeBean getSampletypeBean(LabtestsampletypeBean pObject) throws SQLException
    {
        SampletypeBean other = SampletypeManager.getInstance().createSampletypeBean();
        other.setSampletypeid(pObject.getSampletypeid());
        return SampletypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the LabtestsampletypeBean object to the SampletypeBean object.
     *
     * @param pObject the LabtestsampletypeBean object to use
     * @param pObjectToBeSet the SampletypeBean object to associate to the LabtestsampletypeBean 
     * @return the associated SampletypeBean pObject
     */
    // SET IMPORTED
    public LabtestsampletypeBean setSampletypeBean(LabtestsampletypeBean pObject,SampletypeBean pObjectToBeSet)
    {
        pObject.setSampletypeid(pObjectToBeSet.getSampletypeid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from labtestsampletype.
     *
     * @return an array of LabtestsampletypeManager pObject
     */
    //38
    public LabtestsampletypeBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtestsampletype",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of LabtestsampletypeBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting LabtestsampletypeBean table 
     */
    //49
    public LabtestsampletypeBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of LabtestsampletypeBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting LabtestsampletypeBean table 
     */
    //51
    public LabtestsampletypeBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from labtestsampletype " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from labtestsampletype ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (LabtestsampletypeBean[])v.toArray(new LabtestsampletypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from labtestsampletype table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the labtestsampletype table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM labtestsampletype " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the LabtestsampletypeBean pObject into the database.
     *
     * @param pObject the LabtestsampletypeBean pObject to be saved
     */
    //100
    public LabtestsampletypeBean save(LabtestsampletypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into labtestsampletype (");
    
                if (pObject.isLabtestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestid");
                    _dirtyCount++;
                }

                if (pObject.isSampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampletypeid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE labtestsampletype SET ");
                boolean useComma=false;

                if (pObject.isLabtestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestid").append("=?");
                }

                if (pObject.isSampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampletypeid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("labtestsampletype.labtestid=? AND labtestsampletype.sampletypeid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isLabtestidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }

                if (pObject.isSampletypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of LabtestsampletypeBean pObjects into the database.
     *
     * @param pObjects the LabtestsampletypeBean pObject table to be saved
     * @return the saved LabtestsampletypeBean array.
     */
    //65
    public LabtestsampletypeBean[] save(LabtestsampletypeBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique LabtestsampletypeBean pObject from a template one giving a c
     *
     * @param pObject the LabtestsampletypeBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public LabtestsampletypeBean loadUniqueUsingTemplate(LabtestsampletypeBean pObject) throws SQLException
    {
         LabtestsampletypeBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of LabtestsampletypeBean from a template one.
     *
     * @param pObject the LabtestsampletypeBean template to look for
     * @return all the LabtestsampletypeBean matching the template
     */
    //88
    public LabtestsampletypeBean[] loadUsingTemplate(LabtestsampletypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from labtestsampletype WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isLabtestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
             }
    
             if (pObject.isSampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isLabtestidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
             }
    
             if (pObject.isSampletypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a LabtestsampletypeBean template.
     *
     * @param pObject the LabtestsampletypeBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(LabtestsampletypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM labtestsampletype WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isLabtestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isLabtestidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
            }
    
            if (pObject.isSampletypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table labtestsampletype.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table labtestsampletype with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from labtestsampletype " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table labtestsampletype with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific LabtestsampletypeBean pObject given a c
     *
     * @param pObject the LabtestsampletypeBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(LabtestsampletypeBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from labtestsampletype WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isLabtestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
                }
    
                if (pObject.isSampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the labtestsampletype on a LabtestsampletypeBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting LabtestsampletypeBean pObject
     */
    //72
    public LabtestsampletypeBean decodeRow(ResultSet rs) throws SQLException
    {
        LabtestsampletypeBean pObject = createLabtestsampletypeBean();
        pObject.setLabtestid(Manager.getInteger(rs, 1));
        pObject.setSampletypeid(Manager.getInteger(rs, 2));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the labtestsampletype table on a LabtestsampletypeBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting LabtestsampletypeBean pObject
     */
    //73
    public LabtestsampletypeBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        LabtestsampletypeBean pObject = createLabtestsampletypeBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_LABTESTID:
                    ++pos;
                    pObject.setLabtestid(Manager.getInteger(rs, pos));
                    break;
                case ID_SAMPLETYPEID:
                    ++pos;
                    pObject.setSampletypeid(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of LabtestsampletypeBean 
     */
    //41
    public LabtestsampletypeBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of LabtestsampletypeBean 
     */
    public LabtestsampletypeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (LabtestsampletypeBean[])v.toArray(new LabtestsampletypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private LabtestsampletypeListener listener = null;

    /**
     * Registers a unique LabtestsampletypeListener listener.
     */
    //66.5
    public void registerListener(LabtestsampletypeListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the LabtestsampletypeBean pObject.
     *
     * @param pObject the LabtestsampletypeBean pObject to be saved
     */
    //67
    void beforeInsert(LabtestsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the LabtestsampletypeBean pObject.
     *
     * @param pObject the LabtestsampletypeBean pObject to be saved
     */
    //68
    void afterInsert(LabtestsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the LabtestsampletypeBean pObject.
     *
     * @param pObject the LabtestsampletypeBean pObject to be updated
     */
    //69
    void beforeUpdate(LabtestsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the LabtestsampletypeBean pObject.
     *
     * @param pObject the LabtestsampletypeBean pObject to be updated
     */
    //70
    void afterUpdate(LabtestsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
