// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the InventoryitemBean objects.
 */
public class InventoryitemComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for InventoryitemComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new InventoryitemComparator(InventoryitemManager.INVENTORYITEMID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>InventoryitemManager.ID_INVENTORYITEMID
     *   <li>InventoryitemManager.ID_INVENTORYID
     *   <li>InventoryitemManager.ID_PRODUCTID
     *   <li>InventoryitemManager.ID_AMOUNT
     *   <li>InventoryitemManager.ID_PRICE
     *   <li>InventoryitemManager.ID_NOTE
     *   <li>InventoryitemManager.ID_ROOMNUMBER
     *   <li>InventoryitemManager.ID_RESPONSIBLEID
     *   <li>InventoryitemManager.ID_REALAMOUNT
     *   <li>InventoryitemManager.ID_OWNERID
     *   <li>InventoryitemManager.ID_LOCATION
     *   <li>InventoryitemManager.ID_MOVEINVENTORYITEMID
     * </ul>
     */
    public InventoryitemComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for InventoryitemComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new InventoryitemComparator(InventoryitemManager.INVENTORYITEMID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>InventoryitemManager.ID_INVENTORYITEMID
     *   <li>InventoryitemManager.ID_INVENTORYID
     *   <li>InventoryitemManager.ID_PRODUCTID
     *   <li>InventoryitemManager.ID_AMOUNT
     *   <li>InventoryitemManager.ID_PRICE
     *   <li>InventoryitemManager.ID_NOTE
     *   <li>InventoryitemManager.ID_ROOMNUMBER
     *   <li>InventoryitemManager.ID_RESPONSIBLEID
     *   <li>InventoryitemManager.ID_REALAMOUNT
     *   <li>InventoryitemManager.ID_OWNERID
     *   <li>InventoryitemManager.ID_LOCATION
     *   <li>InventoryitemManager.ID_MOVEINVENTORYITEMID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public InventoryitemComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        InventoryitemBean b1 = (InventoryitemBean)pObj1;
        InventoryitemBean b2 = (InventoryitemBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case InventoryitemManager.ID_INVENTORYITEMID:
                if (b1.getInventoryitemid() == null && b2.getInventoryitemid() != null) {
                    iReturn = -1;
                } else if (b1.getInventoryitemid() == null && b2.getInventoryitemid() == null) {
                    iReturn = 0;
                } else if (b1.getInventoryitemid() != null && b2.getInventoryitemid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInventoryitemid().compareTo(b2.getInventoryitemid());
                }
                break;
            case InventoryitemManager.ID_INVENTORYID:
                if (b1.getInventoryid() == null && b2.getInventoryid() != null) {
                    iReturn = -1;
                } else if (b1.getInventoryid() == null && b2.getInventoryid() == null) {
                    iReturn = 0;
                } else if (b1.getInventoryid() != null && b2.getInventoryid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInventoryid().compareTo(b2.getInventoryid());
                }
                break;
            case InventoryitemManager.ID_PRODUCTID:
                if (b1.getProductid() == null && b2.getProductid() != null) {
                    iReturn = -1;
                } else if (b1.getProductid() == null && b2.getProductid() == null) {
                    iReturn = 0;
                } else if (b1.getProductid() != null && b2.getProductid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getProductid().compareTo(b2.getProductid());
                }
                break;
            case InventoryitemManager.ID_AMOUNT:
                if (b1.getAmount() == null && b2.getAmount() != null) {
                    iReturn = -1;
                } else if (b1.getAmount() == null && b2.getAmount() == null) {
                    iReturn = 0;
                } else if (b1.getAmount() != null && b2.getAmount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAmount().compareTo(b2.getAmount());
                }
                break;
            case InventoryitemManager.ID_PRICE:
                if (b1.getPrice() == null && b2.getPrice() != null) {
                    iReturn = -1;
                } else if (b1.getPrice() == null && b2.getPrice() == null) {
                    iReturn = 0;
                } else if (b1.getPrice() != null && b2.getPrice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPrice().compareTo(b2.getPrice());
                }
                break;
            case InventoryitemManager.ID_NOTE:
                if (b1.getNote() == null && b2.getNote() != null) {
                    iReturn = -1;
                } else if (b1.getNote() == null && b2.getNote() == null) {
                    iReturn = 0;
                } else if (b1.getNote() != null && b2.getNote() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getNote().compareTo(b2.getNote());
                }
                break;
            case InventoryitemManager.ID_ROOMNUMBER:
                if (b1.getRoomnumber() == null && b2.getRoomnumber() != null) {
                    iReturn = -1;
                } else if (b1.getRoomnumber() == null && b2.getRoomnumber() == null) {
                    iReturn = 0;
                } else if (b1.getRoomnumber() != null && b2.getRoomnumber() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRoomnumber().compareTo(b2.getRoomnumber());
                }
                break;
            case InventoryitemManager.ID_RESPONSIBLEID:
                if (b1.getResponsibleid() == null && b2.getResponsibleid() != null) {
                    iReturn = -1;
                } else if (b1.getResponsibleid() == null && b2.getResponsibleid() == null) {
                    iReturn = 0;
                } else if (b1.getResponsibleid() != null && b2.getResponsibleid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getResponsibleid().compareTo(b2.getResponsibleid());
                }
                break;
            case InventoryitemManager.ID_REALAMOUNT:
                if (b1.getRealamount() == null && b2.getRealamount() != null) {
                    iReturn = -1;
                } else if (b1.getRealamount() == null && b2.getRealamount() == null) {
                    iReturn = 0;
                } else if (b1.getRealamount() != null && b2.getRealamount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRealamount().compareTo(b2.getRealamount());
                }
                break;
            case InventoryitemManager.ID_OWNERID:
                if (b1.getOwnerid() == null && b2.getOwnerid() != null) {
                    iReturn = -1;
                } else if (b1.getOwnerid() == null && b2.getOwnerid() == null) {
                    iReturn = 0;
                } else if (b1.getOwnerid() != null && b2.getOwnerid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getOwnerid().compareTo(b2.getOwnerid());
                }
                break;
            case InventoryitemManager.ID_LOCATION:
                if (b1.getLocation() == null && b2.getLocation() != null) {
                    iReturn = -1;
                } else if (b1.getLocation() == null && b2.getLocation() == null) {
                    iReturn = 0;
                } else if (b1.getLocation() != null && b2.getLocation() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLocation().compareTo(b2.getLocation());
                }
                break;
            case InventoryitemManager.ID_MOVEINVENTORYITEMID:
                if (b1.getMoveinventoryitemid() == null && b2.getMoveinventoryitemid() != null) {
                    iReturn = -1;
                } else if (b1.getMoveinventoryitemid() == null && b2.getMoveinventoryitemid() == null) {
                    iReturn = 0;
                } else if (b1.getMoveinventoryitemid() != null && b2.getMoveinventoryitemid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getMoveinventoryitemid().compareTo(b2.getMoveinventoryitemid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
