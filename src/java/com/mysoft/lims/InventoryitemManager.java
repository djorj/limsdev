// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the inventoryitem table.
 */
public class InventoryitemManager
// extends+ 

// extends- 
{

    /**
     * Column inventoryitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_INVENTORYITEMID = 0;
    public static final int TYPE_INVENTORYITEMID = Types.BIGINT;
    public static final String NAME_INVENTORYITEMID = "inventoryitemid";

    /**
     * Column inventoryid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INVENTORYID = 1;
    public static final int TYPE_INVENTORYID = Types.INTEGER;
    public static final String NAME_INVENTORYID = "inventoryid";

    /**
     * Column productid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PRODUCTID = 2;
    public static final int TYPE_PRODUCTID = Types.BIGINT;
    public static final String NAME_PRODUCTID = "productid";

    /**
     * Column amount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_AMOUNT = 3;
    public static final int TYPE_AMOUNT = Types.DOUBLE;
    public static final String NAME_AMOUNT = "amount";

    /**
     * Column price of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_PRICE = 4;
    public static final int TYPE_PRICE = Types.DOUBLE;
    public static final String NAME_PRICE = "price";

    /**
     * Column note of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NOTE = 5;
    public static final int TYPE_NOTE = Types.VARCHAR;
    public static final String NAME_NOTE = "note";

    /**
     * Column roomnumber of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ROOMNUMBER = 6;
    public static final int TYPE_ROOMNUMBER = Types.VARCHAR;
    public static final String NAME_ROOMNUMBER = "roomnumber";

    /**
     * Column responsibleid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RESPONSIBLEID = 7;
    public static final int TYPE_RESPONSIBLEID = Types.INTEGER;
    public static final String NAME_RESPONSIBLEID = "responsibleid";

    /**
     * Column realamount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_REALAMOUNT = 8;
    public static final int TYPE_REALAMOUNT = Types.DOUBLE;
    public static final String NAME_REALAMOUNT = "realamount";

    /**
     * Column ownerid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_OWNERID = 9;
    public static final int TYPE_OWNERID = Types.INTEGER;
    public static final String NAME_OWNERID = "ownerid";

    /**
     * Column location of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LOCATION = 10;
    public static final int TYPE_LOCATION = Types.VARCHAR;
    public static final String NAME_LOCATION = "location";

    /**
     * Column moveinventoryitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_MOVEINVENTORYITEMID = 11;
    public static final int TYPE_MOVEINVENTORYITEMID = Types.BIGINT;
    public static final String NAME_MOVEINVENTORYITEMID = "moveinventoryitemid";


    private static final String TABLE_NAME = "inventoryitem";

    /**
     * Create an array of type string containing all the fields of the inventoryitem table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "inventoryitem.inventoryitemid"
        ,"inventoryitem.inventoryid"
        ,"inventoryitem.productid"
        ,"inventoryitem.amount"
        ,"inventoryitem.price"
        ,"inventoryitem.note"
        ,"inventoryitem.roomnumber"
        ,"inventoryitem.responsibleid"
        ,"inventoryitem.realamount"
        ,"inventoryitem.ownerid"
        ,"inventoryitem.location"
        ,"inventoryitem.moveinventoryitemid"
    };

    /**
     * Field that contains the comma separated fields of the inventoryitem table.
     */
    private static final String ALL_FIELDS = "inventoryitem.inventoryitemid"
                            + ",inventoryitem.inventoryid"
                            + ",inventoryitem.productid"
                            + ",inventoryitem.amount"
                            + ",inventoryitem.price"
                            + ",inventoryitem.note"
                            + ",inventoryitem.roomnumber"
                            + ",inventoryitem.responsibleid"
                            + ",inventoryitem.realamount"
                            + ",inventoryitem.ownerid"
                            + ",inventoryitem.location"
                            + ",inventoryitem.moveinventoryitemid";

    private static InventoryitemManager singleton = new InventoryitemManager();

    /**
     * Get the InventoryitemManager singleton.
     *
     * @return InventoryitemManager 
     */
    synchronized public static InventoryitemManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own InventoryitemManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(InventoryitemManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new InventoryitemBean instance.
     *
     * @return the new InventoryitemBean 
     */
    public InventoryitemBean createInventoryitemBean()
    {
        return new InventoryitemBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a InventoryitemBean from the inventoryitem using its key fields.
     *
     * @return a unique InventoryitemBean 
     */
    //12
    public InventoryitemBean loadByPrimaryKey(Long inventoryitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM inventoryitem WHERE inventoryitem.inventoryitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, inventoryitemid);
            InventoryitemBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long inventoryitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from inventoryitem WHERE inventoryitem.inventoryitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, inventoryitemid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads InventoryitemBean array from the inventoryitem table using its inventoryid field.
     *
     * @return an array of InventoryitemBean 
     */
    // LOAD BY IMPORTED KEY
    public InventoryitemBean[] loadByInventoryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM inventoryitem WHERE inventoryid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the inventoryitem table by inventoryid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByInventoryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM inventoryitem WHERE inventoryid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads InventoryitemBean array from the inventoryitem table using its moveinventoryitemid field.
     *
     * @return an array of InventoryitemBean 
     */
    // LOAD BY IMPORTED KEY
    public InventoryitemBean[] loadByMoveinventoryitemid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM inventoryitem WHERE moveinventoryitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the inventoryitem table by moveinventoryitemid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByMoveinventoryitemid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM inventoryitem WHERE moveinventoryitemid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads InventoryitemBean array from the inventoryitem table using its ownerid field.
     *
     * @return an array of InventoryitemBean 
     */
    // LOAD BY IMPORTED KEY
    public InventoryitemBean[] loadByOwnerid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM inventoryitem WHERE ownerid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the inventoryitem table by ownerid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByOwnerid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM inventoryitem WHERE ownerid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads InventoryitemBean array from the inventoryitem table using its responsibleid field.
     *
     * @return an array of InventoryitemBean 
     */
    // LOAD BY IMPORTED KEY
    public InventoryitemBean[] loadByResponsibleid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM inventoryitem WHERE responsibleid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the inventoryitem table by responsibleid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByResponsibleid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM inventoryitem WHERE responsibleid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads InventoryitemBean array from the inventoryitem table using its productid field.
     *
     * @return an array of InventoryitemBean 
     */
    // LOAD BY IMPORTED KEY
    public InventoryitemBean[] loadByProductid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM inventoryitem WHERE productid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the inventoryitem table by productid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByProductid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM inventoryitem WHERE productid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the InventoryBean object from the inventoryitem.inventoryid field.
     *
     * @param pObject the InventoryitemBean 
     * @return the associated InventoryBean pObject
     */
    // GET IMPORTED
    public InventoryBean getInventoryBean(InventoryitemBean pObject) throws SQLException
    {
        InventoryBean other = InventoryManager.getInstance().createInventoryBean();
        other.setInventoryid(pObject.getInventoryid());
        return InventoryManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the InventoryitemBean object to the InventoryBean object.
     *
     * @param pObject the InventoryitemBean object to use
     * @param pObjectToBeSet the InventoryBean object to associate to the InventoryitemBean 
     * @return the associated InventoryBean pObject
     */
    // SET IMPORTED
    public InventoryitemBean setInventoryBean(InventoryitemBean pObject,InventoryBean pObjectToBeSet)
    {
        pObject.setInventoryid(pObjectToBeSet.getInventoryid());
        return pObject;
    }

    /**
     * Retrieves the InventoryitemBean object from the inventoryitem.inventoryitemid field.
     *
     * @param pObject the InventoryitemBean 
     * @return the associated InventoryitemBean pObject
     */
    // GET IMPORTED
    public InventoryitemBean getInventoryitemBean(InventoryitemBean pObject) throws SQLException
    {
        InventoryitemBean other = InventoryitemManager.getInstance().createInventoryitemBean();
        other.setInventoryitemid(pObject.getMoveinventoryitemid());
        return InventoryitemManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the InventoryitemBean object to the InventoryitemBean object.
     *
     * @param pObject the InventoryitemBean object to use
     * @param pObjectToBeSet the InventoryitemBean object to associate to the InventoryitemBean 
     * @return the associated InventoryitemBean pObject
     */
    // SET IMPORTED
    public InventoryitemBean setInventoryitemBean(InventoryitemBean pObject,InventoryitemBean pObjectToBeSet)
    {
        pObject.setMoveinventoryitemid(pObjectToBeSet.getInventoryitemid());
        return pObject;
    }

    /**
     * Retrieves the PersonellBean object from the inventoryitem.personellid field.
     *
     * @param pObject the InventoryitemBean 
     * @return the associated PersonellBean pObject
     */
    // GET IMPORTED
    public PersonellBean getPersonellBean(InventoryitemBean pObject) throws SQLException
    {
        PersonellBean other = PersonellManager.getInstance().createPersonellBean();
        other.setPersonellid(pObject.getOwnerid());
        return PersonellManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the InventoryitemBean object to the PersonellBean object.
     *
     * @param pObject the InventoryitemBean object to use
     * @param pObjectToBeSet the PersonellBean object to associate to the InventoryitemBean 
     * @return the associated PersonellBean pObject
     */
    // SET IMPORTED
    public InventoryitemBean setPersonellBean(InventoryitemBean pObject,PersonellBean pObjectToBeSet)
    {
        pObject.setOwnerid(pObjectToBeSet.getPersonellid());
        return pObject;
    }

    /**
     * Retrieves the ProductBean object from the inventoryitem.productid field.
     *
     * @param pObject the InventoryitemBean 
     * @return the associated ProductBean pObject
     */
    // GET IMPORTED
    public ProductBean getProductBean(InventoryitemBean pObject) throws SQLException
    {
        ProductBean other = ProductManager.getInstance().createProductBean();
        other.setProductid(pObject.getProductid());
        return ProductManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the InventoryitemBean object to the ProductBean object.
     *
     * @param pObject the InventoryitemBean object to use
     * @param pObjectToBeSet the ProductBean object to associate to the InventoryitemBean 
     * @return the associated ProductBean pObject
     */
    // SET IMPORTED
    public InventoryitemBean setProductBean(InventoryitemBean pObject,ProductBean pObjectToBeSet)
    {
        pObject.setProductid(pObjectToBeSet.getProductid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from inventoryitem.
     *
     * @return an array of InventoryitemManager pObject
     */
    //38
    public InventoryitemBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM inventoryitem",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of InventoryitemBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting InventoryitemBean table 
     */
    //49
    public InventoryitemBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of InventoryitemBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting InventoryitemBean table 
     */
    //51
    public InventoryitemBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from inventoryitem " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from inventoryitem ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (InventoryitemBean[])v.toArray(new InventoryitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from inventoryitem table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the inventoryitem table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM inventoryitem " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the InventoryitemBean pObject into the database.
     *
     * @param pObject the InventoryitemBean pObject to be saved
     */
    //100
    public InventoryitemBean save(InventoryitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isInventoryitemidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('inventoryitemid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setInventoryitemid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into inventoryitem (");
    
                if (pObject.isInventoryitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("inventoryitemid");
                    _dirtyCount++;
                }

                if (pObject.isInventoryidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("inventoryid");
                    _dirtyCount++;
                }

                if (pObject.isProductidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("productid");
                    _dirtyCount++;
                }

                if (pObject.isAmountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amount");
                    _dirtyCount++;
                }

                if (pObject.isPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("price");
                    _dirtyCount++;
                }

                if (pObject.isNoteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("note");
                    _dirtyCount++;
                }

                if (pObject.isRoomnumberModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("roomnumber");
                    _dirtyCount++;
                }

                if (pObject.isResponsibleidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("responsibleid");
                    _dirtyCount++;
                }

                if (pObject.isRealamountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("realamount");
                    _dirtyCount++;
                }

                if (pObject.isOwneridModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ownerid");
                    _dirtyCount++;
                }

                if (pObject.isLocationModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("location");
                    _dirtyCount++;
                }

                if (pObject.isMoveinventoryitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("moveinventoryitemid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isInventoryitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getInventoryitemid());
                }
    
                if (pObject.isInventoryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
                }
    
                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isRoomnumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomnumber());
                }
    
                if (pObject.isResponsibleidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
                }
    
                if (pObject.isRealamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
                }
    
                if (pObject.isOwneridModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOwnerid());
                }
    
                if (pObject.isLocationModified()) {
                    ps.setString(++_dirtyCount, pObject.getLocation());
                }
    
                if (pObject.isMoveinventoryitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getMoveinventoryitemid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE inventoryitem SET ");
                boolean useComma=false;

                if (pObject.isInventoryitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("inventoryitemid").append("=?");
                }

                if (pObject.isInventoryidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("inventoryid").append("=?");
                }

                if (pObject.isProductidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("productid").append("=?");
                }

                if (pObject.isAmountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amount").append("=?");
                }

                if (pObject.isPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("price").append("=?");
                }

                if (pObject.isNoteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("note").append("=?");
                }

                if (pObject.isRoomnumberModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("roomnumber").append("=?");
                }

                if (pObject.isResponsibleidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("responsibleid").append("=?");
                }

                if (pObject.isRealamountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("realamount").append("=?");
                }

                if (pObject.isOwneridModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ownerid").append("=?");
                }

                if (pObject.isLocationModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("location").append("=?");
                }

                if (pObject.isMoveinventoryitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("moveinventoryitemid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("inventoryitem.inventoryitemid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isInventoryitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getInventoryitemid());
                }

                if (pObject.isInventoryidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
                }

                if (pObject.isProductidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }

                if (pObject.isAmountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }

                if (pObject.isPriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }

                if (pObject.isNoteModified()) {
                      ps.setString(++_dirtyCount, pObject.getNote());
                }

                if (pObject.isRoomnumberModified()) {
                      ps.setString(++_dirtyCount, pObject.getRoomnumber());
                }

                if (pObject.isResponsibleidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
                }

                if (pObject.isRealamountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
                }

                if (pObject.isOwneridModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getOwnerid());
                }

                if (pObject.isLocationModified()) {
                      ps.setString(++_dirtyCount, pObject.getLocation());
                }

                if (pObject.isMoveinventoryitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getMoveinventoryitemid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getInventoryitemid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of InventoryitemBean pObjects into the database.
     *
     * @param pObjects the InventoryitemBean pObject table to be saved
     * @return the saved InventoryitemBean array.
     */
    //65
    public InventoryitemBean[] save(InventoryitemBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique InventoryitemBean pObject from a template one giving a c
     *
     * @param pObject the InventoryitemBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public InventoryitemBean loadUniqueUsingTemplate(InventoryitemBean pObject) throws SQLException
    {
         InventoryitemBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of InventoryitemBean from a template one.
     *
     * @param pObject the InventoryitemBean template to look for
     * @return all the InventoryitemBean matching the template
     */
    //88
    public InventoryitemBean[] loadUsingTemplate(InventoryitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from inventoryitem WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isInventoryitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("inventoryitemid= ?");
             }
    
             if (pObject.isInventoryidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("inventoryid= ?");
             }
    
             if (pObject.isProductidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
             }
    
             if (pObject.isAmountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
             }
    
             if (pObject.isPriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
             }
    
             if (pObject.isNoteModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
             }
    
             if (pObject.isRoomnumberModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomnumber= ?");
             }
    
             if (pObject.isResponsibleidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("responsibleid= ?");
             }
    
             if (pObject.isRealamountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("realamount= ?");
             }
    
             if (pObject.isOwneridModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ownerid= ?");
             }
    
             if (pObject.isLocationModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("location= ?");
             }
    
             if (pObject.isMoveinventoryitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("moveinventoryitemid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isInventoryitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getInventoryitemid());
             }
    
             if (pObject.isInventoryidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
             }
    
             if (pObject.isProductidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
             }
    
             if (pObject.isAmountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
             }
    
             if (pObject.isPriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
             }
    
             if (pObject.isNoteModified()) {
                 ps.setString(++_dirtyCount, pObject.getNote());
             }
    
             if (pObject.isRoomnumberModified()) {
                 ps.setString(++_dirtyCount, pObject.getRoomnumber());
             }
    
             if (pObject.isResponsibleidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
             }
    
             if (pObject.isRealamountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
             }
    
             if (pObject.isOwneridModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getOwnerid());
             }
    
             if (pObject.isLocationModified()) {
                 ps.setString(++_dirtyCount, pObject.getLocation());
             }
    
             if (pObject.isMoveinventoryitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getMoveinventoryitemid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a InventoryitemBean template.
     *
     * @param pObject the InventoryitemBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(InventoryitemBean pObject) throws SQLException
    {
        if (pObject.isInventoryitemidInitialized())
            return deleteByPrimaryKey(pObject.getInventoryitemid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM inventoryitem WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isInventoryitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("inventoryitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInventoryidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("inventoryid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isProductidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("productid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("price").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNoteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("note").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRoomnumberInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("roomnumber").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResponsibleidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("responsibleid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRealamountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("realamount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOwneridInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ownerid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLocationInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("location").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMoveinventoryitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("moveinventoryitemid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isInventoryitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getInventoryitemid());
            }
    
            if (pObject.isInventoryidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
            }
    
            if (pObject.isProductidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
            }
    
            if (pObject.isAmountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
            }
    
            if (pObject.isPriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
            }
    
            if (pObject.isNoteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNote());
            }
    
            if (pObject.isRoomnumberInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRoomnumber());
            }
    
            if (pObject.isResponsibleidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
            }
    
            if (pObject.isRealamountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
            }
    
            if (pObject.isOwneridInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getOwnerid());
            }
    
            if (pObject.isLocationInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLocation());
            }
    
            if (pObject.isMoveinventoryitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getMoveinventoryitemid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table inventoryitem.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table inventoryitem with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from inventoryitem " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table inventoryitem with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific InventoryitemBean pObject given a c
     *
     * @param pObject the InventoryitemBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(InventoryitemBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from inventoryitem WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isInventoryitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("inventoryitemid= ?");
                }
    
                if (pObject.isInventoryidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("inventoryid= ?");
                }
    
                if (pObject.isProductidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
                }
    
                if (pObject.isAmountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
                }
    
                if (pObject.isPriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
                }
    
                if (pObject.isNoteModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
                }
    
                if (pObject.isRoomnumberModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("roomnumber= ?");
                }
    
                if (pObject.isResponsibleidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("responsibleid= ?");
                }
    
                if (pObject.isRealamountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("realamount= ?");
                }
    
                if (pObject.isOwneridModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ownerid= ?");
                }
    
                if (pObject.isLocationModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("location= ?");
                }
    
                if (pObject.isMoveinventoryitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("moveinventoryitemid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isInventoryitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getInventoryitemid());
                }
    
                if (pObject.isInventoryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInventoryid());
                }
    
                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isAmountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isRoomnumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getRoomnumber());
                }
    
                if (pObject.isResponsibleidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getResponsibleid());
                }
    
                if (pObject.isRealamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getRealamount());
                }
    
                if (pObject.isOwneridModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOwnerid());
                }
    
                if (pObject.isLocationModified()) {
                    ps.setString(++_dirtyCount, pObject.getLocation());
                }
    
                if (pObject.isMoveinventoryitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getMoveinventoryitemid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the inventoryitem on a InventoryitemBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting InventoryitemBean pObject
     */
    //72
    public InventoryitemBean decodeRow(ResultSet rs) throws SQLException
    {
        InventoryitemBean pObject = createInventoryitemBean();
        pObject.setInventoryitemid(Manager.getLong(rs, 1));
        pObject.setInventoryid(Manager.getInteger(rs, 2));
        pObject.setProductid(Manager.getLong(rs, 3));
        pObject.setAmount(Manager.getDouble(rs, 4));
        pObject.setPrice(Manager.getDouble(rs, 5));
        pObject.setNote(rs.getString(6));
        pObject.setRoomnumber(rs.getString(7));
        pObject.setResponsibleid(Manager.getInteger(rs, 8));
        pObject.setRealamount(Manager.getDouble(rs, 9));
        pObject.setOwnerid(Manager.getInteger(rs, 10));
        pObject.setLocation(rs.getString(11));
        pObject.setMoveinventoryitemid(Manager.getLong(rs, 12));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the inventoryitem table on a InventoryitemBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting InventoryitemBean pObject
     */
    //73
    public InventoryitemBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        InventoryitemBean pObject = createInventoryitemBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_INVENTORYITEMID:
                    ++pos;
                    pObject.setInventoryitemid(Manager.getLong(rs, pos));
                    break;
                case ID_INVENTORYID:
                    ++pos;
                    pObject.setInventoryid(Manager.getInteger(rs, pos));
                    break;
                case ID_PRODUCTID:
                    ++pos;
                    pObject.setProductid(Manager.getLong(rs, pos));
                    break;
                case ID_AMOUNT:
                    ++pos;
                    pObject.setAmount(Manager.getDouble(rs, pos));
                    break;
                case ID_PRICE:
                    ++pos;
                    pObject.setPrice(Manager.getDouble(rs, pos));
                    break;
                case ID_NOTE:
                    ++pos;
                    pObject.setNote(rs.getString(pos));
                    break;
                case ID_ROOMNUMBER:
                    ++pos;
                    pObject.setRoomnumber(rs.getString(pos));
                    break;
                case ID_RESPONSIBLEID:
                    ++pos;
                    pObject.setResponsibleid(Manager.getInteger(rs, pos));
                    break;
                case ID_REALAMOUNT:
                    ++pos;
                    pObject.setRealamount(Manager.getDouble(rs, pos));
                    break;
                case ID_OWNERID:
                    ++pos;
                    pObject.setOwnerid(Manager.getInteger(rs, pos));
                    break;
                case ID_LOCATION:
                    ++pos;
                    pObject.setLocation(rs.getString(pos));
                    break;
                case ID_MOVEINVENTORYITEMID:
                    ++pos;
                    pObject.setMoveinventoryitemid(Manager.getLong(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of InventoryitemBean 
     */
    //41
    public InventoryitemBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of InventoryitemBean 
     */
    public InventoryitemBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (InventoryitemBean[])v.toArray(new InventoryitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private InventoryitemListener listener = null;

    /**
     * Registers a unique InventoryitemListener listener.
     */
    //66.5
    public void registerListener(InventoryitemListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the InventoryitemBean pObject.
     *
     * @param pObject the InventoryitemBean pObject to be saved
     */
    //67
    void beforeInsert(InventoryitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the InventoryitemBean pObject.
     *
     * @param pObject the InventoryitemBean pObject to be saved
     */
    //68
    void afterInsert(InventoryitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the InventoryitemBean pObject.
     *
     * @param pObject the InventoryitemBean pObject to be updated
     */
    //69
    void beforeUpdate(InventoryitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the InventoryitemBean pObject.
     *
     * @param pObject the InventoryitemBean pObject to be updated
     */
    //70
    void afterUpdate(InventoryitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
