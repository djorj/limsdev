// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class SampleboxreseachBean
// extends+ 

// extends- 
{
    private Long sampleboxreseachid;
    private boolean sampleboxreseachid_is_modified = false;
    private boolean sampleboxreseachid_is_initialized = false;
    
    private Long contractsampletypeid;
    private boolean contractsampletypeid_is_modified = false;
    private boolean contractsampletypeid_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private Integer totalsubtest;
    private boolean totalsubtest_is_modified = false;
    private boolean totalsubtest_is_initialized = false;
    
    private Long parenttest;
    private boolean parenttest_is_modified = false;
    private boolean parenttest_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private Integer daynum;
    private boolean daynum_is_modified = false;
    private boolean daynum_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SampleboxreseachBean()
    {
    }
    
    /**
     * Getter method for sampleboxreseachid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.sampleboxreseachid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleboxreseachid
     */
    public Long getSampleboxreseachid()
    {
        return sampleboxreseachid; 
    }

    /**
     * Setter method for sampleboxreseachid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleboxreseachid
     */
    public void setSampleboxreseachid(Long newVal) {
        if ((newVal != null && this.sampleboxreseachid != null && (newVal.compareTo(this.sampleboxreseachid) == 0)) || 
            (newVal == null && this.sampleboxreseachid == null && sampleboxreseachid_is_initialized)) {
            return; 
        } 
        this.sampleboxreseachid = newVal; 
        sampleboxreseachid_is_modified = true; 
        sampleboxreseachid_is_initialized = true; 
    }

    /**
     * Setter method for sampleboxreseachid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleboxreseachid
     */
    public void setSampleboxreseachid(long newVal) {
        setSampleboxreseachid(new Long(newVal));
    }

    /**
     * Determines if the sampleboxreseachid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleboxreseachidModified() {
        return sampleboxreseachid_is_modified; 
    }

    /**
     * Determines if the sampleboxreseachid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleboxreseachidInitialized() {
        return sampleboxreseachid_is_initialized; 
    }

    /**
     * Getter method for contractsampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.contractsampletypeid
     * <li> foreign key: contractsampletype.contractsampletypeid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampletypeid
     */
    public Long getContractsampletypeid()
    {
        return contractsampletypeid; 
    }

    /**
     * Setter method for contractsampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampletypeid
     */
    public void setContractsampletypeid(Long newVal) {
        if ((newVal != null && this.contractsampletypeid != null && (newVal.compareTo(this.contractsampletypeid) == 0)) || 
            (newVal == null && this.contractsampletypeid == null && contractsampletypeid_is_initialized)) {
            return; 
        } 
        this.contractsampletypeid = newVal; 
        contractsampletypeid_is_modified = true; 
        contractsampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampletypeid
     */
    public void setContractsampletypeid(long newVal) {
        setContractsampletypeid(new Long(newVal));
    }

    /**
     * Determines if the contractsampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampletypeidModified() {
        return contractsampletypeid_is_modified; 
    }

    /**
     * Determines if the contractsampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampletypeidInitialized() {
        return contractsampletypeid_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.labtestid
     * <li> foreign key: labtest.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for totalsubtest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.totalsubtest
     * <li>default value: 0
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of totalsubtest
     */
    public Integer getTotalsubtest()
    {
        return totalsubtest; 
    }

    /**
     * Setter method for totalsubtest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to totalsubtest
     */
    public void setTotalsubtest(Integer newVal) {
        if ((newVal != null && this.totalsubtest != null && (newVal.compareTo(this.totalsubtest) == 0)) || 
            (newVal == null && this.totalsubtest == null && totalsubtest_is_initialized)) {
            return; 
        } 
        this.totalsubtest = newVal; 
        totalsubtest_is_modified = true; 
        totalsubtest_is_initialized = true; 
    }

    /**
     * Setter method for totalsubtest.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalsubtest
     */
    public void setTotalsubtest(int newVal) {
        setTotalsubtest(new Integer(newVal));
    }

    /**
     * Determines if the totalsubtest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalsubtestModified() {
        return totalsubtest_is_modified; 
    }

    /**
     * Determines if the totalsubtest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalsubtestInitialized() {
        return totalsubtest_is_initialized; 
    }

    /**
     * Getter method for parenttest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.parenttest
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parenttest
     */
    public Long getParenttest()
    {
        return parenttest; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(Long newVal) {
        if ((newVal != null && this.parenttest != null && (newVal.compareTo(this.parenttest) == 0)) || 
            (newVal == null && this.parenttest == null && parenttest_is_initialized)) {
            return; 
        } 
        this.parenttest = newVal; 
        parenttest_is_modified = true; 
        parenttest_is_initialized = true; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(long newVal) {
        setParenttest(new Long(newVal));
    }

    /**
     * Determines if the parenttest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParenttestModified() {
        return parenttest_is_modified; 
    }

    /**
     * Determines if the parenttest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParenttestInitialized() {
        return parenttest_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for daynum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleboxreseach.daynum
     * <li>default value: 2
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of daynum
     */
    public Integer getDaynum()
    {
        return daynum; 
    }

    /**
     * Setter method for daynum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to daynum
     */
    public void setDaynum(Integer newVal) {
        if ((newVal != null && this.daynum != null && (newVal.compareTo(this.daynum) == 0)) || 
            (newVal == null && this.daynum == null && daynum_is_initialized)) {
            return; 
        } 
        this.daynum = newVal; 
        daynum_is_modified = true; 
        daynum_is_initialized = true; 
    }

    /**
     * Setter method for daynum.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to daynum
     */
    public void setDaynum(int newVal) {
        setDaynum(new Integer(newVal));
    }

    /**
     * Determines if the daynum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDaynumModified() {
        return daynum_is_modified; 
    }

    /**
     * Determines if the daynum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDaynumInitialized() {
        return daynum_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return sampleboxreseachid_is_modified || 
		contractsampletypeid_is_modified || 
		labtestid_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		deleted_is_modified || 
		totalsubtest_is_modified || 
		parenttest_is_modified || 
		institutionid_is_modified || 
		price_is_modified || 
		daynum_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        sampleboxreseachid_is_modified = false;
        contractsampletypeid_is_modified = false;
        labtestid_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        deleted_is_modified = false;
        totalsubtest_is_modified = false;
        parenttest_is_modified = false;
        institutionid_is_modified = false;
        price_is_modified = false;
        daynum_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SampleboxreseachBean bean) {
        setSampleboxreseachid(bean.getSampleboxreseachid());
        setContractsampletypeid(bean.getContractsampletypeid());
        setLabtestid(bean.getLabtestid());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDeleted(bean.getDeleted());
        setTotalsubtest(bean.getTotalsubtest());
        setParenttest(bean.getParenttest());
        setInstitutionid(bean.getInstitutionid());
        setPrice(bean.getPrice());
        setDaynum(bean.getDaynum());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sampleboxreseach] "
                 + "\n - sampleboxreseach.sampleboxreseachid = " + (sampleboxreseachid_is_initialized ? ("[" + (sampleboxreseachid == null ? null : sampleboxreseachid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.contractsampletypeid = " + (contractsampletypeid_is_initialized ? ("[" + (contractsampletypeid == null ? null : contractsampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.totalsubtest = " + (totalsubtest_is_initialized ? ("[" + (totalsubtest == null ? null : totalsubtest.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.parenttest = " + (parenttest_is_initialized ? ("[" + (parenttest == null ? null : parenttest.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleboxreseach.daynum = " + (daynum_is_initialized ? ("[" + (daynum == null ? null : daynum.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
