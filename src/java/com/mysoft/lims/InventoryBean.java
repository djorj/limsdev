// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class InventoryBean
// extends+ 

// extends- 
{
    private Integer inventoryid;
    private boolean inventoryid_is_modified = false;
    private boolean inventoryid_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private java.sql.Timestamp startdate;
    private boolean startdate_is_modified = false;
    private boolean startdate_is_initialized = false;
    
    private java.sql.Timestamp enddate;
    private boolean enddate_is_modified = false;
    private boolean enddate_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    InventoryBean()
    {
    }
    
    /**
     * Getter method for inventoryid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventory.inventoryid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of inventoryid
     */
    public Integer getInventoryid()
    {
        return inventoryid; 
    }

    /**
     * Setter method for inventoryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to inventoryid
     */
    public void setInventoryid(Integer newVal) {
        if ((newVal != null && this.inventoryid != null && (newVal.compareTo(this.inventoryid) == 0)) || 
            (newVal == null && this.inventoryid == null && inventoryid_is_initialized)) {
            return; 
        } 
        this.inventoryid = newVal; 
        inventoryid_is_modified = true; 
        inventoryid_is_initialized = true; 
    }

    /**
     * Setter method for inventoryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to inventoryid
     */
    public void setInventoryid(int newVal) {
        setInventoryid(new Integer(newVal));
    }

    /**
     * Determines if the inventoryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInventoryidModified() {
        return inventoryid_is_modified; 
    }

    /**
     * Determines if the inventoryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInventoryidInitialized() {
        return inventoryid_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventory.institutionid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for startdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventory.startdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of startdate
     */
    public java.sql.Timestamp getStartdate()
    {
        return startdate; 
    }

    /**
     * Setter method for startdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to startdate
     */
    public void setStartdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.startdate != null && (newVal.compareTo(this.startdate) == 0)) || 
            (newVal == null && this.startdate == null && startdate_is_initialized)) {
            return; 
        } 
        this.startdate = newVal; 
        startdate_is_modified = true; 
        startdate_is_initialized = true; 
    }

    /**
     * Setter method for startdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to startdate
     */
    public void setStartdate(long newVal) {
        setStartdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the startdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStartdateModified() {
        return startdate_is_modified; 
    }

    /**
     * Determines if the startdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStartdateInitialized() {
        return startdate_is_initialized; 
    }

    /**
     * Getter method for enddate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventory.enddate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of enddate
     */
    public java.sql.Timestamp getEnddate()
    {
        return enddate; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.enddate != null && (newVal.compareTo(this.enddate) == 0)) || 
            (newVal == null && this.enddate == null && enddate_is_initialized)) {
            return; 
        } 
        this.enddate = newVal; 
        enddate_is_modified = true; 
        enddate_is_initialized = true; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(long newVal) {
        setEnddate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the enddate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEnddateModified() {
        return enddate_is_modified; 
    }

    /**
     * Determines if the enddate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEnddateInitialized() {
        return enddate_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventory.regbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventory.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return inventoryid_is_modified || 
		institutionid_is_modified || 
		startdate_is_modified || 
		enddate_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        inventoryid_is_modified = false;
        institutionid_is_modified = false;
        startdate_is_modified = false;
        enddate_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(InventoryBean bean) {
        setInventoryid(bean.getInventoryid());
        setInstitutionid(bean.getInstitutionid());
        setStartdate(bean.getStartdate());
        setEnddate(bean.getEnddate());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[inventory] "
                 + "\n - inventory.inventoryid = " + (inventoryid_is_initialized ? ("[" + (inventoryid == null ? null : inventoryid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventory.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventory.startdate = " + (startdate_is_initialized ? ("[" + (startdate == null ? null : startdate.toString()) + "]") : "not initialized") + ""
                 + "\n - inventory.enddate = " + (enddate_is_initialized ? ("[" + (enddate == null ? null : enddate.toString()) + "]") : "not initialized") + ""
                 + "\n - inventory.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventory.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
