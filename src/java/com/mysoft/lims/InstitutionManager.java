// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the institution table.
 */
public class InstitutionManager
// extends+ 

// extends- 
{

    /**
     * Column institutionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INSTITUTIONID = 0;
    public static final int TYPE_INSTITUTIONID = Types.INTEGER;
    public static final String NAME_INSTITUTIONID = "institutionid";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 1;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column address of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS = 2;
    public static final int TYPE_ADDRESS = Types.VARCHAR;
    public static final String NAME_ADDRESS = "address";

    /**
     * Column code of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CODE = 3;
    public static final int TYPE_CODE = Types.VARCHAR;
    public static final String NAME_CODE = "code";

    /**
     * Column provider of type Types.BIT mapped to Boolean.
     */
    public static final int ID_PROVIDER = 4;
    public static final int TYPE_PROVIDER = Types.BIT;
    public static final String NAME_PROVIDER = "provider";

    /**
     * Column headerlogo of type Types.VARCHAR mapped to String.
     */
    public static final int ID_HEADERLOGO = 5;
    public static final int TYPE_HEADERLOGO = Types.VARCHAR;
    public static final String NAME_HEADERLOGO = "headerlogo";

    /**
     * Column iso of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ISO = 6;
    public static final int TYPE_ISO = Types.VARCHAR;
    public static final String NAME_ISO = "iso";

    /**
     * Column fullname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FULLNAME = 7;
    public static final int TYPE_FULLNAME = Types.VARCHAR;
    public static final String NAME_FULLNAME = "fullname";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 8;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column url of type Types.VARCHAR mapped to String.
     */
    public static final int ID_URL = 9;
    public static final int TYPE_URL = Types.VARCHAR;
    public static final String NAME_URL = "url";

    /**
     * Column parentid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PARENTID = 10;
    public static final int TYPE_PARENTID = Types.INTEGER;
    public static final String NAME_PARENTID = "parentid";

    /**
     * Column companyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMPANYID = 11;
    public static final int TYPE_COMPANYID = Types.INTEGER;
    public static final String NAME_COMPANYID = "companyid";


    private static final String TABLE_NAME = "institution";

    /**
     * Create an array of type string containing all the fields of the institution table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "institution.institutionid"
        ,"institution.name"
        ,"institution.address"
        ,"institution.code"
        ,"institution.provider"
        ,"institution.headerlogo"
        ,"institution.iso"
        ,"institution.fullname"
        ,"institution.phone"
        ,"institution.url"
        ,"institution.parentid"
        ,"institution.companyid"
    };

    /**
     * Field that contains the comma separated fields of the institution table.
     */
    private static final String ALL_FIELDS = "institution.institutionid"
                            + ",institution.name"
                            + ",institution.address"
                            + ",institution.code"
                            + ",institution.provider"
                            + ",institution.headerlogo"
                            + ",institution.iso"
                            + ",institution.fullname"
                            + ",institution.phone"
                            + ",institution.url"
                            + ",institution.parentid"
                            + ",institution.companyid";

    private static InstitutionManager singleton = new InstitutionManager();

    /**
     * Get the InstitutionManager singleton.
     *
     * @return InstitutionManager 
     */
    synchronized public static InstitutionManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own InstitutionManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(InstitutionManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new InstitutionBean instance.
     *
     * @return the new InstitutionBean 
     */
    public InstitutionBean createInstitutionBean()
    {
        return new InstitutionBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a InstitutionBean from the institution using its key fields.
     *
     * @return a unique InstitutionBean 
     */
    //12
    public InstitutionBean loadByPrimaryKey(Integer institutionid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM institution WHERE institution.institutionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, institutionid);
            InstitutionBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer institutionid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from institution WHERE institution.institutionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, institutionid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads InstitutionBean array from the institution table using its parentid field.
     *
     * @return an array of InstitutionBean 
     */
    // LOAD BY IMPORTED KEY
    public InstitutionBean[] loadByParentid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM institution WHERE parentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the institution table by parentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByParentid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM institution WHERE parentid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the InstitutionBean object from the institution.institutionid field.
     *
     * @param pObject the InstitutionBean 
     * @return the associated InstitutionBean pObject
     */
    // GET IMPORTED
    public InstitutionBean getInstitutionBean(InstitutionBean pObject) throws SQLException
    {
        InstitutionBean other = InstitutionManager.getInstance().createInstitutionBean();
        other.setInstitutionid(pObject.getParentid());
        return InstitutionManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the InstitutionBean object to the InstitutionBean object.
     *
     * @param pObject the InstitutionBean object to use
     * @param pObjectToBeSet the InstitutionBean object to associate to the InstitutionBean 
     * @return the associated InstitutionBean pObject
     */
    // SET IMPORTED
    public InstitutionBean setInstitutionBean(InstitutionBean pObject,InstitutionBean pObjectToBeSet)
    {
        pObject.setParentid(pObjectToBeSet.getInstitutionid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from institution.
     *
     * @return an array of InstitutionManager pObject
     */
    //38
    public InstitutionBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM institution",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of InstitutionBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting InstitutionBean table 
     */
    //49
    public InstitutionBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of InstitutionBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting InstitutionBean table 
     */
    //51
    public InstitutionBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from institution " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from institution ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (InstitutionBean[])v.toArray(new InstitutionBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from institution table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the institution table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM institution " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the InstitutionBean pObject into the database.
     *
     * @param pObject the InstitutionBean pObject to be saved
     */
    //100
    public InstitutionBean save(InstitutionBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isInstitutionidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('institutionid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setInstitutionid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into institution (");
    
                if (pObject.isInstitutionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("institutionid");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isAddressModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address");
                    _dirtyCount++;
                }

                if (pObject.isCodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("code");
                    _dirtyCount++;
                }

                if (pObject.isProviderModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("provider");
                    _dirtyCount++;
                }

                if (pObject.isHeaderlogoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("headerlogo");
                    _dirtyCount++;
                }

                if (pObject.isIsoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("iso");
                    _dirtyCount++;
                }

                if (pObject.isFullnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fullname");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isUrlModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("url");
                    _dirtyCount++;
                }

                if (pObject.isParentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("parentid");
                    _dirtyCount++;
                }

                if (pObject.isCompanyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isProviderModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getProvider());
                }
    
                if (pObject.isHeaderlogoModified()) {
                    ps.setString(++_dirtyCount, pObject.getHeaderlogo());
                }
    
                if (pObject.isIsoModified()) {
                    ps.setString(++_dirtyCount, pObject.getIso());
                }
    
                if (pObject.isFullnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFullname());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isUrlModified()) {
                    ps.setString(++_dirtyCount, pObject.getUrl());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE institution SET ");
                boolean useComma=false;

                if (pObject.isInstitutionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("institutionid").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isAddressModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address").append("=?");
                }

                if (pObject.isCodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("code").append("=?");
                }

                if (pObject.isProviderModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("provider").append("=?");
                }

                if (pObject.isHeaderlogoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("headerlogo").append("=?");
                }

                if (pObject.isIsoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("iso").append("=?");
                }

                if (pObject.isFullnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fullname").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isUrlModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("url").append("=?");
                }

                if (pObject.isParentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("parentid").append("=?");
                }

                if (pObject.isCompanyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("institution.institutionid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isInstitutionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isAddressModified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isCodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getCode());
                }

                if (pObject.isProviderModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getProvider());
                }

                if (pObject.isHeaderlogoModified()) {
                      ps.setString(++_dirtyCount, pObject.getHeaderlogo());
                }

                if (pObject.isIsoModified()) {
                      ps.setString(++_dirtyCount, pObject.getIso());
                }

                if (pObject.isFullnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getFullname());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isUrlModified()) {
                      ps.setString(++_dirtyCount, pObject.getUrl());
                }

                if (pObject.isParentidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getParentid());
                }

                if (pObject.isCompanyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of InstitutionBean pObjects into the database.
     *
     * @param pObjects the InstitutionBean pObject table to be saved
     * @return the saved InstitutionBean array.
     */
    //65
    public InstitutionBean[] save(InstitutionBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique InstitutionBean pObject from a template one giving a c
     *
     * @param pObject the InstitutionBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public InstitutionBean loadUniqueUsingTemplate(InstitutionBean pObject) throws SQLException
    {
         InstitutionBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of InstitutionBean from a template one.
     *
     * @param pObject the InstitutionBean template to look for
     * @return all the InstitutionBean matching the template
     */
    //88
    public InstitutionBean[] loadUsingTemplate(InstitutionBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from institution WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isInstitutionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isAddressModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
             }
    
             if (pObject.isCodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
             }
    
             if (pObject.isProviderModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("provider= ?");
             }
    
             if (pObject.isHeaderlogoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("headerlogo= ?");
             }
    
             if (pObject.isIsoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("iso= ?");
             }
    
             if (pObject.isFullnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fullname= ?");
             }
    
             if (pObject.isPhoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }
    
             if (pObject.isUrlModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("url= ?");
             }
    
             if (pObject.isParentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
             }
    
             if (pObject.isCompanyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isInstitutionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isAddressModified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress());
             }
    
             if (pObject.isCodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getCode());
             }
    
             if (pObject.isProviderModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getProvider());
             }
    
             if (pObject.isHeaderlogoModified()) {
                 ps.setString(++_dirtyCount, pObject.getHeaderlogo());
             }
    
             if (pObject.isIsoModified()) {
                 ps.setString(++_dirtyCount, pObject.getIso());
             }
    
             if (pObject.isFullnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getFullname());
             }
    
             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }
    
             if (pObject.isUrlModified()) {
                 ps.setString(++_dirtyCount, pObject.getUrl());
             }
    
             if (pObject.isParentidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getParentid());
             }
    
             if (pObject.isCompanyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a InstitutionBean template.
     *
     * @param pObject the InstitutionBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(InstitutionBean pObject) throws SQLException
    {
        if (pObject.isInstitutionidInitialized())
            return deleteByPrimaryKey(pObject.getInstitutionid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM institution WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isInstitutionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("institutionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddressInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("code").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isProviderInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("provider").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isHeaderlogoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("headerlogo").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIsoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("iso").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFullnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fullname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isUrlInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("url").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isParentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("parentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isInstitutionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isAddressInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress());
            }
    
            if (pObject.isCodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCode());
            }
    
            if (pObject.isProviderInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getProvider());
            }
    
            if (pObject.isHeaderlogoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getHeaderlogo());
            }
    
            if (pObject.isIsoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getIso());
            }
    
            if (pObject.isFullnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFullname());
            }
    
            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }
    
            if (pObject.isUrlInitialized()) {
                ps.setString(++_dirtyCount, pObject.getUrl());
            }
    
            if (pObject.isParentidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getParentid());
            }
    
            if (pObject.isCompanyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ContractBean using the relation table Contractanalysis given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaContractanalysis(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.institutionid = ?"
                         + " AND contractanalysis.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Contractanalysis given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaContractanalysis(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.institutionid = ?"
                         + " AND contractanalysis.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Contractanalysis given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaContractanalysis(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.institutionid = ?"
                         + " AND contractanalysis.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampleitemBean using the relation table Contractsampleitem given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ContractsampleitemBean 
     */
    // MANY TO MANY
    public ContractsampleitemBean[] loadContractsampleitemViaContractsampleitem(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampleitem,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.institutionid = ?"
                         + " AND contractsampleitem.parentid = contractsampleitem.contractsampleitemid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ContractsampleitemManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampletypeBean using the relation table Contractsampleitem given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ContractsampletypeBean 
     */
    // MANY TO MANY
    public ContractsampletypeBean[] loadContractsampletypeViaContractsampleitem(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampletype,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.institutionid = ?"
                         + " AND contractsampleitem.contractsampletypeid = contractsampletype.contractsampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ContractsampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DerivatetypeBean using the relation table Contractsampleitem given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of DerivatetypeBean 
     */
    // MANY TO MANY
    public DerivatetypeBean[] loadDerivatetypeViaContractsampleitem(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        derivatetype,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.institutionid = ?"
                         + " AND contractsampleitem.derivatetypeid = derivatetype.derivatetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return DerivatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SpeciesBean using the relation table Contractsampleitem given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of SpeciesBean 
     */
    // MANY TO MANY
    public SpeciesBean[] loadSpeciesViaContractsampleitem(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        species,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.institutionid = ?"
                         + " AND contractsampleitem.speciesid = species.speciesid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return SpeciesManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DocBean using the relation table Institutiondoc given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of DocBean 
     */
    // MANY TO MANY
    public DocBean[] loadDocViaInstitutiondoc(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        doc,institutiondoc"
                         + " WHERE "    
                         + "     institutiondoc.institutionid = ?"
                         + " AND institutiondoc.docid = doc.docid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return DocManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StockBean using the relation table Institutionstock given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of StockBean 
     */
    // MANY TO MANY
    public StockBean[] loadStockViaInstitutionstock(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        stock,institutionstock"
                         + " WHERE "    
                         + "     institutionstock.institutionid = ?"
                         + " AND institutionstock.stockid = stock.stockid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return StockManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Inventory given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaInventory(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,inventory"
                         + " WHERE "    
                         + "     inventory.institutionid = ?"
                         + " AND inventory.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Labtestinstitution given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaLabtestinstitution(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,labtestinstitution"
                         + " WHERE "    
                         + "     labtestinstitution.institutionid = ?"
                         + " AND labtestinstitution.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonelltypeBean using the relation table Personell given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of PersonelltypeBean 
     */
    // MANY TO MANY
    public PersonelltypeBean[] loadPersonelltypeViaPersonell(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personelltype,personell"
                         + " WHERE "    
                         + "     personell.institutionid = ?"
                         + " AND personell.personelltypeid = personelltype.personelltypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return PersonelltypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContragentBean using the relation table Stockmovement given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ContragentBean 
     */
    // MANY TO MANY
    public ContragentBean[] loadContragentViaStockmovement(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contragent,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.stockid = ?"
                         + " AND stockmovement.mcontragentid = contragent.contragentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ContragentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InvoiceBean using the relation table Stockmovement given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of InvoiceBean 
     */
    // MANY TO MANY
    public InvoiceBean[] loadInvoiceViaStockmovement(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        invoice,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.stockid = ?"
                         + " AND stockmovement.invoiceid = invoice.invoiceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return InvoiceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of OperBean using the relation table Stockmovement given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of OperBean 
     */
    // MANY TO MANY
    public OperBean[] loadOperViaStockmovement(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        oper,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.stockid = ?"
                         + " AND stockmovement.operid = oper.operid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return OperManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Stockmovement given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaStockmovement(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.stockid = ?"
                         + " AND stockmovement.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ProductBean using the relation table Stockmovement given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ProductBean 
     */
    // MANY TO MANY
    public ProductBean[] loadProductViaStockmovement(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        product,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.stockid = ?"
                         + " AND stockmovement.productid = product.productid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ProductManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StockmovementBean using the relation table Stockmovement given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of StockmovementBean 
     */
    // MANY TO MANY
    public StockmovementBean[] loadStockmovementViaStockmovement(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        stockmovement,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.stockid = ?"
                         + " AND stockmovement.parentid = stockmovement.stockmovementid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return StockmovementManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of TestcategoryBean using the relation table Testcategorylab given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of TestcategoryBean 
     */
    // MANY TO MANY
    public TestcategoryBean[] loadTestcategoryViaTestcategorylab(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        testcategory,testcategorylab"
                         + " WHERE "    
                         + "     testcategorylab.institutionid = ?"
                         + " AND testcategorylab.testcategoryid = testcategory.testcategoryid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return TestcategoryManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ActBean using the relation table Transitact given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ActBean 
     */
    // MANY TO MANY
    public ActBean[] loadActViaTransitact(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        act,transitact"
                         + " WHERE "    
                         + "     transitact.fromlocationid = ?"
                         + " AND transitact.actid = act.actid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ActManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of AppealBean using the relation table Transitact given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaTransitact(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,transitact"
                         + " WHERE "    
                         + "     transitact.fromlocationid = ?"
                         + " AND transitact.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Transitact given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaTransitact(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,transitact"
                         + " WHERE "    
                         + "     transitact.fromlocationid = ?"
                         + " AND transitact.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Transitact given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaTransitact(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,transitact"
                         + " WHERE "    
                         + "     transitact.fromlocationid = ?"
                         + " AND transitact.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampleitemBean using the relation table Transitsampleitem given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of ContractsampleitemBean 
     */
    // MANY TO MANY
    public ContractsampleitemBean[] loadContractsampleitemViaTransitsampleitem(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampleitem,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.fromlocationid = ?"
                         + " AND transitsampleitem.contractsampleitemid = contractsampleitem.contractsampleitemid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return ContractsampleitemManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Transitsampleitem given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaTransitsampleitem(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.fromlocationid = ?"
                         + " AND transitsampleitem.getbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of TransitactBean using the relation table Transitsampleitem given a InstitutionBean object.
     *
     * @param pObject the InstitutionBean pObject to be used
     * @return an array of TransitactBean 
     */
    // MANY TO MANY
    public TransitactBean[] loadTransitactViaTransitsampleitem(InstitutionBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        transitact,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.fromlocationid = ?"
                         + " AND transitsampleitem.transitactid = transitact.transitactid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getInstitutionid());
             return TransitactManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table institution.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table institution with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from institution " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table institution with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific InstitutionBean pObject given a c
     *
     * @param pObject the InstitutionBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(InstitutionBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from institution WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isInstitutionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isAddressModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
                }
    
                if (pObject.isCodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
                }
    
                if (pObject.isProviderModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("provider= ?");
                }
    
                if (pObject.isHeaderlogoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("headerlogo= ?");
                }
    
                if (pObject.isIsoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("iso= ?");
                }
    
                if (pObject.isFullnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fullname= ?");
                }
    
                if (pObject.isPhoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }
    
                if (pObject.isUrlModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("url= ?");
                }
    
                if (pObject.isParentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
                }
    
                if (pObject.isCompanyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isProviderModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getProvider());
                }
    
                if (pObject.isHeaderlogoModified()) {
                    ps.setString(++_dirtyCount, pObject.getHeaderlogo());
                }
    
                if (pObject.isIsoModified()) {
                    ps.setString(++_dirtyCount, pObject.getIso());
                }
    
                if (pObject.isFullnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFullname());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isUrlModified()) {
                    ps.setString(++_dirtyCount, pObject.getUrl());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the institution on a InstitutionBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting InstitutionBean pObject
     */
    //72
    public InstitutionBean decodeRow(ResultSet rs) throws SQLException
    {
        InstitutionBean pObject = createInstitutionBean();
        pObject.setInstitutionid(Manager.getInteger(rs, 1));
        pObject.setName(rs.getString(2));
        pObject.setAddress(rs.getString(3));
        pObject.setCode(rs.getString(4));
        pObject.setProvider(Manager.getBoolean(rs, 5));
        pObject.setHeaderlogo(rs.getString(6));
        pObject.setIso(rs.getString(7));
        pObject.setFullname(rs.getString(8));
        pObject.setPhone(rs.getString(9));
        pObject.setUrl(rs.getString(10));
        pObject.setParentid(Manager.getInteger(rs, 11));
        pObject.setCompanyid(Manager.getInteger(rs, 12));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the institution table on a InstitutionBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting InstitutionBean pObject
     */
    //73
    public InstitutionBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        InstitutionBean pObject = createInstitutionBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_INSTITUTIONID:
                    ++pos;
                    pObject.setInstitutionid(Manager.getInteger(rs, pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_ADDRESS:
                    ++pos;
                    pObject.setAddress(rs.getString(pos));
                    break;
                case ID_CODE:
                    ++pos;
                    pObject.setCode(rs.getString(pos));
                    break;
                case ID_PROVIDER:
                    ++pos;
                    pObject.setProvider(Manager.getBoolean(rs, pos));
                    break;
                case ID_HEADERLOGO:
                    ++pos;
                    pObject.setHeaderlogo(rs.getString(pos));
                    break;
                case ID_ISO:
                    ++pos;
                    pObject.setIso(rs.getString(pos));
                    break;
                case ID_FULLNAME:
                    ++pos;
                    pObject.setFullname(rs.getString(pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_URL:
                    ++pos;
                    pObject.setUrl(rs.getString(pos));
                    break;
                case ID_PARENTID:
                    ++pos;
                    pObject.setParentid(Manager.getInteger(rs, pos));
                    break;
                case ID_COMPANYID:
                    ++pos;
                    pObject.setCompanyid(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of InstitutionBean 
     */
    //41
    public InstitutionBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of InstitutionBean 
     */
    public InstitutionBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (InstitutionBean[])v.toArray(new InstitutionBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private InstitutionListener listener = null;

    /**
     * Registers a unique InstitutionListener listener.
     */
    //66.5
    public void registerListener(InstitutionListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the InstitutionBean pObject.
     *
     * @param pObject the InstitutionBean pObject to be saved
     */
    //67
    void beforeInsert(InstitutionBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the InstitutionBean pObject.
     *
     * @param pObject the InstitutionBean pObject to be saved
     */
    //68
    void afterInsert(InstitutionBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the InstitutionBean pObject.
     *
     * @param pObject the InstitutionBean pObject to be updated
     */
    //69
    void beforeUpdate(InstitutionBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the InstitutionBean pObject.
     *
     * @param pObject the InstitutionBean pObject to be updated
     */
    //70
    void afterUpdate(InstitutionBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
