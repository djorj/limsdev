// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class MessagesBean
// extends+ 

// extends- 
{
    private Long messagesid;
    private boolean messagesid_is_modified = false;
    private boolean messagesid_is_initialized = false;
    
    private java.sql.Timestamp messagedate;
    private boolean messagedate_is_modified = false;
    private boolean messagedate_is_initialized = false;
    
    private Integer personellid;
    private boolean personellid_is_modified = false;
    private boolean personellid_is_initialized = false;
    
    private String content;
    private boolean content_is_modified = false;
    private boolean content_is_initialized = false;
    
    private Boolean read;
    private boolean read_is_modified = false;
    private boolean read_is_initialized = false;
    
    private java.sql.Timestamp readdate;
    private boolean readdate_is_modified = false;
    private boolean readdate_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private java.sql.Timestamp deletedate;
    private boolean deletedate_is_modified = false;
    private boolean deletedate_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    MessagesBean()
    {
    }
    
    /**
     * Getter method for messagesid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.messagesid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of messagesid
     */
    public Long getMessagesid()
    {
        return messagesid; 
    }

    /**
     * Setter method for messagesid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to messagesid
     */
    public void setMessagesid(Long newVal) {
        if ((newVal != null && this.messagesid != null && (newVal.compareTo(this.messagesid) == 0)) || 
            (newVal == null && this.messagesid == null && messagesid_is_initialized)) {
            return; 
        } 
        this.messagesid = newVal; 
        messagesid_is_modified = true; 
        messagesid_is_initialized = true; 
    }

    /**
     * Setter method for messagesid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to messagesid
     */
    public void setMessagesid(long newVal) {
        setMessagesid(new Long(newVal));
    }

    /**
     * Determines if the messagesid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMessagesidModified() {
        return messagesid_is_modified; 
    }

    /**
     * Determines if the messagesid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMessagesidInitialized() {
        return messagesid_is_initialized; 
    }

    /**
     * Getter method for messagedate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.messagedate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of messagedate
     */
    public java.sql.Timestamp getMessagedate()
    {
        return messagedate; 
    }

    /**
     * Setter method for messagedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to messagedate
     */
    public void setMessagedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.messagedate != null && (newVal.compareTo(this.messagedate) == 0)) || 
            (newVal == null && this.messagedate == null && messagedate_is_initialized)) {
            return; 
        } 
        this.messagedate = newVal; 
        messagedate_is_modified = true; 
        messagedate_is_initialized = true; 
    }

    /**
     * Setter method for messagedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to messagedate
     */
    public void setMessagedate(long newVal) {
        setMessagedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the messagedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMessagedateModified() {
        return messagedate_is_modified; 
    }

    /**
     * Determines if the messagedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMessagedateInitialized() {
        return messagedate_is_initialized; 
    }

    /**
     * Getter method for personellid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.personellid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of personellid
     */
    public Integer getPersonellid()
    {
        return personellid; 
    }

    /**
     * Setter method for personellid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personellid
     */
    public void setPersonellid(Integer newVal) {
        if ((newVal != null && this.personellid != null && (newVal.compareTo(this.personellid) == 0)) || 
            (newVal == null && this.personellid == null && personellid_is_initialized)) {
            return; 
        } 
        this.personellid = newVal; 
        personellid_is_modified = true; 
        personellid_is_initialized = true; 
    }

    /**
     * Setter method for personellid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to personellid
     */
    public void setPersonellid(int newVal) {
        setPersonellid(new Integer(newVal));
    }

    /**
     * Determines if the personellid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPersonellidModified() {
        return personellid_is_modified; 
    }

    /**
     * Determines if the personellid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPersonellidInitialized() {
        return personellid_is_initialized; 
    }

    /**
     * Getter method for content.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.content
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of content
     */
    public String getContent()
    {
        return content; 
    }

    /**
     * Setter method for content.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to content
     */
    public void setContent(String newVal) {
        if ((newVal != null && this.content != null && (newVal.compareTo(this.content) == 0)) || 
            (newVal == null && this.content == null && content_is_initialized)) {
            return; 
        } 
        this.content = newVal; 
        content_is_modified = true; 
        content_is_initialized = true; 
    }

    /**
     * Determines if the content has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContentModified() {
        return content_is_modified; 
    }

    /**
     * Determines if the content has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContentInitialized() {
        return content_is_initialized; 
    }

    /**
     * Getter method for read.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.read
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of read
     */
    public Boolean getRead()
    {
        return read; 
    }

    /**
     * Setter method for read.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to read
     */
    public void setRead(Boolean newVal) {
        if ((newVal != null && this.read != null && newVal.equals(this.read)) || 
            (newVal == null && this.read == null && read_is_initialized)) {
            return; 
        } 
        this.read = newVal; 
        read_is_modified = true; 
        read_is_initialized = true; 
    }

    /**
     * Setter method for read.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to read
     */
    public void setRead(boolean newVal) {
        setRead(new Boolean(newVal));
    }

    /**
     * Determines if the read has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReadModified() {
        return read_is_modified; 
    }

    /**
     * Determines if the read has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReadInitialized() {
        return read_is_initialized; 
    }

    /**
     * Getter method for readdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.readdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of readdate
     */
    public java.sql.Timestamp getReaddate()
    {
        return readdate; 
    }

    /**
     * Setter method for readdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to readdate
     */
    public void setReaddate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.readdate != null && (newVal.compareTo(this.readdate) == 0)) || 
            (newVal == null && this.readdate == null && readdate_is_initialized)) {
            return; 
        } 
        this.readdate = newVal; 
        readdate_is_modified = true; 
        readdate_is_initialized = true; 
    }

    /**
     * Setter method for readdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to readdate
     */
    public void setReaddate(long newVal) {
        setReaddate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the readdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReaddateModified() {
        return readdate_is_modified; 
    }

    /**
     * Determines if the readdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReaddateInitialized() {
        return readdate_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for deletedate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: messages.deletedate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of deletedate
     */
    public java.sql.Timestamp getDeletedate()
    {
        return deletedate; 
    }

    /**
     * Setter method for deletedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deletedate
     */
    public void setDeletedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.deletedate != null && (newVal.compareTo(this.deletedate) == 0)) || 
            (newVal == null && this.deletedate == null && deletedate_is_initialized)) {
            return; 
        } 
        this.deletedate = newVal; 
        deletedate_is_modified = true; 
        deletedate_is_initialized = true; 
    }

    /**
     * Setter method for deletedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deletedate
     */
    public void setDeletedate(long newVal) {
        setDeletedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the deletedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedateModified() {
        return deletedate_is_modified; 
    }

    /**
     * Determines if the deletedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedateInitialized() {
        return deletedate_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return messagesid_is_modified || 
		messagedate_is_modified || 
		personellid_is_modified || 
		content_is_modified || 
		read_is_modified || 
		readdate_is_modified || 
		deleted_is_modified || 
		deletedate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        messagesid_is_modified = false;
        messagedate_is_modified = false;
        personellid_is_modified = false;
        content_is_modified = false;
        read_is_modified = false;
        readdate_is_modified = false;
        deleted_is_modified = false;
        deletedate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(MessagesBean bean) {
        setMessagesid(bean.getMessagesid());
        setMessagedate(bean.getMessagedate());
        setPersonellid(bean.getPersonellid());
        setContent(bean.getContent());
        setRead(bean.getRead());
        setReaddate(bean.getReaddate());
        setDeleted(bean.getDeleted());
        setDeletedate(bean.getDeletedate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[messages] "
                 + "\n - messages.messagesid = " + (messagesid_is_initialized ? ("[" + (messagesid == null ? null : messagesid.toString()) + "]") : "not initialized") + ""
                 + "\n - messages.messagedate = " + (messagedate_is_initialized ? ("[" + (messagedate == null ? null : messagedate.toString()) + "]") : "not initialized") + ""
                 + "\n - messages.personellid = " + (personellid_is_initialized ? ("[" + (personellid == null ? null : personellid.toString()) + "]") : "not initialized") + ""
                 + "\n - messages.content = " + (content_is_initialized ? ("[" + (content == null ? null : content.toString()) + "]") : "not initialized") + ""
                 + "\n - messages.read = " + (read_is_initialized ? ("[" + (read == null ? null : read.toString()) + "]") : "not initialized") + ""
                 + "\n - messages.readdate = " + (readdate_is_initialized ? ("[" + (readdate == null ? null : readdate.toString()) + "]") : "not initialized") + ""
                 + "\n - messages.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - messages.deletedate = " + (deletedate_is_initialized ? ("[" + (deletedate == null ? null : deletedate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
