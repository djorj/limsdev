// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class PlatetemplateBean
// extends+ 

// extends- 
{
    private Long platetemplateid;
    private boolean platetemplateid_is_modified = false;
    private boolean platetemplateid_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private Integer w;
    private boolean w_is_modified = false;
    private boolean w_is_initialized = false;
    
    private Integer h;
    private boolean h_is_modified = false;
    private boolean h_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private Boolean zdefault;
    private boolean zdefault_is_modified = false;
    private boolean zdefault_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    PlatetemplateBean()
    {
    }
    
    /**
     * Getter method for platetemplateid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: platetemplate.platetemplateid
     * <li>default value: nextval('platetemplateid_seq'::regclass)
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of platetemplateid
     */
    public Long getPlatetemplateid()
    {
        return platetemplateid; 
    }

    /**
     * Setter method for platetemplateid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to platetemplateid
     */
    public void setPlatetemplateid(Long newVal) {
        if ((newVal != null && this.platetemplateid != null && (newVal.compareTo(this.platetemplateid) == 0)) || 
            (newVal == null && this.platetemplateid == null && platetemplateid_is_initialized)) {
            return; 
        } 
        this.platetemplateid = newVal; 
        platetemplateid_is_modified = true; 
        platetemplateid_is_initialized = true; 
    }

    /**
     * Setter method for platetemplateid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to platetemplateid
     */
    public void setPlatetemplateid(long newVal) {
        setPlatetemplateid(new Long(newVal));
    }

    /**
     * Determines if the platetemplateid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlatetemplateidModified() {
        return platetemplateid_is_modified; 
    }

    /**
     * Determines if the platetemplateid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlatetemplateidInitialized() {
        return platetemplateid_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: platetemplate.name
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for w.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: platetemplate.w
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of w
     */
    public Integer getW()
    {
        return w; 
    }

    /**
     * Setter method for w.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to w
     */
    public void setW(Integer newVal) {
        if ((newVal != null && this.w != null && (newVal.compareTo(this.w) == 0)) || 
            (newVal == null && this.w == null && w_is_initialized)) {
            return; 
        } 
        this.w = newVal; 
        w_is_modified = true; 
        w_is_initialized = true; 
    }

    /**
     * Setter method for w.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to w
     */
    public void setW(int newVal) {
        setW(new Integer(newVal));
    }

    /**
     * Determines if the w has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isWModified() {
        return w_is_modified; 
    }

    /**
     * Determines if the w has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isWInitialized() {
        return w_is_initialized; 
    }

    /**
     * Getter method for h.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: platetemplate.h
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of h
     */
    public Integer getH()
    {
        return h; 
    }

    /**
     * Setter method for h.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to h
     */
    public void setH(Integer newVal) {
        if ((newVal != null && this.h != null && (newVal.compareTo(this.h) == 0)) || 
            (newVal == null && this.h == null && h_is_initialized)) {
            return; 
        } 
        this.h = newVal; 
        h_is_modified = true; 
        h_is_initialized = true; 
    }

    /**
     * Setter method for h.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to h
     */
    public void setH(int newVal) {
        setH(new Integer(newVal));
    }

    /**
     * Determines if the h has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHModified() {
        return h_is_modified; 
    }

    /**
     * Determines if the h has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHInitialized() {
        return h_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: platetemplate.labtestid
     * <li> foreign key: labtest.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for zdefault.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: platetemplate.zdefault
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of zdefault
     */
    public Boolean getZdefault()
    {
        return zdefault; 
    }

    /**
     * Setter method for zdefault.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to zdefault
     */
    public void setZdefault(Boolean newVal) {
        if ((newVal != null && this.zdefault != null && newVal.equals(this.zdefault)) || 
            (newVal == null && this.zdefault == null && zdefault_is_initialized)) {
            return; 
        } 
        this.zdefault = newVal; 
        zdefault_is_modified = true; 
        zdefault_is_initialized = true; 
    }

    /**
     * Setter method for zdefault.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to zdefault
     */
    public void setZdefault(boolean newVal) {
        setZdefault(new Boolean(newVal));
    }

    /**
     * Determines if the zdefault has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isZdefaultModified() {
        return zdefault_is_modified; 
    }

    /**
     * Determines if the zdefault has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isZdefaultInitialized() {
        return zdefault_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: platetemplate.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return platetemplateid_is_modified || 
		name_is_modified || 
		w_is_modified || 
		h_is_modified || 
		labtestid_is_modified || 
		zdefault_is_modified || 
		regdate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        platetemplateid_is_modified = false;
        name_is_modified = false;
        w_is_modified = false;
        h_is_modified = false;
        labtestid_is_modified = false;
        zdefault_is_modified = false;
        regdate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(PlatetemplateBean bean) {
        setPlatetemplateid(bean.getPlatetemplateid());
        setName(bean.getName());
        setW(bean.getW());
        setH(bean.getH());
        setLabtestid(bean.getLabtestid());
        setZdefault(bean.getZdefault());
        setRegdate(bean.getRegdate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[platetemplate] "
                 + "\n - platetemplate.platetemplateid = " + (platetemplateid_is_initialized ? ("[" + (platetemplateid == null ? null : platetemplateid.toString()) + "]") : "not initialized") + ""
                 + "\n - platetemplate.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - platetemplate.w = " + (w_is_initialized ? ("[" + (w == null ? null : w.toString()) + "]") : "not initialized") + ""
                 + "\n - platetemplate.h = " + (h_is_initialized ? ("[" + (h == null ? null : h.toString()) + "]") : "not initialized") + ""
                 + "\n - platetemplate.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - platetemplate.zdefault = " + (zdefault_is_initialized ? ("[" + (zdefault == null ? null : zdefault.toString()) + "]") : "not initialized") + ""
                 + "\n - platetemplate.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
