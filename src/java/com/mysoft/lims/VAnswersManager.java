// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the v_answers table.
 */
public class VAnswersManager
// extends+ 

// extends- 
{

    /**
     * Column num of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NUM = 0;
    public static final int TYPE_NUM = Types.VARCHAR;
    public static final String NAME_NUM = "num";

    /**
     * Column appealid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_APPEALID = 1;
    public static final int TYPE_APPEALID = Types.BIGINT;
    public static final String NAME_APPEALID = "appealid";

    /**
     * Column actid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_ACTID = 2;
    public static final int TYPE_ACTID = Types.BIGINT;
    public static final String NAME_ACTID = "actid";

    /**
     * Column contractid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTID = 3;
    public static final int TYPE_CONTRACTID = Types.BIGINT;
    public static final String NAME_CONTRACTID = "contractid";

    /**
     * Column sampletypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SAMPLETYPEID = 4;
    public static final int TYPE_SAMPLETYPEID = Types.INTEGER;
    public static final String NAME_SAMPLETYPEID = "sampletypeid";

    /**
     * Column samplename of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SAMPLENAME = 5;
    public static final int TYPE_SAMPLENAME = Types.VARCHAR;
    public static final String NAME_SAMPLENAME = "samplename";

    /**
     * Column barcode of type Types.BIGINT mapped to Long.
     */
    public static final int ID_BARCODE = 6;
    public static final int TYPE_BARCODE = Types.BIGINT;
    public static final String NAME_BARCODE = "barcode";

    /**
     * Column sampleitemreseachid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_SAMPLEITEMRESEACHID = 7;
    public static final int TYPE_SAMPLEITEMRESEACHID = Types.BIGINT;
    public static final String NAME_SAMPLEITEMRESEACHID = "sampleitemreseachid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 8;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column resultdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_RESULTDATE = 9;
    public static final int TYPE_RESULTDATE = Types.TIMESTAMP;
    public static final String NAME_RESULTDATE = "resultdate";

    /**
     * Column plandate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_PLANDATE = 10;
    public static final int TYPE_PLANDATE = Types.TIMESTAMP;
    public static final String NAME_PLANDATE = "plandate";

    /**
     * Column note of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NOTE = 11;
    public static final int TYPE_NOTE = Types.VARCHAR;
    public static final String NAME_NOTE = "note";

    /**
     * Column confirmation1id of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONFIRMATION1ID = 12;
    public static final int TYPE_CONFIRMATION1ID = Types.BIGINT;
    public static final String NAME_CONFIRMATION1ID = "confirmation1id";

    /**
     * Column confirmation2id of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONFIRMATION2ID = 13;
    public static final int TYPE_CONFIRMATION2ID = Types.BIGINT;
    public static final String NAME_CONFIRMATION2ID = "confirmation2id";

    /**
     * Column confirmation3id of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONFIRMATION3ID = 14;
    public static final int TYPE_CONFIRMATION3ID = Types.BIGINT;
    public static final String NAME_CONFIRMATION3ID = "confirmation3id";

    /**
     * Column contractsampleitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTSAMPLEITEMID = 15;
    public static final int TYPE_CONTRACTSAMPLEITEMID = Types.BIGINT;
    public static final String NAME_CONTRACTSAMPLEITEMID = "contractsampleitemid";

    /**
     * Column labtestname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LABTESTNAME = 16;
    public static final int TYPE_LABTESTNAME = Types.VARCHAR;
    public static final String NAME_LABTESTNAME = "labtestname";

    /**
     * Column sname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SNAME = 17;
    public static final int TYPE_SNAME = Types.VARCHAR;
    public static final String NAME_SNAME = "sname";

    /**
     * Column institutionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INSTITUTIONID = 18;
    public static final int TYPE_INSTITUTIONID = Types.INTEGER;
    public static final String NAME_INSTITUTIONID = "institutionid";

    /**
     * Column labtestid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LABTESTID = 19;
    public static final int TYPE_LABTESTID = Types.INTEGER;
    public static final String NAME_LABTESTID = "labtestid";


    private static final String TABLE_NAME = "v_answers";

    /**
     * Create an array of type string containing all the fields of the v_answers table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "v_answers.num"
        ,"v_answers.appealid"
        ,"v_answers.actid"
        ,"v_answers.contractid"
        ,"v_answers.sampletypeid"
        ,"v_answers.samplename"
        ,"v_answers.barcode"
        ,"v_answers.sampleitemreseachid"
        ,"v_answers.regdate"
        ,"v_answers.resultdate"
        ,"v_answers.plandate"
        ,"v_answers.note"
        ,"v_answers.confirmation1id"
        ,"v_answers.confirmation2id"
        ,"v_answers.confirmation3id"
        ,"v_answers.contractsampleitemid"
        ,"v_answers.labtestname"
        ,"v_answers.sname"
        ,"v_answers.institutionid"
        ,"v_answers.labtestid"
    };

    /**
     * Field that contains the comma separated fields of the v_answers table.
     */
    private static final String ALL_FIELDS = "v_answers.num"
                            + ",v_answers.appealid"
                            + ",v_answers.actid"
                            + ",v_answers.contractid"
                            + ",v_answers.sampletypeid"
                            + ",v_answers.samplename"
                            + ",v_answers.barcode"
                            + ",v_answers.sampleitemreseachid"
                            + ",v_answers.regdate"
                            + ",v_answers.resultdate"
                            + ",v_answers.plandate"
                            + ",v_answers.note"
                            + ",v_answers.confirmation1id"
                            + ",v_answers.confirmation2id"
                            + ",v_answers.confirmation3id"
                            + ",v_answers.contractsampleitemid"
                            + ",v_answers.labtestname"
                            + ",v_answers.sname"
                            + ",v_answers.institutionid"
                            + ",v_answers.labtestid";

    private static VAnswersManager singleton = new VAnswersManager();

    /**
     * Get the VAnswersManager singleton.
     *
     * @return VAnswersManager 
     */
    synchronized public static VAnswersManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own VAnswersManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(VAnswersManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new VAnswersBean instance.
     *
     * @return the new VAnswersBean 
     */
    public VAnswersBean createVAnswersBean()
    {
        return new VAnswersBean();
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from v_answers.
     *
     * @return an array of VAnswersManager pObject
     */
    //38
    public VAnswersBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM v_answers",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of VAnswersBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting VAnswersBean table 
     */
    //49
    public VAnswersBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of VAnswersBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting VAnswersBean table 
     */
    //51
    public VAnswersBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from v_answers " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from v_answers ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (VAnswersBean[])v.toArray(new VAnswersBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from v_answers table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the v_answers table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM v_answers " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the VAnswersBean pObject into the database.
     *
     * @param pObject the VAnswersBean pObject to be saved
     */
    //100
    public VAnswersBean save(VAnswersBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into v_answers (");
    
                if (pObject.isNumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("num");
                    _dirtyCount++;
                }

                if (pObject.isAppealidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("appealid");
                    _dirtyCount++;
                }

                if (pObject.isActidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("actid");
                    _dirtyCount++;
                }

                if (pObject.isContractidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractid");
                    _dirtyCount++;
                }

                if (pObject.isSampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampletypeid");
                    _dirtyCount++;
                }

                if (pObject.isSamplenameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("samplename");
                    _dirtyCount++;
                }

                if (pObject.isBarcodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("barcode");
                    _dirtyCount++;
                }

                if (pObject.isSampleitemreseachidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampleitemreseachid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isResultdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("resultdate");
                    _dirtyCount++;
                }

                if (pObject.isPlandateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("plandate");
                    _dirtyCount++;
                }

                if (pObject.isNoteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("note");
                    _dirtyCount++;
                }

                if (pObject.isConfirmation1idModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirmation1id");
                    _dirtyCount++;
                }

                if (pObject.isConfirmation2idModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirmation2id");
                    _dirtyCount++;
                }

                if (pObject.isConfirmation3idModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirmation3id");
                    _dirtyCount++;
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractsampleitemid");
                    _dirtyCount++;
                }

                if (pObject.isLabtestnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestname");
                    _dirtyCount++;
                }

                if (pObject.isSnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sname");
                    _dirtyCount++;
                }

                if (pObject.isInstitutionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("institutionid");
                    _dirtyCount++;
                }

                if (pObject.isLabtestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isAppealidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }
    
                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isSamplenameModified()) {
                    ps.setString(++_dirtyCount, pObject.getSamplename());
                }
    
                if (pObject.isBarcodeModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getBarcode());
                }
    
                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isResultdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getResultdate());
                }
    
                if (pObject.isPlandateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getPlandate());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isConfirmation1idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
                }
    
                if (pObject.isConfirmation2idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
                }
    
                if (pObject.isConfirmation3idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isLabtestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLabtestname());
                }
    
                if (pObject.isSnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getSname());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE v_answers SET ");
                boolean useComma=false;

                if (pObject.isNumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("num").append("=?");
                }

                if (pObject.isAppealidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("appealid").append("=?");
                }

                if (pObject.isActidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("actid").append("=?");
                }

                if (pObject.isContractidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractid").append("=?");
                }

                if (pObject.isSampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampletypeid").append("=?");
                }

                if (pObject.isSamplenameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("samplename").append("=?");
                }

                if (pObject.isBarcodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("barcode").append("=?");
                }

                if (pObject.isSampleitemreseachidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampleitemreseachid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isResultdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("resultdate").append("=?");
                }

                if (pObject.isPlandateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("plandate").append("=?");
                }

                if (pObject.isNoteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("note").append("=?");
                }

                if (pObject.isConfirmation1idModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirmation1id").append("=?");
                }

                if (pObject.isConfirmation2idModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirmation2id").append("=?");
                }

                if (pObject.isConfirmation3idModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirmation3id").append("=?");
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractsampleitemid").append("=?");
                }

                if (pObject.isLabtestnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestname").append("=?");
                }

                if (pObject.isSnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sname").append("=?");
                }

                if (pObject.isInstitutionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("institutionid").append("=?");
                }

                if (pObject.isLabtestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestid").append("=?");
                }
                _sql.append("");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isNumModified()) {
                      ps.setString(++_dirtyCount, pObject.getNum());
                }

                if (pObject.isAppealidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }

                if (pObject.isActidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }

                if (pObject.isContractidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }

                if (pObject.isSampletypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }

                if (pObject.isSamplenameModified()) {
                      ps.setString(++_dirtyCount, pObject.getSamplename());
                }

                if (pObject.isBarcodeModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getBarcode());
                }

                if (pObject.isSampleitemreseachidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isResultdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getResultdate());
                }

                if (pObject.isPlandateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getPlandate());
                }

                if (pObject.isNoteModified()) {
                      ps.setString(++_dirtyCount, pObject.getNote());
                }

                if (pObject.isConfirmation1idModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
                }

                if (pObject.isConfirmation2idModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
                }

                if (pObject.isConfirmation3idModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
                }

                if (pObject.isContractsampleitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }

                if (pObject.isLabtestnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getLabtestname());
                }

                if (pObject.isSnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getSname());
                }

                if (pObject.isInstitutionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }

                if (pObject.isLabtestidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of VAnswersBean pObjects into the database.
     *
     * @param pObjects the VAnswersBean pObject table to be saved
     * @return the saved VAnswersBean array.
     */
    //65
    public VAnswersBean[] save(VAnswersBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique VAnswersBean pObject from a template one giving a c
     *
     * @param pObject the VAnswersBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public VAnswersBean loadUniqueUsingTemplate(VAnswersBean pObject) throws SQLException
    {
         VAnswersBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of VAnswersBean from a template one.
     *
     * @param pObject the VAnswersBean template to look for
     * @return all the VAnswersBean matching the template
     */
    //88
    public VAnswersBean[] loadUsingTemplate(VAnswersBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from v_answers WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isNumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
             }
    
             if (pObject.isAppealidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("appealid= ?");
             }
    
             if (pObject.isActidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
             }
    
             if (pObject.isContractidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
             }
    
             if (pObject.isSampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
             }
    
             if (pObject.isSamplenameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("samplename= ?");
             }
    
             if (pObject.isBarcodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("barcode= ?");
             }
    
             if (pObject.isSampleitemreseachidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isResultdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("resultdate= ?");
             }
    
             if (pObject.isPlandateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("plandate= ?");
             }
    
             if (pObject.isNoteModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
             }
    
             if (pObject.isConfirmation1idModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation1id= ?");
             }
    
             if (pObject.isConfirmation2idModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation2id= ?");
             }
    
             if (pObject.isConfirmation3idModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation3id= ?");
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
             }
    
             if (pObject.isLabtestnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestname= ?");
             }
    
             if (pObject.isSnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sname= ?");
             }
    
             if (pObject.isInstitutionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
             }
    
             if (pObject.isLabtestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isNumModified()) {
                 ps.setString(++_dirtyCount, pObject.getNum());
             }
    
             if (pObject.isAppealidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
             }
    
             if (pObject.isActidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
             }
    
             if (pObject.isContractidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
             }
    
             if (pObject.isSampletypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
             }
    
             if (pObject.isSamplenameModified()) {
                 ps.setString(++_dirtyCount, pObject.getSamplename());
             }
    
             if (pObject.isBarcodeModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getBarcode());
             }
    
             if (pObject.isSampleitemreseachidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isResultdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getResultdate());
             }
    
             if (pObject.isPlandateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getPlandate());
             }
    
             if (pObject.isNoteModified()) {
                 ps.setString(++_dirtyCount, pObject.getNote());
             }
    
             if (pObject.isConfirmation1idModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
             }
    
             if (pObject.isConfirmation2idModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
             }
    
             if (pObject.isConfirmation3idModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
             }
    
             if (pObject.isLabtestnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getLabtestname());
             }
    
             if (pObject.isSnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getSname());
             }
    
             if (pObject.isInstitutionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
             }
    
             if (pObject.isLabtestidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a VAnswersBean template.
     *
     * @param pObject the VAnswersBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(VAnswersBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM v_answers WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isNumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("num").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAppealidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("appealid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("actid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSamplenameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("samplename").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBarcodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("barcode").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampleitemreseachidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampleitemreseachid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResultdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("resultdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPlandateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("plandate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNoteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("note").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirmation1idInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirmation1id").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirmation2idInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirmation2id").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirmation3idInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirmation3id").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractsampleitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLabtestnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInstitutionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("institutionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLabtestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isNumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNum());
            }
    
            if (pObject.isAppealidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
            }
    
            if (pObject.isActidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
            }
    
            if (pObject.isContractidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
            }
    
            if (pObject.isSampletypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
            }
    
            if (pObject.isSamplenameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSamplename());
            }
    
            if (pObject.isBarcodeInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getBarcode());
            }
    
            if (pObject.isSampleitemreseachidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isResultdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getResultdate());
            }
    
            if (pObject.isPlandateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getPlandate());
            }
    
            if (pObject.isNoteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNote());
            }
    
            if (pObject.isConfirmation1idInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
            }
    
            if (pObject.isConfirmation2idInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
            }
    
            if (pObject.isConfirmation3idInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
            }
    
            if (pObject.isLabtestnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLabtestname());
            }
    
            if (pObject.isSnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSname());
            }
    
            if (pObject.isInstitutionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
            }
    
            if (pObject.isLabtestidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table v_answers.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table v_answers with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from v_answers " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table v_answers with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific VAnswersBean pObject given a c
     *
     * @param pObject the VAnswersBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(VAnswersBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from v_answers WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isNumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
                }
    
                if (pObject.isAppealidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("appealid= ?");
                }
    
                if (pObject.isActidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
                }
    
                if (pObject.isContractidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
                }
    
                if (pObject.isSampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
                }
    
                if (pObject.isSamplenameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("samplename= ?");
                }
    
                if (pObject.isBarcodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("barcode= ?");
                }
    
                if (pObject.isSampleitemreseachidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isResultdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("resultdate= ?");
                }
    
                if (pObject.isPlandateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("plandate= ?");
                }
    
                if (pObject.isNoteModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
                }
    
                if (pObject.isConfirmation1idModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation1id= ?");
                }
    
                if (pObject.isConfirmation2idModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation2id= ?");
                }
    
                if (pObject.isConfirmation3idModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation3id= ?");
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
                }
    
                if (pObject.isLabtestnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestname= ?");
                }
    
                if (pObject.isSnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sname= ?");
                }
    
                if (pObject.isInstitutionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
                }
    
                if (pObject.isLabtestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isAppealidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }
    
                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isSamplenameModified()) {
                    ps.setString(++_dirtyCount, pObject.getSamplename());
                }
    
                if (pObject.isBarcodeModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getBarcode());
                }
    
                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isResultdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getResultdate());
                }
    
                if (pObject.isPlandateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getPlandate());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isConfirmation1idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
                }
    
                if (pObject.isConfirmation2idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
                }
    
                if (pObject.isConfirmation3idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isLabtestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLabtestname());
                }
    
                if (pObject.isSnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getSname());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the v_answers on a VAnswersBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting VAnswersBean pObject
     */
    //72
    public VAnswersBean decodeRow(ResultSet rs) throws SQLException
    {
        VAnswersBean pObject = createVAnswersBean();
        pObject.setNum(rs.getString(1));
        pObject.setAppealid(Manager.getLong(rs, 2));
        pObject.setActid(Manager.getLong(rs, 3));
        pObject.setContractid(Manager.getLong(rs, 4));
        pObject.setSampletypeid(Manager.getInteger(rs, 5));
        pObject.setSamplename(rs.getString(6));
        pObject.setBarcode(Manager.getLong(rs, 7));
        pObject.setSampleitemreseachid(Manager.getLong(rs, 8));
        pObject.setRegdate(rs.getTimestamp(9));
        pObject.setResultdate(rs.getTimestamp(10));
        pObject.setPlandate(rs.getTimestamp(11));
        pObject.setNote(rs.getString(12));
        pObject.setConfirmation1id(Manager.getLong(rs, 13));
        pObject.setConfirmation2id(Manager.getLong(rs, 14));
        pObject.setConfirmation3id(Manager.getLong(rs, 15));
        pObject.setContractsampleitemid(Manager.getLong(rs, 16));
        pObject.setLabtestname(rs.getString(17));
        pObject.setSname(rs.getString(18));
        pObject.setInstitutionid(Manager.getInteger(rs, 19));
        pObject.setLabtestid(Manager.getInteger(rs, 20));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the v_answers table on a VAnswersBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting VAnswersBean pObject
     */
    //73
    public VAnswersBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        VAnswersBean pObject = createVAnswersBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_NUM:
                    ++pos;
                    pObject.setNum(rs.getString(pos));
                    break;
                case ID_APPEALID:
                    ++pos;
                    pObject.setAppealid(Manager.getLong(rs, pos));
                    break;
                case ID_ACTID:
                    ++pos;
                    pObject.setActid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTID:
                    ++pos;
                    pObject.setContractid(Manager.getLong(rs, pos));
                    break;
                case ID_SAMPLETYPEID:
                    ++pos;
                    pObject.setSampletypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_SAMPLENAME:
                    ++pos;
                    pObject.setSamplename(rs.getString(pos));
                    break;
                case ID_BARCODE:
                    ++pos;
                    pObject.setBarcode(Manager.getLong(rs, pos));
                    break;
                case ID_SAMPLEITEMRESEACHID:
                    ++pos;
                    pObject.setSampleitemreseachid(Manager.getLong(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_RESULTDATE:
                    ++pos;
                    pObject.setResultdate(rs.getTimestamp(pos));
                    break;
                case ID_PLANDATE:
                    ++pos;
                    pObject.setPlandate(rs.getTimestamp(pos));
                    break;
                case ID_NOTE:
                    ++pos;
                    pObject.setNote(rs.getString(pos));
                    break;
                case ID_CONFIRMATION1ID:
                    ++pos;
                    pObject.setConfirmation1id(Manager.getLong(rs, pos));
                    break;
                case ID_CONFIRMATION2ID:
                    ++pos;
                    pObject.setConfirmation2id(Manager.getLong(rs, pos));
                    break;
                case ID_CONFIRMATION3ID:
                    ++pos;
                    pObject.setConfirmation3id(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTSAMPLEITEMID:
                    ++pos;
                    pObject.setContractsampleitemid(Manager.getLong(rs, pos));
                    break;
                case ID_LABTESTNAME:
                    ++pos;
                    pObject.setLabtestname(rs.getString(pos));
                    break;
                case ID_SNAME:
                    ++pos;
                    pObject.setSname(rs.getString(pos));
                    break;
                case ID_INSTITUTIONID:
                    ++pos;
                    pObject.setInstitutionid(Manager.getInteger(rs, pos));
                    break;
                case ID_LABTESTID:
                    ++pos;
                    pObject.setLabtestid(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of VAnswersBean 
     */
    //41
    public VAnswersBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of VAnswersBean 
     */
    public VAnswersBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (VAnswersBean[])v.toArray(new VAnswersBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private VAnswersListener listener = null;

    /**
     * Registers a unique VAnswersListener listener.
     */
    //66.5
    public void registerListener(VAnswersListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the VAnswersBean pObject.
     *
     * @param pObject the VAnswersBean pObject to be saved
     */
    //67
    void beforeInsert(VAnswersBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the VAnswersBean pObject.
     *
     * @param pObject the VAnswersBean pObject to be saved
     */
    //68
    void afterInsert(VAnswersBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the VAnswersBean pObject.
     *
     * @param pObject the VAnswersBean pObject to be updated
     */
    //69
    void beforeUpdate(VAnswersBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the VAnswersBean pObject.
     *
     * @param pObject the VAnswersBean pObject to be updated
     */
    //70
    void afterUpdate(VAnswersBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
