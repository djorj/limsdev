// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ExtravalBean
// extends+ 

// extends- 
{
    private Long extraparamid;
    private boolean extraparamid_is_modified = false;
    private boolean extraparamid_is_initialized = false;
    
    private Long contractsampleid;
    private boolean contractsampleid_is_modified = false;
    private boolean contractsampleid_is_initialized = false;
    
    private Boolean bval;
    private boolean bval_is_modified = false;
    private boolean bval_is_initialized = false;
    
    private Double dval;
    private boolean dval_is_modified = false;
    private boolean dval_is_initialized = false;
    
    private String tval;
    private boolean tval_is_modified = false;
    private boolean tval_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ExtravalBean()
    {
    }
    
    /**
     * Getter method for extraparamid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraval.extraparamid
     * <li> foreign key: extraparam.extraparamid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of extraparamid
     */
    public Long getExtraparamid()
    {
        return extraparamid; 
    }

    /**
     * Setter method for extraparamid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to extraparamid
     */
    public void setExtraparamid(Long newVal) {
        if ((newVal != null && this.extraparamid != null && (newVal.compareTo(this.extraparamid) == 0)) || 
            (newVal == null && this.extraparamid == null && extraparamid_is_initialized)) {
            return; 
        } 
        this.extraparamid = newVal; 
        extraparamid_is_modified = true; 
        extraparamid_is_initialized = true; 
    }

    /**
     * Setter method for extraparamid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to extraparamid
     */
    public void setExtraparamid(long newVal) {
        setExtraparamid(new Long(newVal));
    }

    /**
     * Determines if the extraparamid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExtraparamidModified() {
        return extraparamid_is_modified; 
    }

    /**
     * Determines if the extraparamid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExtraparamidInitialized() {
        return extraparamid_is_initialized; 
    }

    /**
     * Getter method for contractsampleid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraval.contractsampleid
     * <li> foreign key: contractsampleitem.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleid
     */
    public Long getContractsampleid()
    {
        return contractsampleid; 
    }

    /**
     * Setter method for contractsampleid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleid
     */
    public void setContractsampleid(Long newVal) {
        if ((newVal != null && this.contractsampleid != null && (newVal.compareTo(this.contractsampleid) == 0)) || 
            (newVal == null && this.contractsampleid == null && contractsampleid_is_initialized)) {
            return; 
        } 
        this.contractsampleid = newVal; 
        contractsampleid_is_modified = true; 
        contractsampleid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleid
     */
    public void setContractsampleid(long newVal) {
        setContractsampleid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleidModified() {
        return contractsampleid_is_modified; 
    }

    /**
     * Determines if the contractsampleid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleidInitialized() {
        return contractsampleid_is_initialized; 
    }

    /**
     * Getter method for bval.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraval.bval
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of bval
     */
    public Boolean getBval()
    {
        return bval; 
    }

    /**
     * Setter method for bval.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to bval
     */
    public void setBval(Boolean newVal) {
        if ((newVal != null && this.bval != null && newVal.equals(this.bval)) || 
            (newVal == null && this.bval == null && bval_is_initialized)) {
            return; 
        } 
        this.bval = newVal; 
        bval_is_modified = true; 
        bval_is_initialized = true; 
    }

    /**
     * Setter method for bval.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bval
     */
    public void setBval(boolean newVal) {
        setBval(new Boolean(newVal));
    }

    /**
     * Determines if the bval has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBvalModified() {
        return bval_is_modified; 
    }

    /**
     * Determines if the bval has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBvalInitialized() {
        return bval_is_initialized; 
    }

    /**
     * Getter method for dval.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraval.dval
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of dval
     */
    public Double getDval()
    {
        return dval; 
    }

    /**
     * Setter method for dval.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to dval
     */
    public void setDval(Double newVal) {
        if ((newVal != null && this.dval != null && (newVal.compareTo(this.dval) == 0)) || 
            (newVal == null && this.dval == null && dval_is_initialized)) {
            return; 
        } 
        this.dval = newVal; 
        dval_is_modified = true; 
        dval_is_initialized = true; 
    }

    /**
     * Setter method for dval.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to dval
     */
    public void setDval(double newVal) {
        setDval(new Double(newVal));
    }

    /**
     * Determines if the dval has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDvalModified() {
        return dval_is_modified; 
    }

    /**
     * Determines if the dval has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDvalInitialized() {
        return dval_is_initialized; 
    }

    /**
     * Getter method for tval.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraval.tval
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of tval
     */
    public String getTval()
    {
        return tval; 
    }

    /**
     * Setter method for tval.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tval
     */
    public void setTval(String newVal) {
        if ((newVal != null && this.tval != null && (newVal.compareTo(this.tval) == 0)) || 
            (newVal == null && this.tval == null && tval_is_initialized)) {
            return; 
        } 
        this.tval = newVal; 
        tval_is_modified = true; 
        tval_is_initialized = true; 
    }

    /**
     * Determines if the tval has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTvalModified() {
        return tval_is_modified; 
    }

    /**
     * Determines if the tval has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTvalInitialized() {
        return tval_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return extraparamid_is_modified || 
		contractsampleid_is_modified || 
		bval_is_modified || 
		dval_is_modified || 
		tval_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        extraparamid_is_modified = false;
        contractsampleid_is_modified = false;
        bval_is_modified = false;
        dval_is_modified = false;
        tval_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ExtravalBean bean) {
        setExtraparamid(bean.getExtraparamid());
        setContractsampleid(bean.getContractsampleid());
        setBval(bean.getBval());
        setDval(bean.getDval());
        setTval(bean.getTval());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[extraval] "
                 + "\n - extraval.extraparamid = " + (extraparamid_is_initialized ? ("[" + (extraparamid == null ? null : extraparamid.toString()) + "]") : "not initialized") + ""
                 + "\n - extraval.contractsampleid = " + (contractsampleid_is_initialized ? ("[" + (contractsampleid == null ? null : contractsampleid.toString()) + "]") : "not initialized") + ""
                 + "\n - extraval.bval = " + (bval_is_initialized ? ("[" + (bval == null ? null : bval.toString()) + "]") : "not initialized") + ""
                 + "\n - extraval.dval = " + (dval_is_initialized ? ("[" + (dval == null ? null : dval.toString()) + "]") : "not initialized") + ""
                 + "\n - extraval.tval = " + (tval_is_initialized ? ("[" + (tval == null ? null : tval.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
