// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class LabtestBean
// extends+ 

// extends- 
{
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private String code;
    private boolean code_is_modified = false;
    private boolean code_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private String abbreviation;
    private boolean abbreviation_is_modified = false;
    private boolean abbreviation_is_initialized = false;
    
    private Boolean grp;
    private boolean grp_is_modified = false;
    private boolean grp_is_initialized = false;
    
    private Boolean ctr;
    private boolean ctr_is_modified = false;
    private boolean ctr_is_initialized = false;
    
    private Integer restypeid;
    private boolean restypeid_is_modified = false;
    private boolean restypeid_is_initialized = false;
    
    private Integer unitsid;
    private boolean unitsid_is_modified = false;
    private boolean unitsid_is_initialized = false;
    
    private Integer testcategoryid;
    private boolean testcategoryid_is_modified = false;
    private boolean testcategoryid_is_initialized = false;
    
    private String description;
    private boolean description_is_modified = false;
    private boolean description_is_initialized = false;
    
    private Integer companyid;
    private boolean companyid_is_modified = false;
    private boolean companyid_is_initialized = false;
    
    private Double normmin;
    private boolean normmin_is_modified = false;
    private boolean normmin_is_initialized = false;
    
    private Double normmax;
    private boolean normmax_is_modified = false;
    private boolean normmax_is_initialized = false;
    
    private String tnorm;
    private boolean tnorm_is_modified = false;
    private boolean tnorm_is_initialized = false;
    
    private String bnormval1;
    private boolean bnormval1_is_modified = false;
    private boolean bnormval1_is_initialized = false;
    
    private String bnormval2;
    private boolean bnormval2_is_modified = false;
    private boolean bnormval2_is_initialized = false;
    
    private String controlprocedure;
    private boolean controlprocedure_is_modified = false;
    private boolean controlprocedure_is_initialized = false;
    
    private String pos;
    private boolean pos_is_modified = false;
    private boolean pos_is_initialized = false;
    
    private String neg;
    private boolean neg_is_modified = false;
    private boolean neg_is_initialized = false;
    
    private String anslist;
    private boolean anslist_is_modified = false;
    private boolean anslist_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    LabtestBean()
    {
    }
    
    /**
     * Getter method for labtestid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for code.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.code
     * <li>comments: კოდი
     * <li>column size: 0
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of code
     */
    public String getCode()
    {
        return code; 
    }

    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    public void setCode(String newVal) {
        if ((newVal != null && this.code != null && (newVal.compareTo(this.code) == 0)) || 
            (newVal == null && this.code == null && code_is_initialized)) {
            return; 
        } 
        this.code = newVal; 
        code_is_modified = true; 
        code_is_initialized = true; 
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified() {
        return code_is_modified; 
    }

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized() {
        return code_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.name
     * <li>comments: დასახელება
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for abbreviation.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.abbreviation
     * <li>comments: აბრევიატურა
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of abbreviation
     */
    public String getAbbreviation()
    {
        return abbreviation; 
    }

    /**
     * Setter method for abbreviation.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to abbreviation
     */
    public void setAbbreviation(String newVal) {
        if ((newVal != null && this.abbreviation != null && (newVal.compareTo(this.abbreviation) == 0)) || 
            (newVal == null && this.abbreviation == null && abbreviation_is_initialized)) {
            return; 
        } 
        this.abbreviation = newVal; 
        abbreviation_is_modified = true; 
        abbreviation_is_initialized = true; 
    }

    /**
     * Determines if the abbreviation has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAbbreviationModified() {
        return abbreviation_is_modified; 
    }

    /**
     * Determines if the abbreviation has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAbbreviationInitialized() {
        return abbreviation_is_initialized; 
    }

    /**
     * Getter method for grp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.grp
     * <li>comments: ჯგუფია
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of grp
     */
    public Boolean getGrp()
    {
        return grp; 
    }

    /**
     * Setter method for grp.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to grp
     */
    public void setGrp(Boolean newVal) {
        if ((newVal != null && this.grp != null && newVal.equals(this.grp)) || 
            (newVal == null && this.grp == null && grp_is_initialized)) {
            return; 
        } 
        this.grp = newVal; 
        grp_is_modified = true; 
        grp_is_initialized = true; 
    }

    /**
     * Setter method for grp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to grp
     */
    public void setGrp(boolean newVal) {
        setGrp(new Boolean(newVal));
    }

    /**
     * Determines if the grp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGrpModified() {
        return grp_is_modified; 
    }

    /**
     * Determines if the grp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGrpInitialized() {
        return grp_is_initialized; 
    }

    /**
     * Getter method for ctr.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.ctr
     * <li>comments: ხარისხის კონტროლია
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of ctr
     */
    public Boolean getCtr()
    {
        return ctr; 
    }

    /**
     * Setter method for ctr.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to ctr
     */
    public void setCtr(Boolean newVal) {
        if ((newVal != null && this.ctr != null && newVal.equals(this.ctr)) || 
            (newVal == null && this.ctr == null && ctr_is_initialized)) {
            return; 
        } 
        this.ctr = newVal; 
        ctr_is_modified = true; 
        ctr_is_initialized = true; 
    }

    /**
     * Setter method for ctr.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ctr
     */
    public void setCtr(boolean newVal) {
        setCtr(new Boolean(newVal));
    }

    /**
     * Determines if the ctr has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCtrModified() {
        return ctr_is_modified; 
    }

    /**
     * Determines if the ctr has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCtrInitialized() {
        return ctr_is_initialized; 
    }

    /**
     * Getter method for restypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.restypeid
     * <li> foreign key: restype.restypeid
     * <li>comments: შედეგის ტიპი
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of restypeid
     */
    public Integer getRestypeid()
    {
        return restypeid; 
    }

    /**
     * Setter method for restypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to restypeid
     */
    public void setRestypeid(Integer newVal) {
        if ((newVal != null && this.restypeid != null && (newVal.compareTo(this.restypeid) == 0)) || 
            (newVal == null && this.restypeid == null && restypeid_is_initialized)) {
            return; 
        } 
        this.restypeid = newVal; 
        restypeid_is_modified = true; 
        restypeid_is_initialized = true; 
    }

    /**
     * Setter method for restypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to restypeid
     */
    public void setRestypeid(int newVal) {
        setRestypeid(new Integer(newVal));
    }

    /**
     * Determines if the restypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRestypeidModified() {
        return restypeid_is_modified; 
    }

    /**
     * Determines if the restypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRestypeidInitialized() {
        return restypeid_is_initialized; 
    }

    /**
     * Getter method for unitsid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.unitsid
     * <li> foreign key: units.unitsid
     * <li>comments: პასუხის ერთეული
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of unitsid
     */
    public Integer getUnitsid()
    {
        return unitsid; 
    }

    /**
     * Setter method for unitsid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to unitsid
     */
    public void setUnitsid(Integer newVal) {
        if ((newVal != null && this.unitsid != null && (newVal.compareTo(this.unitsid) == 0)) || 
            (newVal == null && this.unitsid == null && unitsid_is_initialized)) {
            return; 
        } 
        this.unitsid = newVal; 
        unitsid_is_modified = true; 
        unitsid_is_initialized = true; 
    }

    /**
     * Setter method for unitsid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to unitsid
     */
    public void setUnitsid(int newVal) {
        setUnitsid(new Integer(newVal));
    }

    /**
     * Determines if the unitsid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUnitsidModified() {
        return unitsid_is_modified; 
    }

    /**
     * Determines if the unitsid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUnitsidInitialized() {
        return unitsid_is_initialized; 
    }

    /**
     * Getter method for testcategoryid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.testcategoryid
     * <li> foreign key: testcategory.testcategoryid
     * <li>comments: კატეგორია
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of testcategoryid
     */
    public Integer getTestcategoryid()
    {
        return testcategoryid; 
    }

    /**
     * Setter method for testcategoryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to testcategoryid
     */
    public void setTestcategoryid(Integer newVal) {
        if ((newVal != null && this.testcategoryid != null && (newVal.compareTo(this.testcategoryid) == 0)) || 
            (newVal == null && this.testcategoryid == null && testcategoryid_is_initialized)) {
            return; 
        } 
        this.testcategoryid = newVal; 
        testcategoryid_is_modified = true; 
        testcategoryid_is_initialized = true; 
    }

    /**
     * Setter method for testcategoryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to testcategoryid
     */
    public void setTestcategoryid(int newVal) {
        setTestcategoryid(new Integer(newVal));
    }

    /**
     * Determines if the testcategoryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTestcategoryidModified() {
        return testcategoryid_is_modified; 
    }

    /**
     * Determines if the testcategoryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTestcategoryidInitialized() {
        return testcategoryid_is_initialized; 
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.description
     * <li>comments: აღწერა
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description; 
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal) {
        if ((newVal != null && this.description != null && (newVal.compareTo(this.description) == 0)) || 
            (newVal == null && this.description == null && description_is_initialized)) {
            return; 
        } 
        this.description = newVal; 
        description_is_modified = true; 
        description_is_initialized = true; 
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified() {
        return description_is_modified; 
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized() {
        return description_is_initialized; 
    }

    /**
     * Getter method for companyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.companyid
     * <li> foreign key: company.companyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of companyid
     */
    public Integer getCompanyid()
    {
        return companyid; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(Integer newVal) {
        if ((newVal != null && this.companyid != null && (newVal.compareTo(this.companyid) == 0)) || 
            (newVal == null && this.companyid == null && companyid_is_initialized)) {
            return; 
        } 
        this.companyid = newVal; 
        companyid_is_modified = true; 
        companyid_is_initialized = true; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(int newVal) {
        setCompanyid(new Integer(newVal));
    }

    /**
     * Determines if the companyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyidModified() {
        return companyid_is_modified; 
    }

    /**
     * Determines if the companyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyidInitialized() {
        return companyid_is_initialized; 
    }

    /**
     * Getter method for normmin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.normmin
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of normmin
     */
    public Double getNormmin()
    {
        return normmin; 
    }

    /**
     * Setter method for normmin.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to normmin
     */
    public void setNormmin(Double newVal) {
        if ((newVal != null && this.normmin != null && (newVal.compareTo(this.normmin) == 0)) || 
            (newVal == null && this.normmin == null && normmin_is_initialized)) {
            return; 
        } 
        this.normmin = newVal; 
        normmin_is_modified = true; 
        normmin_is_initialized = true; 
    }

    /**
     * Setter method for normmin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to normmin
     */
    public void setNormmin(double newVal) {
        setNormmin(new Double(newVal));
    }

    /**
     * Determines if the normmin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNormminModified() {
        return normmin_is_modified; 
    }

    /**
     * Determines if the normmin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNormminInitialized() {
        return normmin_is_initialized; 
    }

    /**
     * Getter method for normmax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.normmax
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of normmax
     */
    public Double getNormmax()
    {
        return normmax; 
    }

    /**
     * Setter method for normmax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to normmax
     */
    public void setNormmax(Double newVal) {
        if ((newVal != null && this.normmax != null && (newVal.compareTo(this.normmax) == 0)) || 
            (newVal == null && this.normmax == null && normmax_is_initialized)) {
            return; 
        } 
        this.normmax = newVal; 
        normmax_is_modified = true; 
        normmax_is_initialized = true; 
    }

    /**
     * Setter method for normmax.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to normmax
     */
    public void setNormmax(double newVal) {
        setNormmax(new Double(newVal));
    }

    /**
     * Determines if the normmax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNormmaxModified() {
        return normmax_is_modified; 
    }

    /**
     * Determines if the normmax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNormmaxInitialized() {
        return normmax_is_initialized; 
    }

    /**
     * Getter method for tnorm.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.tnorm
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of tnorm
     */
    public String getTnorm()
    {
        return tnorm; 
    }

    /**
     * Setter method for tnorm.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tnorm
     */
    public void setTnorm(String newVal) {
        if ((newVal != null && this.tnorm != null && (newVal.compareTo(this.tnorm) == 0)) || 
            (newVal == null && this.tnorm == null && tnorm_is_initialized)) {
            return; 
        } 
        this.tnorm = newVal; 
        tnorm_is_modified = true; 
        tnorm_is_initialized = true; 
    }

    /**
     * Determines if the tnorm has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTnormModified() {
        return tnorm_is_modified; 
    }

    /**
     * Determines if the tnorm has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTnormInitialized() {
        return tnorm_is_initialized; 
    }

    /**
     * Getter method for bnormval1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.bnormval1
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of bnormval1
     */
    public String getBnormval1()
    {
        return bnormval1; 
    }

    /**
     * Setter method for bnormval1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bnormval1
     */
    public void setBnormval1(String newVal) {
        if ((newVal != null && this.bnormval1 != null && (newVal.compareTo(this.bnormval1) == 0)) || 
            (newVal == null && this.bnormval1 == null && bnormval1_is_initialized)) {
            return; 
        } 
        this.bnormval1 = newVal; 
        bnormval1_is_modified = true; 
        bnormval1_is_initialized = true; 
    }

    /**
     * Determines if the bnormval1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBnormval1Modified() {
        return bnormval1_is_modified; 
    }

    /**
     * Determines if the bnormval1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBnormval1Initialized() {
        return bnormval1_is_initialized; 
    }

    /**
     * Getter method for bnormval2.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.bnormval2
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of bnormval2
     */
    public String getBnormval2()
    {
        return bnormval2; 
    }

    /**
     * Setter method for bnormval2.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bnormval2
     */
    public void setBnormval2(String newVal) {
        if ((newVal != null && this.bnormval2 != null && (newVal.compareTo(this.bnormval2) == 0)) || 
            (newVal == null && this.bnormval2 == null && bnormval2_is_initialized)) {
            return; 
        } 
        this.bnormval2 = newVal; 
        bnormval2_is_modified = true; 
        bnormval2_is_initialized = true; 
    }

    /**
     * Determines if the bnormval2 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBnormval2Modified() {
        return bnormval2_is_modified; 
    }

    /**
     * Determines if the bnormval2 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBnormval2Initialized() {
        return bnormval2_is_initialized; 
    }

    /**
     * Getter method for controlprocedure.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.controlprocedure
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of controlprocedure
     */
    public String getControlprocedure()
    {
        return controlprocedure; 
    }

    /**
     * Setter method for controlprocedure.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to controlprocedure
     */
    public void setControlprocedure(String newVal) {
        if ((newVal != null && this.controlprocedure != null && (newVal.compareTo(this.controlprocedure) == 0)) || 
            (newVal == null && this.controlprocedure == null && controlprocedure_is_initialized)) {
            return; 
        } 
        this.controlprocedure = newVal; 
        controlprocedure_is_modified = true; 
        controlprocedure_is_initialized = true; 
    }

    /**
     * Determines if the controlprocedure has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isControlprocedureModified() {
        return controlprocedure_is_modified; 
    }

    /**
     * Determines if the controlprocedure has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isControlprocedureInitialized() {
        return controlprocedure_is_initialized; 
    }

    /**
     * Getter method for pos.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.pos
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of pos
     */
    public String getPos()
    {
        return pos; 
    }

    /**
     * Setter method for pos.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to pos
     */
    public void setPos(String newVal) {
        if ((newVal != null && this.pos != null && (newVal.compareTo(this.pos) == 0)) || 
            (newVal == null && this.pos == null && pos_is_initialized)) {
            return; 
        } 
        this.pos = newVal; 
        pos_is_modified = true; 
        pos_is_initialized = true; 
    }

    /**
     * Determines if the pos has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPosModified() {
        return pos_is_modified; 
    }

    /**
     * Determines if the pos has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPosInitialized() {
        return pos_is_initialized; 
    }

    /**
     * Getter method for neg.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.neg
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of neg
     */
    public String getNeg()
    {
        return neg; 
    }

    /**
     * Setter method for neg.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to neg
     */
    public void setNeg(String newVal) {
        if ((newVal != null && this.neg != null && (newVal.compareTo(this.neg) == 0)) || 
            (newVal == null && this.neg == null && neg_is_initialized)) {
            return; 
        } 
        this.neg = newVal; 
        neg_is_modified = true; 
        neg_is_initialized = true; 
    }

    /**
     * Determines if the neg has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNegModified() {
        return neg_is_modified; 
    }

    /**
     * Determines if the neg has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNegInitialized() {
        return neg_is_initialized; 
    }

    /**
     * Getter method for anslist.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: labtest.anslist
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of anslist
     */
    public String getAnslist()
    {
        return anslist; 
    }

    /**
     * Setter method for anslist.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to anslist
     */
    public void setAnslist(String newVal) {
        if ((newVal != null && this.anslist != null && (newVal.compareTo(this.anslist) == 0)) || 
            (newVal == null && this.anslist == null && anslist_is_initialized)) {
            return; 
        } 
        this.anslist = newVal; 
        anslist_is_modified = true; 
        anslist_is_initialized = true; 
    }

    /**
     * Determines if the anslist has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAnslistModified() {
        return anslist_is_modified; 
    }

    /**
     * Determines if the anslist has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAnslistInitialized() {
        return anslist_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return labtestid_is_modified || 
		code_is_modified || 
		name_is_modified || 
		abbreviation_is_modified || 
		grp_is_modified || 
		ctr_is_modified || 
		restypeid_is_modified || 
		unitsid_is_modified || 
		testcategoryid_is_modified || 
		description_is_modified || 
		companyid_is_modified || 
		normmin_is_modified || 
		normmax_is_modified || 
		tnorm_is_modified || 
		bnormval1_is_modified || 
		bnormval2_is_modified || 
		controlprocedure_is_modified || 
		pos_is_modified || 
		neg_is_modified || 
		anslist_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        labtestid_is_modified = false;
        code_is_modified = false;
        name_is_modified = false;
        abbreviation_is_modified = false;
        grp_is_modified = false;
        ctr_is_modified = false;
        restypeid_is_modified = false;
        unitsid_is_modified = false;
        testcategoryid_is_modified = false;
        description_is_modified = false;
        companyid_is_modified = false;
        normmin_is_modified = false;
        normmax_is_modified = false;
        tnorm_is_modified = false;
        bnormval1_is_modified = false;
        bnormval2_is_modified = false;
        controlprocedure_is_modified = false;
        pos_is_modified = false;
        neg_is_modified = false;
        anslist_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(LabtestBean bean) {
        setLabtestid(bean.getLabtestid());
        setCode(bean.getCode());
        setName(bean.getName());
        setAbbreviation(bean.getAbbreviation());
        setGrp(bean.getGrp());
        setCtr(bean.getCtr());
        setRestypeid(bean.getRestypeid());
        setUnitsid(bean.getUnitsid());
        setTestcategoryid(bean.getTestcategoryid());
        setDescription(bean.getDescription());
        setCompanyid(bean.getCompanyid());
        setNormmin(bean.getNormmin());
        setNormmax(bean.getNormmax());
        setTnorm(bean.getTnorm());
        setBnormval1(bean.getBnormval1());
        setBnormval2(bean.getBnormval2());
        setControlprocedure(bean.getControlprocedure());
        setPos(bean.getPos());
        setNeg(bean.getNeg());
        setAnslist(bean.getAnslist());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[labtest] "
                 + "\n - labtest.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.code = " + (code_is_initialized ? ("[" + (code == null ? null : code.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.abbreviation = " + (abbreviation_is_initialized ? ("[" + (abbreviation == null ? null : abbreviation.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.grp = " + (grp_is_initialized ? ("[" + (grp == null ? null : grp.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.ctr = " + (ctr_is_initialized ? ("[" + (ctr == null ? null : ctr.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.restypeid = " + (restypeid_is_initialized ? ("[" + (restypeid == null ? null : restypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.unitsid = " + (unitsid_is_initialized ? ("[" + (unitsid == null ? null : unitsid.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.testcategoryid = " + (testcategoryid_is_initialized ? ("[" + (testcategoryid == null ? null : testcategoryid.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.description = " + (description_is_initialized ? ("[" + (description == null ? null : description.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.companyid = " + (companyid_is_initialized ? ("[" + (companyid == null ? null : companyid.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.normmin = " + (normmin_is_initialized ? ("[" + (normmin == null ? null : normmin.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.normmax = " + (normmax_is_initialized ? ("[" + (normmax == null ? null : normmax.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.tnorm = " + (tnorm_is_initialized ? ("[" + (tnorm == null ? null : tnorm.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.bnormval1 = " + (bnormval1_is_initialized ? ("[" + (bnormval1 == null ? null : bnormval1.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.bnormval2 = " + (bnormval2_is_initialized ? ("[" + (bnormval2 == null ? null : bnormval2.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.controlprocedure = " + (controlprocedure_is_initialized ? ("[" + (controlprocedure == null ? null : controlprocedure.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.pos = " + (pos_is_initialized ? ("[" + (pos == null ? null : pos.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.neg = " + (neg_is_initialized ? ("[" + (neg == null ? null : neg.toString()) + "]") : "not initialized") + ""
                 + "\n - labtest.anslist = " + (anslist_is_initialized ? ("[" + (anslist == null ? null : anslist.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
