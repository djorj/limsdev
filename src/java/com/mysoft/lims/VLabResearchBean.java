// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class VLabResearchBean
// extends+ 

// extends- 
{
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private String labtestname;
    private boolean labtestname_is_modified = false;
    private boolean labtestname_is_initialized = false;
    
    private Long contractsampleitemid;
    private boolean contractsampleitemid_is_modified = false;
    private boolean contractsampleitemid_is_initialized = false;
    
    private java.sql.Timestamp confirm1date;
    private boolean confirm1date_is_modified = false;
    private boolean confirm1date_is_initialized = false;
    
    private Integer confirm1byid;
    private boolean confirm1byid_is_modified = false;
    private boolean confirm1byid_is_initialized = false;
    
    private Boolean confirm1status;
    private boolean confirm1status_is_modified = false;
    private boolean confirm1status_is_initialized = false;
    
    private String confirm1person;
    private boolean confirm1person_is_modified = false;
    private boolean confirm1person_is_initialized = false;
    
    private java.sql.Timestamp confirm2date;
    private boolean confirm2date_is_modified = false;
    private boolean confirm2date_is_initialized = false;
    
    private Integer confirm2byid;
    private boolean confirm2byid_is_modified = false;
    private boolean confirm2byid_is_initialized = false;
    
    private Boolean confirm2status;
    private boolean confirm2status_is_modified = false;
    private boolean confirm2status_is_initialized = false;
    
    private String confirm2person;
    private boolean confirm2person_is_modified = false;
    private boolean confirm2person_is_initialized = false;
    
    private java.sql.Timestamp confirm3date;
    private boolean confirm3date_is_modified = false;
    private boolean confirm3date_is_initialized = false;
    
    private Integer confirm3byid;
    private boolean confirm3byid_is_modified = false;
    private boolean confirm3byid_is_initialized = false;
    
    private Boolean confirm3status;
    private boolean confirm3status_is_modified = false;
    private boolean confirm3status_is_initialized = false;
    
    private String confirm3person;
    private boolean confirm3person_is_modified = false;
    private boolean confirm3person_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VLabResearchBean()
    {
    }
    
    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for labtestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.labtestname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of labtestname
     */
    public String getLabtestname()
    {
        return labtestname; 
    }

    /**
     * Setter method for labtestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestname
     */
    public void setLabtestname(String newVal) {
        if ((newVal != null && this.labtestname != null && (newVal.compareTo(this.labtestname) == 0)) || 
            (newVal == null && this.labtestname == null && labtestname_is_initialized)) {
            return; 
        } 
        this.labtestname = newVal; 
        labtestname_is_modified = true; 
        labtestname_is_initialized = true; 
    }

    /**
     * Determines if the labtestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestnameModified() {
        return labtestname_is_modified; 
    }

    /**
     * Determines if the labtestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestnameInitialized() {
        return labtestname_is_initialized; 
    }

    /**
     * Getter method for contractsampleitemid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleitemid
     */
    public Long getContractsampleitemid()
    {
        return contractsampleitemid; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(Long newVal) {
        if ((newVal != null && this.contractsampleitemid != null && (newVal.compareTo(this.contractsampleitemid) == 0)) || 
            (newVal == null && this.contractsampleitemid == null && contractsampleitemid_is_initialized)) {
            return; 
        } 
        this.contractsampleitemid = newVal; 
        contractsampleitemid_is_modified = true; 
        contractsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(long newVal) {
        setContractsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleitemidModified() {
        return contractsampleitemid_is_modified; 
    }

    /**
     * Determines if the contractsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleitemidInitialized() {
        return contractsampleitemid_is_initialized; 
    }

    /**
     * Getter method for confirm1date.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm1date
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of confirm1date
     */
    public java.sql.Timestamp getConfirm1date()
    {
        return confirm1date; 
    }

    /**
     * Setter method for confirm1date.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm1date
     */
    public void setConfirm1date(java.sql.Timestamp newVal) {
        if ((newVal != null && this.confirm1date != null && (newVal.compareTo(this.confirm1date) == 0)) || 
            (newVal == null && this.confirm1date == null && confirm1date_is_initialized)) {
            return; 
        } 
        this.confirm1date = newVal; 
        confirm1date_is_modified = true; 
        confirm1date_is_initialized = true; 
    }

    /**
     * Setter method for confirm1date.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm1date
     */
    public void setConfirm1date(long newVal) {
        setConfirm1date(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the confirm1date has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm1dateModified() {
        return confirm1date_is_modified; 
    }

    /**
     * Determines if the confirm1date has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm1dateInitialized() {
        return confirm1date_is_initialized; 
    }

    /**
     * Getter method for confirm1byid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm1byid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of confirm1byid
     */
    public Integer getConfirm1byid()
    {
        return confirm1byid; 
    }

    /**
     * Setter method for confirm1byid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm1byid
     */
    public void setConfirm1byid(Integer newVal) {
        if ((newVal != null && this.confirm1byid != null && (newVal.compareTo(this.confirm1byid) == 0)) || 
            (newVal == null && this.confirm1byid == null && confirm1byid_is_initialized)) {
            return; 
        } 
        this.confirm1byid = newVal; 
        confirm1byid_is_modified = true; 
        confirm1byid_is_initialized = true; 
    }

    /**
     * Setter method for confirm1byid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm1byid
     */
    public void setConfirm1byid(int newVal) {
        setConfirm1byid(new Integer(newVal));
    }

    /**
     * Determines if the confirm1byid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm1byidModified() {
        return confirm1byid_is_modified; 
    }

    /**
     * Determines if the confirm1byid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm1byidInitialized() {
        return confirm1byid_is_initialized; 
    }

    /**
     * Getter method for confirm1status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm1status
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of confirm1status
     */
    public Boolean getConfirm1status()
    {
        return confirm1status; 
    }

    /**
     * Setter method for confirm1status.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to confirm1status
     */
    public void setConfirm1status(Boolean newVal) {
        if ((newVal != null && this.confirm1status != null && newVal.equals(this.confirm1status)) || 
            (newVal == null && this.confirm1status == null && confirm1status_is_initialized)) {
            return; 
        } 
        this.confirm1status = newVal; 
        confirm1status_is_modified = true; 
        confirm1status_is_initialized = true; 
    }

    /**
     * Setter method for confirm1status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm1status
     */
    public void setConfirm1status(boolean newVal) {
        setConfirm1status(new Boolean(newVal));
    }

    /**
     * Determines if the confirm1status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm1statusModified() {
        return confirm1status_is_modified; 
    }

    /**
     * Determines if the confirm1status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm1statusInitialized() {
        return confirm1status_is_initialized; 
    }

    /**
     * Getter method for confirm1person.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm1person
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of confirm1person
     */
    public String getConfirm1person()
    {
        return confirm1person; 
    }

    /**
     * Setter method for confirm1person.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm1person
     */
    public void setConfirm1person(String newVal) {
        if ((newVal != null && this.confirm1person != null && (newVal.compareTo(this.confirm1person) == 0)) || 
            (newVal == null && this.confirm1person == null && confirm1person_is_initialized)) {
            return; 
        } 
        this.confirm1person = newVal; 
        confirm1person_is_modified = true; 
        confirm1person_is_initialized = true; 
    }

    /**
     * Determines if the confirm1person has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm1personModified() {
        return confirm1person_is_modified; 
    }

    /**
     * Determines if the confirm1person has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm1personInitialized() {
        return confirm1person_is_initialized; 
    }

    /**
     * Getter method for confirm2date.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm2date
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of confirm2date
     */
    public java.sql.Timestamp getConfirm2date()
    {
        return confirm2date; 
    }

    /**
     * Setter method for confirm2date.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm2date
     */
    public void setConfirm2date(java.sql.Timestamp newVal) {
        if ((newVal != null && this.confirm2date != null && (newVal.compareTo(this.confirm2date) == 0)) || 
            (newVal == null && this.confirm2date == null && confirm2date_is_initialized)) {
            return; 
        } 
        this.confirm2date = newVal; 
        confirm2date_is_modified = true; 
        confirm2date_is_initialized = true; 
    }

    /**
     * Setter method for confirm2date.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm2date
     */
    public void setConfirm2date(long newVal) {
        setConfirm2date(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the confirm2date has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm2dateModified() {
        return confirm2date_is_modified; 
    }

    /**
     * Determines if the confirm2date has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm2dateInitialized() {
        return confirm2date_is_initialized; 
    }

    /**
     * Getter method for confirm2byid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm2byid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of confirm2byid
     */
    public Integer getConfirm2byid()
    {
        return confirm2byid; 
    }

    /**
     * Setter method for confirm2byid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm2byid
     */
    public void setConfirm2byid(Integer newVal) {
        if ((newVal != null && this.confirm2byid != null && (newVal.compareTo(this.confirm2byid) == 0)) || 
            (newVal == null && this.confirm2byid == null && confirm2byid_is_initialized)) {
            return; 
        } 
        this.confirm2byid = newVal; 
        confirm2byid_is_modified = true; 
        confirm2byid_is_initialized = true; 
    }

    /**
     * Setter method for confirm2byid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm2byid
     */
    public void setConfirm2byid(int newVal) {
        setConfirm2byid(new Integer(newVal));
    }

    /**
     * Determines if the confirm2byid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm2byidModified() {
        return confirm2byid_is_modified; 
    }

    /**
     * Determines if the confirm2byid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm2byidInitialized() {
        return confirm2byid_is_initialized; 
    }

    /**
     * Getter method for confirm2status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm2status
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of confirm2status
     */
    public Boolean getConfirm2status()
    {
        return confirm2status; 
    }

    /**
     * Setter method for confirm2status.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to confirm2status
     */
    public void setConfirm2status(Boolean newVal) {
        if ((newVal != null && this.confirm2status != null && newVal.equals(this.confirm2status)) || 
            (newVal == null && this.confirm2status == null && confirm2status_is_initialized)) {
            return; 
        } 
        this.confirm2status = newVal; 
        confirm2status_is_modified = true; 
        confirm2status_is_initialized = true; 
    }

    /**
     * Setter method for confirm2status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm2status
     */
    public void setConfirm2status(boolean newVal) {
        setConfirm2status(new Boolean(newVal));
    }

    /**
     * Determines if the confirm2status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm2statusModified() {
        return confirm2status_is_modified; 
    }

    /**
     * Determines if the confirm2status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm2statusInitialized() {
        return confirm2status_is_initialized; 
    }

    /**
     * Getter method for confirm2person.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm2person
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of confirm2person
     */
    public String getConfirm2person()
    {
        return confirm2person; 
    }

    /**
     * Setter method for confirm2person.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm2person
     */
    public void setConfirm2person(String newVal) {
        if ((newVal != null && this.confirm2person != null && (newVal.compareTo(this.confirm2person) == 0)) || 
            (newVal == null && this.confirm2person == null && confirm2person_is_initialized)) {
            return; 
        } 
        this.confirm2person = newVal; 
        confirm2person_is_modified = true; 
        confirm2person_is_initialized = true; 
    }

    /**
     * Determines if the confirm2person has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm2personModified() {
        return confirm2person_is_modified; 
    }

    /**
     * Determines if the confirm2person has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm2personInitialized() {
        return confirm2person_is_initialized; 
    }

    /**
     * Getter method for confirm3date.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm3date
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of confirm3date
     */
    public java.sql.Timestamp getConfirm3date()
    {
        return confirm3date; 
    }

    /**
     * Setter method for confirm3date.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm3date
     */
    public void setConfirm3date(java.sql.Timestamp newVal) {
        if ((newVal != null && this.confirm3date != null && (newVal.compareTo(this.confirm3date) == 0)) || 
            (newVal == null && this.confirm3date == null && confirm3date_is_initialized)) {
            return; 
        } 
        this.confirm3date = newVal; 
        confirm3date_is_modified = true; 
        confirm3date_is_initialized = true; 
    }

    /**
     * Setter method for confirm3date.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm3date
     */
    public void setConfirm3date(long newVal) {
        setConfirm3date(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the confirm3date has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm3dateModified() {
        return confirm3date_is_modified; 
    }

    /**
     * Determines if the confirm3date has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm3dateInitialized() {
        return confirm3date_is_initialized; 
    }

    /**
     * Getter method for confirm3byid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm3byid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of confirm3byid
     */
    public Integer getConfirm3byid()
    {
        return confirm3byid; 
    }

    /**
     * Setter method for confirm3byid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm3byid
     */
    public void setConfirm3byid(Integer newVal) {
        if ((newVal != null && this.confirm3byid != null && (newVal.compareTo(this.confirm3byid) == 0)) || 
            (newVal == null && this.confirm3byid == null && confirm3byid_is_initialized)) {
            return; 
        } 
        this.confirm3byid = newVal; 
        confirm3byid_is_modified = true; 
        confirm3byid_is_initialized = true; 
    }

    /**
     * Setter method for confirm3byid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm3byid
     */
    public void setConfirm3byid(int newVal) {
        setConfirm3byid(new Integer(newVal));
    }

    /**
     * Determines if the confirm3byid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm3byidModified() {
        return confirm3byid_is_modified; 
    }

    /**
     * Determines if the confirm3byid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm3byidInitialized() {
        return confirm3byid_is_initialized; 
    }

    /**
     * Getter method for confirm3status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm3status
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of confirm3status
     */
    public Boolean getConfirm3status()
    {
        return confirm3status; 
    }

    /**
     * Setter method for confirm3status.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to confirm3status
     */
    public void setConfirm3status(Boolean newVal) {
        if ((newVal != null && this.confirm3status != null && newVal.equals(this.confirm3status)) || 
            (newVal == null && this.confirm3status == null && confirm3status_is_initialized)) {
            return; 
        } 
        this.confirm3status = newVal; 
        confirm3status_is_modified = true; 
        confirm3status_is_initialized = true; 
    }

    /**
     * Setter method for confirm3status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirm3status
     */
    public void setConfirm3status(boolean newVal) {
        setConfirm3status(new Boolean(newVal));
    }

    /**
     * Determines if the confirm3status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm3statusModified() {
        return confirm3status_is_modified; 
    }

    /**
     * Determines if the confirm3status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm3statusInitialized() {
        return confirm3status_is_initialized; 
    }

    /**
     * Getter method for confirm3person.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_research.confirm3person
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of confirm3person
     */
    public String getConfirm3person()
    {
        return confirm3person; 
    }

    /**
     * Setter method for confirm3person.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirm3person
     */
    public void setConfirm3person(String newVal) {
        if ((newVal != null && this.confirm3person != null && (newVal.compareTo(this.confirm3person) == 0)) || 
            (newVal == null && this.confirm3person == null && confirm3person_is_initialized)) {
            return; 
        } 
        this.confirm3person = newVal; 
        confirm3person_is_modified = true; 
        confirm3person_is_initialized = true; 
    }

    /**
     * Determines if the confirm3person has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirm3personModified() {
        return confirm3person_is_modified; 
    }

    /**
     * Determines if the confirm3person has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirm3personInitialized() {
        return confirm3person_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return labtestid_is_modified || 
		labtestname_is_modified || 
		contractsampleitemid_is_modified || 
		confirm1date_is_modified || 
		confirm1byid_is_modified || 
		confirm1status_is_modified || 
		confirm1person_is_modified || 
		confirm2date_is_modified || 
		confirm2byid_is_modified || 
		confirm2status_is_modified || 
		confirm2person_is_modified || 
		confirm3date_is_modified || 
		confirm3byid_is_modified || 
		confirm3status_is_modified || 
		confirm3person_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        labtestid_is_modified = false;
        labtestname_is_modified = false;
        contractsampleitemid_is_modified = false;
        confirm1date_is_modified = false;
        confirm1byid_is_modified = false;
        confirm1status_is_modified = false;
        confirm1person_is_modified = false;
        confirm2date_is_modified = false;
        confirm2byid_is_modified = false;
        confirm2status_is_modified = false;
        confirm2person_is_modified = false;
        confirm3date_is_modified = false;
        confirm3byid_is_modified = false;
        confirm3status_is_modified = false;
        confirm3person_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VLabResearchBean bean) {
        setLabtestid(bean.getLabtestid());
        setLabtestname(bean.getLabtestname());
        setContractsampleitemid(bean.getContractsampleitemid());
        setConfirm1date(bean.getConfirm1date());
        setConfirm1byid(bean.getConfirm1byid());
        setConfirm1status(bean.getConfirm1status());
        setConfirm1person(bean.getConfirm1person());
        setConfirm2date(bean.getConfirm2date());
        setConfirm2byid(bean.getConfirm2byid());
        setConfirm2status(bean.getConfirm2status());
        setConfirm2person(bean.getConfirm2person());
        setConfirm3date(bean.getConfirm3date());
        setConfirm3byid(bean.getConfirm3byid());
        setConfirm3status(bean.getConfirm3status());
        setConfirm3person(bean.getConfirm3person());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_lab_research] "
                 + "\n - v_lab_research.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.labtestname = " + (labtestname_is_initialized ? ("[" + (labtestname == null ? null : labtestname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.contractsampleitemid = " + (contractsampleitemid_is_initialized ? ("[" + (contractsampleitemid == null ? null : contractsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm1date = " + (confirm1date_is_initialized ? ("[" + (confirm1date == null ? null : confirm1date.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm1byid = " + (confirm1byid_is_initialized ? ("[" + (confirm1byid == null ? null : confirm1byid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm1status = " + (confirm1status_is_initialized ? ("[" + (confirm1status == null ? null : confirm1status.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm1person = " + (confirm1person_is_initialized ? ("[" + (confirm1person == null ? null : confirm1person.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm2date = " + (confirm2date_is_initialized ? ("[" + (confirm2date == null ? null : confirm2date.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm2byid = " + (confirm2byid_is_initialized ? ("[" + (confirm2byid == null ? null : confirm2byid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm2status = " + (confirm2status_is_initialized ? ("[" + (confirm2status == null ? null : confirm2status.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm2person = " + (confirm2person_is_initialized ? ("[" + (confirm2person == null ? null : confirm2person.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm3date = " + (confirm3date_is_initialized ? ("[" + (confirm3date == null ? null : confirm3date.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm3byid = " + (confirm3byid_is_initialized ? ("[" + (confirm3byid == null ? null : confirm3byid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm3status = " + (confirm3status_is_initialized ? ("[" + (confirm3status == null ? null : confirm3status.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_research.confirm3person = " + (confirm3person_is_initialized ? ("[" + (confirm3person == null ? null : confirm3person.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
