// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the PlatemapBean objects.
 */
public class PlatemapComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for PlatemapComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PlatemapComparator(PlatemapManager.PLATEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PlatemapManager.ID_PLATEID
     *   <li>PlatemapManager.ID_WELLNO
     *   <li>PlatemapManager.ID_RESULT
     *   <li>PlatemapManager.ID_RAWDATA
     *   <li>PlatemapManager.ID_BARCODE
     * </ul>
     */
    public PlatemapComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for PlatemapComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new PlatemapComparator(PlatemapManager.PLATEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>PlatemapManager.ID_PLATEID
     *   <li>PlatemapManager.ID_WELLNO
     *   <li>PlatemapManager.ID_RESULT
     *   <li>PlatemapManager.ID_RAWDATA
     *   <li>PlatemapManager.ID_BARCODE
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public PlatemapComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        PlatemapBean b1 = (PlatemapBean)pObj1;
        PlatemapBean b2 = (PlatemapBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case PlatemapManager.ID_PLATEID:
                if (b1.getPlateid() == null && b2.getPlateid() != null) {
                    iReturn = -1;
                } else if (b1.getPlateid() == null && b2.getPlateid() == null) {
                    iReturn = 0;
                } else if (b1.getPlateid() != null && b2.getPlateid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPlateid().compareTo(b2.getPlateid());
                }
                break;
            case PlatemapManager.ID_WELLNO:
                if (b1.getWellno() == null && b2.getWellno() != null) {
                    iReturn = -1;
                } else if (b1.getWellno() == null && b2.getWellno() == null) {
                    iReturn = 0;
                } else if (b1.getWellno() != null && b2.getWellno() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getWellno().compareTo(b2.getWellno());
                }
                break;
            case PlatemapManager.ID_RESULT:
                if (b1.getResult() == null && b2.getResult() != null) {
                    iReturn = -1;
                } else if (b1.getResult() == null && b2.getResult() == null) {
                    iReturn = 0;
                } else if (b1.getResult() != null && b2.getResult() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getResult().compareTo(b2.getResult());
                }
                break;
            case PlatemapManager.ID_RAWDATA:
                if (b1.getRawdata() == null && b2.getRawdata() != null) {
                    iReturn = -1;
                } else if (b1.getRawdata() == null && b2.getRawdata() == null) {
                    iReturn = 0;
                } else if (b1.getRawdata() != null && b2.getRawdata() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRawdata().compareTo(b2.getRawdata());
                }
                break;
            case PlatemapManager.ID_BARCODE:
                if (b1.getBarcode() == null && b2.getBarcode() != null) {
                    iReturn = -1;
                } else if (b1.getBarcode() == null && b2.getBarcode() == null) {
                    iReturn = 0;
                } else if (b1.getBarcode() != null && b2.getBarcode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBarcode().compareTo(b2.getBarcode());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
