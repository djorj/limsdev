// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the act table.
 */
public class ActManager
// extends+ 

// extends- 
{

    /**
     * Column actid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_ACTID = 0;
    public static final int TYPE_ACTID = Types.BIGINT;
    public static final String NAME_ACTID = "actid";

    /**
     * Column contractid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTID = 1;
    public static final int TYPE_CONTRACTID = Types.BIGINT;
    public static final String NAME_CONTRACTID = "contractid";

    /**
     * Column num of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NUM = 2;
    public static final int TYPE_NUM = Types.VARCHAR;
    public static final String NAME_NUM = "num";

    /**
     * Column actdate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_ACTDATE = 3;
    public static final int TYPE_ACTDATE = Types.DATE;
    public static final String NAME_ACTDATE = "actdate";

    /**
     * Column content of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CONTENT = 4;
    public static final int TYPE_CONTENT = Types.VARCHAR;
    public static final String NAME_CONTENT = "content";

    /**
     * Column sampleamount of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_SAMPLEAMOUNT = 5;
    public static final int TYPE_SAMPLEAMOUNT = Types.DOUBLE;
    public static final String NAME_SAMPLEAMOUNT = "sampleamount";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 6;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 7;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column docfile of type Types.VARCHAR mapped to String.
     */
    public static final int ID_DOCFILE = 8;
    public static final int TYPE_DOCFILE = Types.VARCHAR;
    public static final String NAME_DOCFILE = "docfile";

    /**
     * Column regionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGIONID = 9;
    public static final int TYPE_REGIONID = Types.INTEGER;
    public static final String NAME_REGIONID = "regionid";

    /**
     * Column raionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RAIONID = 10;
    public static final int TYPE_RAIONID = Types.INTEGER;
    public static final String NAME_RAIONID = "raionid";

    /**
     * Column villageid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_VILLAGEID = 11;
    public static final int TYPE_VILLAGEID = Types.INTEGER;
    public static final String NAME_VILLAGEID = "villageid";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 12;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column bringer of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BRINGER = 13;
    public static final int TYPE_BRINGER = Types.VARCHAR;
    public static final String NAME_BRINGER = "bringer";

    /**
     * Column stamp of type Types.VARCHAR mapped to String.
     */
    public static final int ID_STAMP = 14;
    public static final int TYPE_STAMP = Types.VARCHAR;
    public static final String NAME_STAMP = "stamp";


    private static final String TABLE_NAME = "act";

    /**
     * Create an array of type string containing all the fields of the act table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "act.actid"
        ,"act.contractid"
        ,"act.num"
        ,"act.actdate"
        ,"act.content"
        ,"act.sampleamount"
        ,"act.regbyid"
        ,"act.regdate"
        ,"act.docfile"
        ,"act.regionid"
        ,"act.raionid"
        ,"act.villageid"
        ,"act.deleted"
        ,"act.bringer"
        ,"act.stamp"
    };

    /**
     * Field that contains the comma separated fields of the act table.
     */
    private static final String ALL_FIELDS = "act.actid"
                            + ",act.contractid"
                            + ",act.num"
                            + ",act.actdate"
                            + ",act.content"
                            + ",act.sampleamount"
                            + ",act.regbyid"
                            + ",act.regdate"
                            + ",act.docfile"
                            + ",act.regionid"
                            + ",act.raionid"
                            + ",act.villageid"
                            + ",act.deleted"
                            + ",act.bringer"
                            + ",act.stamp";

    private static ActManager singleton = new ActManager();

    /**
     * Get the ActManager singleton.
     *
     * @return ActManager 
     */
    synchronized public static ActManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ActManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ActManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ActBean instance.
     *
     * @return the new ActBean 
     */
    public ActBean createActBean()
    {
        return new ActBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ActBean from the act using its key fields.
     *
     * @return a unique ActBean 
     */
    //12
    public ActBean loadByPrimaryKey(Long actid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM act WHERE act.actid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, actid);
            ActBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long actid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from act WHERE act.actid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, actid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ActBean array from the act table using its contractid field.
     *
     * @return an array of ActBean 
     */
    // LOAD BY IMPORTED KEY
    public ActBean[] loadByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM act WHERE contractid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the act table by contractid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM act WHERE contractid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ActBean array from the act table using its regbyid field.
     *
     * @return an array of ActBean 
     */
    // LOAD BY IMPORTED KEY
    public ActBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM act WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the act table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM act WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ActBean array from the act table using its raionid field.
     *
     * @return an array of ActBean 
     */
    // LOAD BY IMPORTED KEY
    public ActBean[] loadByRaionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM act WHERE raionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the act table by raionid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRaionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM act WHERE raionid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ActBean array from the act table using its regionid field.
     *
     * @return an array of ActBean 
     */
    // LOAD BY IMPORTED KEY
    public ActBean[] loadByRegionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM act WHERE regionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the act table by regionid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM act WHERE regionid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ActBean array from the act table using its villageid field.
     *
     * @return an array of ActBean 
     */
    // LOAD BY IMPORTED KEY
    public ActBean[] loadByVillageid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM act WHERE villageid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the act table by villageid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByVillageid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM act WHERE villageid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ContractBean object from the act.contractid field.
     *
     * @param pObject the ActBean 
     * @return the associated ContractBean pObject
     */
    // GET IMPORTED
    public ContractBean getContractBean(ActBean pObject) throws SQLException
    {
        ContractBean other = ContractManager.getInstance().createContractBean();
        other.setContractid(pObject.getContractid());
        return ContractManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ActBean object to the ContractBean object.
     *
     * @param pObject the ActBean object to use
     * @param pObjectToBeSet the ContractBean object to associate to the ActBean 
     * @return the associated ContractBean pObject
     */
    // SET IMPORTED
    public ActBean setContractBean(ActBean pObject,ContractBean pObjectToBeSet)
    {
        pObject.setContractid(pObjectToBeSet.getContractid());
        return pObject;
    }

    /**
     * Retrieves the PersonellBean object from the act.personellid field.
     *
     * @param pObject the ActBean 
     * @return the associated PersonellBean pObject
     */
    // GET IMPORTED
    public PersonellBean getPersonellBean(ActBean pObject) throws SQLException
    {
        PersonellBean other = PersonellManager.getInstance().createPersonellBean();
        other.setPersonellid(pObject.getRegbyid());
        return PersonellManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ActBean object to the PersonellBean object.
     *
     * @param pObject the ActBean object to use
     * @param pObjectToBeSet the PersonellBean object to associate to the ActBean 
     * @return the associated PersonellBean pObject
     */
    // SET IMPORTED
    public ActBean setPersonellBean(ActBean pObject,PersonellBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonellid());
        return pObject;
    }

    /**
     * Retrieves the TunitBean object from the act.tunitid field.
     *
     * @param pObject the ActBean 
     * @return the associated TunitBean pObject
     */
    // GET IMPORTED
    public TunitBean getTunitBean(ActBean pObject) throws SQLException
    {
        TunitBean other = TunitManager.getInstance().createTunitBean();
        other.setTunitid(pObject.getRaionid());
        return TunitManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ActBean object to the TunitBean object.
     *
     * @param pObject the ActBean object to use
     * @param pObjectToBeSet the TunitBean object to associate to the ActBean 
     * @return the associated TunitBean pObject
     */
    // SET IMPORTED
    public ActBean setTunitBean(ActBean pObject,TunitBean pObjectToBeSet)
    {
        pObject.setRaionid(pObjectToBeSet.getTunitid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from act.
     *
     * @return an array of ActManager pObject
     */
    //38
    public ActBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM act",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ActBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ActBean table 
     */
    //49
    public ActBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ActBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ActBean table 
     */
    //51
    public ActBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from act " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from act ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ActBean[])v.toArray(new ActBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from act table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the act table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM act " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ActBean pObject into the database.
     *
     * @param pObject the ActBean pObject to be saved
     */
    //100
    public ActBean save(ActBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isActidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('actid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setActid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into act (");
    
                if (pObject.isActidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("actid");
                    _dirtyCount++;
                }

                if (pObject.isContractidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractid");
                    _dirtyCount++;
                }

                if (pObject.isNumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("num");
                    _dirtyCount++;
                }

                if (pObject.isActdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("actdate");
                    _dirtyCount++;
                }

                if (pObject.isContentModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("content");
                    _dirtyCount++;
                }

                if (pObject.isSampleamountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampleamount");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isDocfileModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("docfile");
                    _dirtyCount++;
                }

                if (pObject.isRegionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regionid");
                    _dirtyCount++;
                }

                if (pObject.isRaionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("raionid");
                    _dirtyCount++;
                }

                if (pObject.isVillageidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("villageid");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isBringerModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bringer");
                    _dirtyCount++;
                }

                if (pObject.isStampModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("stamp");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isActdateModified()) {
                    if (pObject.getActdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getActdate().getTime()));
                }
    
                if (pObject.isContentModified()) {
                    ps.setString(++_dirtyCount, pObject.getContent());
                }
    
                if (pObject.isSampleamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getSampleamount());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDocfileModified()) {
                    ps.setString(++_dirtyCount, pObject.getDocfile());
                }
    
                if (pObject.isRegionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
                }
    
                if (pObject.isRaionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
                }
    
                if (pObject.isVillageidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isBringerModified()) {
                    ps.setString(++_dirtyCount, pObject.getBringer());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE act SET ");
                boolean useComma=false;

                if (pObject.isActidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("actid").append("=?");
                }

                if (pObject.isContractidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractid").append("=?");
                }

                if (pObject.isNumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("num").append("=?");
                }

                if (pObject.isActdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("actdate").append("=?");
                }

                if (pObject.isContentModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("content").append("=?");
                }

                if (pObject.isSampleamountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampleamount").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isDocfileModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("docfile").append("=?");
                }

                if (pObject.isRegionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regionid").append("=?");
                }

                if (pObject.isRaionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("raionid").append("=?");
                }

                if (pObject.isVillageidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("villageid").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isBringerModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bringer").append("=?");
                }

                if (pObject.isStampModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("stamp").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("act.actid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isActidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }

                if (pObject.isContractidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }

                if (pObject.isNumModified()) {
                      ps.setString(++_dirtyCount, pObject.getNum());
                }

                if (pObject.isActdateModified()) {
                      if (pObject.getActdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getActdate().getTime()));
                }

                if (pObject.isContentModified()) {
                      ps.setString(++_dirtyCount, pObject.getContent());
                }

                if (pObject.isSampleamountModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getSampleamount());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isDocfileModified()) {
                      ps.setString(++_dirtyCount, pObject.getDocfile());
                }

                if (pObject.isRegionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
                }

                if (pObject.isRaionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
                }

                if (pObject.isVillageidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isBringerModified()) {
                      ps.setString(++_dirtyCount, pObject.getBringer());
                }

                if (pObject.isStampModified()) {
                      ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ActBean pObjects into the database.
     *
     * @param pObjects the ActBean pObject table to be saved
     * @return the saved ActBean array.
     */
    //65
    public ActBean[] save(ActBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ActBean pObject from a template one giving a c
     *
     * @param pObject the ActBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ActBean loadUniqueUsingTemplate(ActBean pObject) throws SQLException
    {
         ActBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ActBean from a template one.
     *
     * @param pObject the ActBean template to look for
     * @return all the ActBean matching the template
     */
    //88
    public ActBean[] loadUsingTemplate(ActBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from act WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isActidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
             }
    
             if (pObject.isContractidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
             }
    
             if (pObject.isNumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
             }
    
             if (pObject.isActdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actdate= ?");
             }
    
             if (pObject.isContentModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("content= ?");
             }
    
             if (pObject.isSampleamountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleamount= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isDocfileModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("docfile= ?");
             }
    
             if (pObject.isRegionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regionid= ?");
             }
    
             if (pObject.isRaionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("raionid= ?");
             }
    
             if (pObject.isVillageidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("villageid= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isBringerModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bringer= ?");
             }
    
             if (pObject.isStampModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isActidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
             }
    
             if (pObject.isContractidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
             }
    
             if (pObject.isNumModified()) {
                 ps.setString(++_dirtyCount, pObject.getNum());
             }
    
             if (pObject.isActdateModified()) {
                 if (pObject.getActdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getActdate().getTime()));
             }
    
             if (pObject.isContentModified()) {
                 ps.setString(++_dirtyCount, pObject.getContent());
             }
    
             if (pObject.isSampleamountModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getSampleamount());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isDocfileModified()) {
                 ps.setString(++_dirtyCount, pObject.getDocfile());
             }
    
             if (pObject.isRegionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
             }
    
             if (pObject.isRaionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
             }
    
             if (pObject.isVillageidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isBringerModified()) {
                 ps.setString(++_dirtyCount, pObject.getBringer());
             }
    
             if (pObject.isStampModified()) {
                 ps.setString(++_dirtyCount, pObject.getStamp());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ActBean template.
     *
     * @param pObject the ActBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ActBean pObject) throws SQLException
    {
        if (pObject.isActidInitialized())
            return deleteByPrimaryKey(pObject.getActid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM act WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isActidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("actid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("num").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("actdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContentInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("content").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampleamountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampleamount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDocfileInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("docfile").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRaionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("raionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isVillageidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("villageid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBringerInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bringer").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStampInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("stamp").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isActidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
            }
    
            if (pObject.isContractidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
            }
    
            if (pObject.isNumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNum());
            }
    
            if (pObject.isActdateInitialized()) {
                if (pObject.getActdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getActdate().getTime()));
            }
    
            if (pObject.isContentInitialized()) {
                ps.setString(++_dirtyCount, pObject.getContent());
            }
    
            if (pObject.isSampleamountInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getSampleamount());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isDocfileInitialized()) {
                ps.setString(++_dirtyCount, pObject.getDocfile());
            }
    
            if (pObject.isRegionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
            }
    
            if (pObject.isRaionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
            }
    
            if (pObject.isVillageidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isBringerInitialized()) {
                ps.setString(++_dirtyCount, pObject.getBringer());
            }
    
            if (pObject.isStampInitialized()) {
                ps.setString(++_dirtyCount, pObject.getStamp());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of AppealBean using the relation table Contractclosing given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaContractclosing(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,contractclosing"
                         + " WHERE "    
                         + "     contractclosing.actid = ?"
                         + " AND contractclosing.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Contractclosing given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaContractclosing(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,contractclosing"
                         + " WHERE "    
                         + "     contractclosing.actid = ?"
                         + " AND contractclosing.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of AppealBean using the relation table Contractsampletype given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaContractsampletype(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.actid = ?"
                         + " AND contractsampletype.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Contractsampletype given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaContractsampletype(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.actid = ?"
                         + " AND contractsampletype.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampletypeBean using the relation table Contractsampletype given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of ContractsampletypeBean 
     */
    // MANY TO MANY
    public ContractsampletypeBean[] loadContractsampletypeViaContractsampletype(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampletype,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.actid = ?"
                         + " AND contractsampletype.parentid = contractsampletype.contractsampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return ContractsampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Contractsampletype given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaContractsampletype(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.actid = ?"
                         + " AND contractsampletype.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SpeciesBean using the relation table Contractsampletype given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of SpeciesBean 
     */
    // MANY TO MANY
    public SpeciesBean[] loadSpeciesViaContractsampletype(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        species,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.actid = ?"
                         + " AND contractsampletype.speciesid = species.speciesid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return SpeciesManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of AppealBean using the relation table Transitact given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaTransitact(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,transitact"
                         + " WHERE "    
                         + "     transitact.actid = ?"
                         + " AND transitact.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Transitact given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaTransitact(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,transitact"
                         + " WHERE "    
                         + "     transitact.actid = ?"
                         + " AND transitact.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Transitact given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaTransitact(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,transitact"
                         + " WHERE "    
                         + "     transitact.actid = ?"
                         + " AND transitact.fromlocationid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Transitact given a ActBean object.
     *
     * @param pObject the ActBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaTransitact(ActBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,transitact"
                         + " WHERE "    
                         + "     transitact.actid = ?"
                         + " AND transitact.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getActid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table act.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table act with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from act " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table act with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ActBean pObject given a c
     *
     * @param pObject the ActBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ActBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from act WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isActidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
                }
    
                if (pObject.isContractidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
                }
    
                if (pObject.isNumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
                }
    
                if (pObject.isActdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actdate= ?");
                }
    
                if (pObject.isContentModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("content= ?");
                }
    
                if (pObject.isSampleamountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleamount= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isDocfileModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("docfile= ?");
                }
    
                if (pObject.isRegionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regionid= ?");
                }
    
                if (pObject.isRaionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("raionid= ?");
                }
    
                if (pObject.isVillageidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("villageid= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isBringerModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bringer= ?");
                }
    
                if (pObject.isStampModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isActdateModified()) {
                    if (pObject.getActdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getActdate().getTime()));
                }
    
                if (pObject.isContentModified()) {
                    ps.setString(++_dirtyCount, pObject.getContent());
                }
    
                if (pObject.isSampleamountModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getSampleamount());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDocfileModified()) {
                    ps.setString(++_dirtyCount, pObject.getDocfile());
                }
    
                if (pObject.isRegionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
                }
    
                if (pObject.isRaionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
                }
    
                if (pObject.isVillageidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isBringerModified()) {
                    ps.setString(++_dirtyCount, pObject.getBringer());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the act on a ActBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ActBean pObject
     */
    //72
    public ActBean decodeRow(ResultSet rs) throws SQLException
    {
        ActBean pObject = createActBean();
        pObject.setActid(Manager.getLong(rs, 1));
        pObject.setContractid(Manager.getLong(rs, 2));
        pObject.setNum(rs.getString(3));
        pObject.setActdate(rs.getDate(4));
        pObject.setContent(rs.getString(5));
        pObject.setSampleamount(Manager.getDouble(rs, 6));
        pObject.setRegbyid(Manager.getInteger(rs, 7));
        pObject.setRegdate(rs.getTimestamp(8));
        pObject.setDocfile(rs.getString(9));
        pObject.setRegionid(Manager.getInteger(rs, 10));
        pObject.setRaionid(Manager.getInteger(rs, 11));
        pObject.setVillageid(Manager.getInteger(rs, 12));
        pObject.setDeleted(Manager.getBoolean(rs, 13));
        pObject.setBringer(rs.getString(14));
        pObject.setStamp(rs.getString(15));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the act table on a ActBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ActBean pObject
     */
    //73
    public ActBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ActBean pObject = createActBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_ACTID:
                    ++pos;
                    pObject.setActid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTID:
                    ++pos;
                    pObject.setContractid(Manager.getLong(rs, pos));
                    break;
                case ID_NUM:
                    ++pos;
                    pObject.setNum(rs.getString(pos));
                    break;
                case ID_ACTDATE:
                    ++pos;
                    pObject.setActdate(rs.getDate(pos));
                    break;
                case ID_CONTENT:
                    ++pos;
                    pObject.setContent(rs.getString(pos));
                    break;
                case ID_SAMPLEAMOUNT:
                    ++pos;
                    pObject.setSampleamount(Manager.getDouble(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_DOCFILE:
                    ++pos;
                    pObject.setDocfile(rs.getString(pos));
                    break;
                case ID_REGIONID:
                    ++pos;
                    pObject.setRegionid(Manager.getInteger(rs, pos));
                    break;
                case ID_RAIONID:
                    ++pos;
                    pObject.setRaionid(Manager.getInteger(rs, pos));
                    break;
                case ID_VILLAGEID:
                    ++pos;
                    pObject.setVillageid(Manager.getInteger(rs, pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_BRINGER:
                    ++pos;
                    pObject.setBringer(rs.getString(pos));
                    break;
                case ID_STAMP:
                    ++pos;
                    pObject.setStamp(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ActBean 
     */
    //41
    public ActBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ActBean 
     */
    public ActBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ActBean[])v.toArray(new ActBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ActListener listener = null;

    /**
     * Registers a unique ActListener listener.
     */
    //66.5
    public void registerListener(ActListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ActBean pObject.
     *
     * @param pObject the ActBean pObject to be saved
     */
    //67
    void beforeInsert(ActBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ActBean pObject.
     *
     * @param pObject the ActBean pObject to be saved
     */
    //68
    void afterInsert(ActBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ActBean pObject.
     *
     * @param pObject the ActBean pObject to be updated
     */
    //69
    void beforeUpdate(ActBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ActBean pObject.
     *
     * @param pObject the ActBean pObject to be updated
     */
    //70
    void afterUpdate(ActBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
