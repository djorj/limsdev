// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ExtraparamBean
// extends+ 

// extends- 
{
    private Long extraparamid;
    private boolean extraparamid_is_modified = false;
    private boolean extraparamid_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private String description;
    private boolean description_is_modified = false;
    private boolean description_is_initialized = false;
    
    private Integer restypeid;
    private boolean restypeid_is_modified = false;
    private boolean restypeid_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ExtraparamBean()
    {
    }
    
    /**
     * Getter method for extraparamid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraparam.extraparamid
     * <li>default value: nextval('extraparamid_seq'::regclass)
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of extraparamid
     */
    public Long getExtraparamid()
    {
        return extraparamid; 
    }

    /**
     * Setter method for extraparamid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to extraparamid
     */
    public void setExtraparamid(Long newVal) {
        if ((newVal != null && this.extraparamid != null && (newVal.compareTo(this.extraparamid) == 0)) || 
            (newVal == null && this.extraparamid == null && extraparamid_is_initialized)) {
            return; 
        } 
        this.extraparamid = newVal; 
        extraparamid_is_modified = true; 
        extraparamid_is_initialized = true; 
    }

    /**
     * Setter method for extraparamid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to extraparamid
     */
    public void setExtraparamid(long newVal) {
        setExtraparamid(new Long(newVal));
    }

    /**
     * Determines if the extraparamid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExtraparamidModified() {
        return extraparamid_is_modified; 
    }

    /**
     * Determines if the extraparamid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExtraparamidInitialized() {
        return extraparamid_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraparam.name
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for description.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraparam.description
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of description
     */
    public String getDescription()
    {
        return description; 
    }

    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    public void setDescription(String newVal) {
        if ((newVal != null && this.description != null && (newVal.compareTo(this.description) == 0)) || 
            (newVal == null && this.description == null && description_is_initialized)) {
            return; 
        } 
        this.description = newVal; 
        description_is_modified = true; 
        description_is_initialized = true; 
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified() {
        return description_is_modified; 
    }

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized() {
        return description_is_initialized; 
    }

    /**
     * Getter method for restypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraparam.restypeid
     * <li> foreign key: restype.restypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of restypeid
     */
    public Integer getRestypeid()
    {
        return restypeid; 
    }

    /**
     * Setter method for restypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to restypeid
     */
    public void setRestypeid(Integer newVal) {
        if ((newVal != null && this.restypeid != null && (newVal.compareTo(this.restypeid) == 0)) || 
            (newVal == null && this.restypeid == null && restypeid_is_initialized)) {
            return; 
        } 
        this.restypeid = newVal; 
        restypeid_is_modified = true; 
        restypeid_is_initialized = true; 
    }

    /**
     * Setter method for restypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to restypeid
     */
    public void setRestypeid(int newVal) {
        setRestypeid(new Integer(newVal));
    }

    /**
     * Determines if the restypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRestypeidModified() {
        return restypeid_is_modified; 
    }

    /**
     * Determines if the restypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRestypeidInitialized() {
        return restypeid_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraparam.sampletypeid
     * <li> foreign key: sampletype.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: extraparam.labtestid
     * <li> foreign key: labtest.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return extraparamid_is_modified || 
		name_is_modified || 
		description_is_modified || 
		restypeid_is_modified || 
		sampletypeid_is_modified || 
		labtestid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        extraparamid_is_modified = false;
        name_is_modified = false;
        description_is_modified = false;
        restypeid_is_modified = false;
        sampletypeid_is_modified = false;
        labtestid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ExtraparamBean bean) {
        setExtraparamid(bean.getExtraparamid());
        setName(bean.getName());
        setDescription(bean.getDescription());
        setRestypeid(bean.getRestypeid());
        setSampletypeid(bean.getSampletypeid());
        setLabtestid(bean.getLabtestid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[extraparam] "
                 + "\n - extraparam.extraparamid = " + (extraparamid_is_initialized ? ("[" + (extraparamid == null ? null : extraparamid.toString()) + "]") : "not initialized") + ""
                 + "\n - extraparam.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - extraparam.description = " + (description_is_initialized ? ("[" + (description == null ? null : description.toString()) + "]") : "not initialized") + ""
                 + "\n - extraparam.restypeid = " + (restypeid_is_initialized ? ("[" + (restypeid == null ? null : restypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - extraparam.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - extraparam.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
