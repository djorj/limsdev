// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class VLabRequestBean
// extends+ 

// extends- 
{
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private String labtestname;
    private boolean labtestname_is_modified = false;
    private boolean labtestname_is_initialized = false;
    
    private String samplename;
    private boolean samplename_is_modified = false;
    private boolean samplename_is_initialized = false;
    
    private Long sampleitemreseachid;
    private boolean sampleitemreseachid_is_modified = false;
    private boolean sampleitemreseachid_is_initialized = false;
    
    private Long parenttest;
    private boolean parenttest_is_modified = false;
    private boolean parenttest_is_initialized = false;
    
    private Integer totalsubtest;
    private boolean totalsubtest_is_modified = false;
    private boolean totalsubtest_is_initialized = false;
    
    private Long contractsampleitemid;
    private boolean contractsampleitemid_is_modified = false;
    private boolean contractsampleitemid_is_initialized = false;
    
    private Integer status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private java.sql.Timestamp enddate;
    private boolean enddate_is_modified = false;
    private boolean enddate_is_initialized = false;
    
    private Integer qualitycontrolPerson;
    private boolean qualitycontrolPerson_is_modified = false;
    private boolean qualitycontrolPerson_is_initialized = false;
    
    private java.sql.Timestamp qualitycontrolDatetime;
    private boolean qualitycontrolDatetime_is_modified = false;
    private boolean qualitycontrolDatetime_is_initialized = false;
    
    private String qualitycontrolAnswer;
    private boolean qualitycontrolAnswer_is_modified = false;
    private boolean qualitycontrolAnswer_is_initialized = false;
    
    private String result;
    private boolean result_is_modified = false;
    private boolean result_is_initialized = false;
    
    private java.sql.Timestamp resultDatetime;
    private boolean resultDatetime_is_modified = false;
    private boolean resultDatetime_is_initialized = false;
    
    private String resultNote;
    private boolean resultNote_is_modified = false;
    private boolean resultNote_is_initialized = false;
    
    private String authorname;
    private boolean authorname_is_modified = false;
    private boolean authorname_is_initialized = false;
    
    private Integer authorid;
    private boolean authorid_is_modified = false;
    private boolean authorid_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VLabRequestBean()
    {
    }
    
    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for labtestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.labtestname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of labtestname
     */
    public String getLabtestname()
    {
        return labtestname; 
    }

    /**
     * Setter method for labtestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestname
     */
    public void setLabtestname(String newVal) {
        if ((newVal != null && this.labtestname != null && (newVal.compareTo(this.labtestname) == 0)) || 
            (newVal == null && this.labtestname == null && labtestname_is_initialized)) {
            return; 
        } 
        this.labtestname = newVal; 
        labtestname_is_modified = true; 
        labtestname_is_initialized = true; 
    }

    /**
     * Determines if the labtestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestnameModified() {
        return labtestname_is_modified; 
    }

    /**
     * Determines if the labtestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestnameInitialized() {
        return labtestname_is_initialized; 
    }

    /**
     * Getter method for samplename.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.samplename
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of samplename
     */
    public String getSamplename()
    {
        return samplename; 
    }

    /**
     * Setter method for samplename.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to samplename
     */
    public void setSamplename(String newVal) {
        if ((newVal != null && this.samplename != null && (newVal.compareTo(this.samplename) == 0)) || 
            (newVal == null && this.samplename == null && samplename_is_initialized)) {
            return; 
        } 
        this.samplename = newVal; 
        samplename_is_modified = true; 
        samplename_is_initialized = true; 
    }

    /**
     * Determines if the samplename has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSamplenameModified() {
        return samplename_is_modified; 
    }

    /**
     * Determines if the samplename has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSamplenameInitialized() {
        return samplename_is_initialized; 
    }

    /**
     * Getter method for sampleitemreseachid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.sampleitemreseachid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleitemreseachid
     */
    public Long getSampleitemreseachid()
    {
        return sampleitemreseachid; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(Long newVal) {
        if ((newVal != null && this.sampleitemreseachid != null && (newVal.compareTo(this.sampleitemreseachid) == 0)) || 
            (newVal == null && this.sampleitemreseachid == null && sampleitemreseachid_is_initialized)) {
            return; 
        } 
        this.sampleitemreseachid = newVal; 
        sampleitemreseachid_is_modified = true; 
        sampleitemreseachid_is_initialized = true; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(long newVal) {
        setSampleitemreseachid(new Long(newVal));
    }

    /**
     * Determines if the sampleitemreseachid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleitemreseachidModified() {
        return sampleitemreseachid_is_modified; 
    }

    /**
     * Determines if the sampleitemreseachid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleitemreseachidInitialized() {
        return sampleitemreseachid_is_initialized; 
    }

    /**
     * Getter method for parenttest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.parenttest
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parenttest
     */
    public Long getParenttest()
    {
        return parenttest; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(Long newVal) {
        if ((newVal != null && this.parenttest != null && (newVal.compareTo(this.parenttest) == 0)) || 
            (newVal == null && this.parenttest == null && parenttest_is_initialized)) {
            return; 
        } 
        this.parenttest = newVal; 
        parenttest_is_modified = true; 
        parenttest_is_initialized = true; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(long newVal) {
        setParenttest(new Long(newVal));
    }

    /**
     * Determines if the parenttest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParenttestModified() {
        return parenttest_is_modified; 
    }

    /**
     * Determines if the parenttest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParenttestInitialized() {
        return parenttest_is_initialized; 
    }

    /**
     * Getter method for totalsubtest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.totalsubtest
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of totalsubtest
     */
    public Integer getTotalsubtest()
    {
        return totalsubtest; 
    }

    /**
     * Setter method for totalsubtest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to totalsubtest
     */
    public void setTotalsubtest(Integer newVal) {
        if ((newVal != null && this.totalsubtest != null && (newVal.compareTo(this.totalsubtest) == 0)) || 
            (newVal == null && this.totalsubtest == null && totalsubtest_is_initialized)) {
            return; 
        } 
        this.totalsubtest = newVal; 
        totalsubtest_is_modified = true; 
        totalsubtest_is_initialized = true; 
    }

    /**
     * Setter method for totalsubtest.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalsubtest
     */
    public void setTotalsubtest(int newVal) {
        setTotalsubtest(new Integer(newVal));
    }

    /**
     * Determines if the totalsubtest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalsubtestModified() {
        return totalsubtest_is_modified; 
    }

    /**
     * Determines if the totalsubtest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalsubtestInitialized() {
        return totalsubtest_is_initialized; 
    }

    /**
     * Getter method for contractsampleitemid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleitemid
     */
    public Long getContractsampleitemid()
    {
        return contractsampleitemid; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(Long newVal) {
        if ((newVal != null && this.contractsampleitemid != null && (newVal.compareTo(this.contractsampleitemid) == 0)) || 
            (newVal == null && this.contractsampleitemid == null && contractsampleitemid_is_initialized)) {
            return; 
        } 
        this.contractsampleitemid = newVal; 
        contractsampleitemid_is_modified = true; 
        contractsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(long newVal) {
        setContractsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleitemidModified() {
        return contractsampleitemid_is_modified; 
    }

    /**
     * Determines if the contractsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleitemidInitialized() {
        return contractsampleitemid_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.status
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of status
     */
    public Integer getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Integer newVal) {
        if ((newVal != null && this.status != null && (newVal.compareTo(this.status) == 0)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal) {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.regdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for enddate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.enddate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of enddate
     */
    public java.sql.Timestamp getEnddate()
    {
        return enddate; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.enddate != null && (newVal.compareTo(this.enddate) == 0)) || 
            (newVal == null && this.enddate == null && enddate_is_initialized)) {
            return; 
        } 
        this.enddate = newVal; 
        enddate_is_modified = true; 
        enddate_is_initialized = true; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(long newVal) {
        setEnddate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the enddate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEnddateModified() {
        return enddate_is_modified; 
    }

    /**
     * Determines if the enddate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEnddateInitialized() {
        return enddate_is_initialized; 
    }

    /**
     * Getter method for qualitycontrolPerson.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.qualitycontrol_person
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of qualitycontrolPerson
     */
    public Integer getQualitycontrolPerson()
    {
        return qualitycontrolPerson; 
    }

    /**
     * Setter method for qualitycontrolPerson.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qualitycontrolPerson
     */
    public void setQualitycontrolPerson(Integer newVal) {
        if ((newVal != null && this.qualitycontrolPerson != null && (newVal.compareTo(this.qualitycontrolPerson) == 0)) || 
            (newVal == null && this.qualitycontrolPerson == null && qualitycontrolPerson_is_initialized)) {
            return; 
        } 
        this.qualitycontrolPerson = newVal; 
        qualitycontrolPerson_is_modified = true; 
        qualitycontrolPerson_is_initialized = true; 
    }

    /**
     * Setter method for qualitycontrolPerson.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qualitycontrolPerson
     */
    public void setQualitycontrolPerson(int newVal) {
        setQualitycontrolPerson(new Integer(newVal));
    }

    /**
     * Determines if the qualitycontrolPerson has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQualitycontrolPersonModified() {
        return qualitycontrolPerson_is_modified; 
    }

    /**
     * Determines if the qualitycontrolPerson has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQualitycontrolPersonInitialized() {
        return qualitycontrolPerson_is_initialized; 
    }

    /**
     * Getter method for qualitycontrolDatetime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.qualitycontrol_datetime
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of qualitycontrolDatetime
     */
    public java.sql.Timestamp getQualitycontrolDatetime()
    {
        return qualitycontrolDatetime; 
    }

    /**
     * Setter method for qualitycontrolDatetime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qualitycontrolDatetime
     */
    public void setQualitycontrolDatetime(java.sql.Timestamp newVal) {
        if ((newVal != null && this.qualitycontrolDatetime != null && (newVal.compareTo(this.qualitycontrolDatetime) == 0)) || 
            (newVal == null && this.qualitycontrolDatetime == null && qualitycontrolDatetime_is_initialized)) {
            return; 
        } 
        this.qualitycontrolDatetime = newVal; 
        qualitycontrolDatetime_is_modified = true; 
        qualitycontrolDatetime_is_initialized = true; 
    }

    /**
     * Setter method for qualitycontrolDatetime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qualitycontrolDatetime
     */
    public void setQualitycontrolDatetime(long newVal) {
        setQualitycontrolDatetime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the qualitycontrolDatetime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQualitycontrolDatetimeModified() {
        return qualitycontrolDatetime_is_modified; 
    }

    /**
     * Determines if the qualitycontrolDatetime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQualitycontrolDatetimeInitialized() {
        return qualitycontrolDatetime_is_initialized; 
    }

    /**
     * Getter method for qualitycontrolAnswer.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.qualitycontrol_answer
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of qualitycontrolAnswer
     */
    public String getQualitycontrolAnswer()
    {
        return qualitycontrolAnswer; 
    }

    /**
     * Setter method for qualitycontrolAnswer.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qualitycontrolAnswer
     */
    public void setQualitycontrolAnswer(String newVal) {
        if ((newVal != null && this.qualitycontrolAnswer != null && (newVal.compareTo(this.qualitycontrolAnswer) == 0)) || 
            (newVal == null && this.qualitycontrolAnswer == null && qualitycontrolAnswer_is_initialized)) {
            return; 
        } 
        this.qualitycontrolAnswer = newVal; 
        qualitycontrolAnswer_is_modified = true; 
        qualitycontrolAnswer_is_initialized = true; 
    }

    /**
     * Determines if the qualitycontrolAnswer has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQualitycontrolAnswerModified() {
        return qualitycontrolAnswer_is_modified; 
    }

    /**
     * Determines if the qualitycontrolAnswer has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQualitycontrolAnswerInitialized() {
        return qualitycontrolAnswer_is_initialized; 
    }

    /**
     * Getter method for result.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.result
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of result
     */
    public String getResult()
    {
        return result; 
    }

    /**
     * Setter method for result.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to result
     */
    public void setResult(String newVal) {
        if ((newVal != null && this.result != null && (newVal.compareTo(this.result) == 0)) || 
            (newVal == null && this.result == null && result_is_initialized)) {
            return; 
        } 
        this.result = newVal; 
        result_is_modified = true; 
        result_is_initialized = true; 
    }

    /**
     * Determines if the result has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultModified() {
        return result_is_modified; 
    }

    /**
     * Determines if the result has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultInitialized() {
        return result_is_initialized; 
    }

    /**
     * Getter method for resultDatetime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.result_datetime
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of resultDatetime
     */
    public java.sql.Timestamp getResultDatetime()
    {
        return resultDatetime; 
    }

    /**
     * Setter method for resultDatetime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultDatetime
     */
    public void setResultDatetime(java.sql.Timestamp newVal) {
        if ((newVal != null && this.resultDatetime != null && (newVal.compareTo(this.resultDatetime) == 0)) || 
            (newVal == null && this.resultDatetime == null && resultDatetime_is_initialized)) {
            return; 
        } 
        this.resultDatetime = newVal; 
        resultDatetime_is_modified = true; 
        resultDatetime_is_initialized = true; 
    }

    /**
     * Setter method for resultDatetime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to resultDatetime
     */
    public void setResultDatetime(long newVal) {
        setResultDatetime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the resultDatetime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultDatetimeModified() {
        return resultDatetime_is_modified; 
    }

    /**
     * Determines if the resultDatetime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultDatetimeInitialized() {
        return resultDatetime_is_initialized; 
    }

    /**
     * Getter method for resultNote.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.result_note
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of resultNote
     */
    public String getResultNote()
    {
        return resultNote; 
    }

    /**
     * Setter method for resultNote.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultNote
     */
    public void setResultNote(String newVal) {
        if ((newVal != null && this.resultNote != null && (newVal.compareTo(this.resultNote) == 0)) || 
            (newVal == null && this.resultNote == null && resultNote_is_initialized)) {
            return; 
        } 
        this.resultNote = newVal; 
        resultNote_is_modified = true; 
        resultNote_is_initialized = true; 
    }

    /**
     * Determines if the resultNote has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultNoteModified() {
        return resultNote_is_modified; 
    }

    /**
     * Determines if the resultNote has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultNoteInitialized() {
        return resultNote_is_initialized; 
    }

    /**
     * Getter method for authorname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.authorname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of authorname
     */
    public String getAuthorname()
    {
        return authorname; 
    }

    /**
     * Setter method for authorname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to authorname
     */
    public void setAuthorname(String newVal) {
        if ((newVal != null && this.authorname != null && (newVal.compareTo(this.authorname) == 0)) || 
            (newVal == null && this.authorname == null && authorname_is_initialized)) {
            return; 
        } 
        this.authorname = newVal; 
        authorname_is_modified = true; 
        authorname_is_initialized = true; 
    }

    /**
     * Determines if the authorname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuthornameModified() {
        return authorname_is_modified; 
    }

    /**
     * Determines if the authorname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuthornameInitialized() {
        return authorname_is_initialized; 
    }

    /**
     * Getter method for authorid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.authorid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of authorid
     */
    public Integer getAuthorid()
    {
        return authorid; 
    }

    /**
     * Setter method for authorid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to authorid
     */
    public void setAuthorid(Integer newVal) {
        if ((newVal != null && this.authorid != null && (newVal.compareTo(this.authorid) == 0)) || 
            (newVal == null && this.authorid == null && authorid_is_initialized)) {
            return; 
        } 
        this.authorid = newVal; 
        authorid_is_modified = true; 
        authorid_is_initialized = true; 
    }

    /**
     * Setter method for authorid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to authorid
     */
    public void setAuthorid(int newVal) {
        setAuthorid(new Integer(newVal));
    }

    /**
     * Determines if the authorid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuthoridModified() {
        return authorid_is_modified; 
    }

    /**
     * Determines if the authorid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuthoridInitialized() {
        return authorid_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_request.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return labtestid_is_modified || 
		labtestname_is_modified || 
		samplename_is_modified || 
		sampleitemreseachid_is_modified || 
		parenttest_is_modified || 
		totalsubtest_is_modified || 
		contractsampleitemid_is_modified || 
		status_is_modified || 
		regdate_is_modified || 
		enddate_is_modified || 
		qualitycontrolPerson_is_modified || 
		qualitycontrolDatetime_is_modified || 
		qualitycontrolAnswer_is_modified || 
		result_is_modified || 
		resultDatetime_is_modified || 
		resultNote_is_modified || 
		authorname_is_modified || 
		authorid_is_modified || 
		sampletypeid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        labtestid_is_modified = false;
        labtestname_is_modified = false;
        samplename_is_modified = false;
        sampleitemreseachid_is_modified = false;
        parenttest_is_modified = false;
        totalsubtest_is_modified = false;
        contractsampleitemid_is_modified = false;
        status_is_modified = false;
        regdate_is_modified = false;
        enddate_is_modified = false;
        qualitycontrolPerson_is_modified = false;
        qualitycontrolDatetime_is_modified = false;
        qualitycontrolAnswer_is_modified = false;
        result_is_modified = false;
        resultDatetime_is_modified = false;
        resultNote_is_modified = false;
        authorname_is_modified = false;
        authorid_is_modified = false;
        sampletypeid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VLabRequestBean bean) {
        setLabtestid(bean.getLabtestid());
        setLabtestname(bean.getLabtestname());
        setSamplename(bean.getSamplename());
        setSampleitemreseachid(bean.getSampleitemreseachid());
        setParenttest(bean.getParenttest());
        setTotalsubtest(bean.getTotalsubtest());
        setContractsampleitemid(bean.getContractsampleitemid());
        setStatus(bean.getStatus());
        setRegdate(bean.getRegdate());
        setEnddate(bean.getEnddate());
        setQualitycontrolPerson(bean.getQualitycontrolPerson());
        setQualitycontrolDatetime(bean.getQualitycontrolDatetime());
        setQualitycontrolAnswer(bean.getQualitycontrolAnswer());
        setResult(bean.getResult());
        setResultDatetime(bean.getResultDatetime());
        setResultNote(bean.getResultNote());
        setAuthorname(bean.getAuthorname());
        setAuthorid(bean.getAuthorid());
        setSampletypeid(bean.getSampletypeid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_lab_request] "
                 + "\n - v_lab_request.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.labtestname = " + (labtestname_is_initialized ? ("[" + (labtestname == null ? null : labtestname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.samplename = " + (samplename_is_initialized ? ("[" + (samplename == null ? null : samplename.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.sampleitemreseachid = " + (sampleitemreseachid_is_initialized ? ("[" + (sampleitemreseachid == null ? null : sampleitemreseachid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.parenttest = " + (parenttest_is_initialized ? ("[" + (parenttest == null ? null : parenttest.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.totalsubtest = " + (totalsubtest_is_initialized ? ("[" + (totalsubtest == null ? null : totalsubtest.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.contractsampleitemid = " + (contractsampleitemid_is_initialized ? ("[" + (contractsampleitemid == null ? null : contractsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.enddate = " + (enddate_is_initialized ? ("[" + (enddate == null ? null : enddate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.qualitycontrol_person = " + (qualitycontrolPerson_is_initialized ? ("[" + (qualitycontrolPerson == null ? null : qualitycontrolPerson.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.qualitycontrol_datetime = " + (qualitycontrolDatetime_is_initialized ? ("[" + (qualitycontrolDatetime == null ? null : qualitycontrolDatetime.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.qualitycontrol_answer = " + (qualitycontrolAnswer_is_initialized ? ("[" + (qualitycontrolAnswer == null ? null : qualitycontrolAnswer.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.result = " + (result_is_initialized ? ("[" + (result == null ? null : result.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.result_datetime = " + (resultDatetime_is_initialized ? ("[" + (resultDatetime == null ? null : resultDatetime.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.result_note = " + (resultNote_is_initialized ? ("[" + (resultNote == null ? null : resultNote.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.authorname = " + (authorname_is_initialized ? ("[" + (authorname == null ? null : authorname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.authorid = " + (authorid_is_initialized ? ("[" + (authorid == null ? null : authorid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_request.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
