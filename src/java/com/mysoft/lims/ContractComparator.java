// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the ContractBean objects.
 */
public class ContractComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ContractComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractComparator(ContractManager.CONTRACTID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractManager.ID_CONTRACTID
     *   <li>ContractManager.ID_COMPANYID
     *   <li>ContractManager.ID_CONTRAGENTID
     *   <li>ContractManager.ID_NUM
     *   <li>ContractManager.ID_STARTDATE
     *   <li>ContractManager.ID_ENDDATE
     *   <li>ContractManager.ID_PRICE
     *   <li>ContractManager.ID_SAMPLETYPEID
     *   <li>ContractManager.ID_CONTRACTTYPE
     *   <li>ContractManager.ID_PATH
     *   <li>ContractManager.ID_REGBYID
     *   <li>ContractManager.ID_REGDATE
     *   <li>ContractManager.ID_OWNERID
     *   <li>ContractManager.ID_INFO
     *   <li>ContractManager.ID_STATUS
     *   <li>ContractManager.ID_CONTRACTOWNERID
     *   <li>ContractManager.ID_REMINDDATE
     *   <li>ContractManager.ID_REMINDTIME
     *   <li>ContractManager.ID_REMINDPID
     *   <li>ContractManager.ID_STAMP
     * </ul>
     */
    public ContractComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ContractComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractComparator(ContractManager.CONTRACTID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractManager.ID_CONTRACTID
     *   <li>ContractManager.ID_COMPANYID
     *   <li>ContractManager.ID_CONTRAGENTID
     *   <li>ContractManager.ID_NUM
     *   <li>ContractManager.ID_STARTDATE
     *   <li>ContractManager.ID_ENDDATE
     *   <li>ContractManager.ID_PRICE
     *   <li>ContractManager.ID_SAMPLETYPEID
     *   <li>ContractManager.ID_CONTRACTTYPE
     *   <li>ContractManager.ID_PATH
     *   <li>ContractManager.ID_REGBYID
     *   <li>ContractManager.ID_REGDATE
     *   <li>ContractManager.ID_OWNERID
     *   <li>ContractManager.ID_INFO
     *   <li>ContractManager.ID_DELETED
     *   <li>ContractManager.ID_STATUS
     *   <li>ContractManager.ID_CONTRACTOWNERID
     *   <li>ContractManager.ID_REMINDDATE
     *   <li>ContractManager.ID_REMINDTIME
     *   <li>ContractManager.ID_REMINDPID
     *   <li>ContractManager.ID_TRANSFER
     *   <li>ContractManager.ID_STAMP
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ContractComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ContractBean b1 = (ContractBean)pObj1;
        ContractBean b2 = (ContractBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ContractManager.ID_CONTRACTID:
                if (b1.getContractid() == null && b2.getContractid() != null) {
                    iReturn = -1;
                } else if (b1.getContractid() == null && b2.getContractid() == null) {
                    iReturn = 0;
                } else if (b1.getContractid() != null && b2.getContractid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractid().compareTo(b2.getContractid());
                }
                break;
            case ContractManager.ID_COMPANYID:
                if (b1.getCompanyid() == null && b2.getCompanyid() != null) {
                    iReturn = -1;
                } else if (b1.getCompanyid() == null && b2.getCompanyid() == null) {
                    iReturn = 0;
                } else if (b1.getCompanyid() != null && b2.getCompanyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCompanyid().compareTo(b2.getCompanyid());
                }
                break;
            case ContractManager.ID_CONTRAGENTID:
                if (b1.getContragentid() == null && b2.getContragentid() != null) {
                    iReturn = -1;
                } else if (b1.getContragentid() == null && b2.getContragentid() == null) {
                    iReturn = 0;
                } else if (b1.getContragentid() != null && b2.getContragentid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContragentid().compareTo(b2.getContragentid());
                }
                break;
            case ContractManager.ID_NUM:
                if (b1.getNum() == null && b2.getNum() != null) {
                    iReturn = -1;
                } else if (b1.getNum() == null && b2.getNum() == null) {
                    iReturn = 0;
                } else if (b1.getNum() != null && b2.getNum() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getNum().compareTo(b2.getNum());
                }
                break;
            case ContractManager.ID_STARTDATE:
                if (b1.getStartdate() == null && b2.getStartdate() != null) {
                    iReturn = -1;
                } else if (b1.getStartdate() == null && b2.getStartdate() == null) {
                    iReturn = 0;
                } else if (b1.getStartdate() != null && b2.getStartdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getStartdate().compareTo(b2.getStartdate());
                }
                break;
            case ContractManager.ID_ENDDATE:
                if (b1.getEnddate() == null && b2.getEnddate() != null) {
                    iReturn = -1;
                } else if (b1.getEnddate() == null && b2.getEnddate() == null) {
                    iReturn = 0;
                } else if (b1.getEnddate() != null && b2.getEnddate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getEnddate().compareTo(b2.getEnddate());
                }
                break;
            case ContractManager.ID_PRICE:
                if (b1.getPrice() == null && b2.getPrice() != null) {
                    iReturn = -1;
                } else if (b1.getPrice() == null && b2.getPrice() == null) {
                    iReturn = 0;
                } else if (b1.getPrice() != null && b2.getPrice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPrice().compareTo(b2.getPrice());
                }
                break;
            case ContractManager.ID_SAMPLETYPEID:
                if (b1.getSampletypeid() == null && b2.getSampletypeid() != null) {
                    iReturn = -1;
                } else if (b1.getSampletypeid() == null && b2.getSampletypeid() == null) {
                    iReturn = 0;
                } else if (b1.getSampletypeid() != null && b2.getSampletypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSampletypeid().compareTo(b2.getSampletypeid());
                }
                break;
            case ContractManager.ID_CONTRACTTYPE:
                if (b1.getContracttype() == null && b2.getContracttype() != null) {
                    iReturn = -1;
                } else if (b1.getContracttype() == null && b2.getContracttype() == null) {
                    iReturn = 0;
                } else if (b1.getContracttype() != null && b2.getContracttype() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContracttype().compareTo(b2.getContracttype());
                }
                break;
            case ContractManager.ID_PATH:
                if (b1.getPath() == null && b2.getPath() != null) {
                    iReturn = -1;
                } else if (b1.getPath() == null && b2.getPath() == null) {
                    iReturn = 0;
                } else if (b1.getPath() != null && b2.getPath() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPath().compareTo(b2.getPath());
                }
                break;
            case ContractManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case ContractManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case ContractManager.ID_OWNERID:
                if (b1.getOwnerid() == null && b2.getOwnerid() != null) {
                    iReturn = -1;
                } else if (b1.getOwnerid() == null && b2.getOwnerid() == null) {
                    iReturn = 0;
                } else if (b1.getOwnerid() != null && b2.getOwnerid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getOwnerid().compareTo(b2.getOwnerid());
                }
                break;
            case ContractManager.ID_INFO:
                if (b1.getInfo() == null && b2.getInfo() != null) {
                    iReturn = -1;
                } else if (b1.getInfo() == null && b2.getInfo() == null) {
                    iReturn = 0;
                } else if (b1.getInfo() != null && b2.getInfo() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInfo().compareTo(b2.getInfo());
                }
                break;
            case ContractManager.ID_STATUS:
                if (b1.getStatus() == null && b2.getStatus() != null) {
                    iReturn = -1;
                } else if (b1.getStatus() == null && b2.getStatus() == null) {
                    iReturn = 0;
                } else if (b1.getStatus() != null && b2.getStatus() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getStatus().compareTo(b2.getStatus());
                }
                break;
            case ContractManager.ID_CONTRACTOWNERID:
                if (b1.getContractownerid() == null && b2.getContractownerid() != null) {
                    iReturn = -1;
                } else if (b1.getContractownerid() == null && b2.getContractownerid() == null) {
                    iReturn = 0;
                } else if (b1.getContractownerid() != null && b2.getContractownerid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractownerid().compareTo(b2.getContractownerid());
                }
                break;
            case ContractManager.ID_REMINDDATE:
                if (b1.getReminddate() == null && b2.getReminddate() != null) {
                    iReturn = -1;
                } else if (b1.getReminddate() == null && b2.getReminddate() == null) {
                    iReturn = 0;
                } else if (b1.getReminddate() != null && b2.getReminddate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReminddate().compareTo(b2.getReminddate());
                }
                break;
            case ContractManager.ID_REMINDTIME:
                if (b1.getRemindtime() == null && b2.getRemindtime() != null) {
                    iReturn = -1;
                } else if (b1.getRemindtime() == null && b2.getRemindtime() == null) {
                    iReturn = 0;
                } else if (b1.getRemindtime() != null && b2.getRemindtime() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRemindtime().compareTo(b2.getRemindtime());
                }
                break;
            case ContractManager.ID_REMINDPID:
                if (b1.getRemindpid() == null && b2.getRemindpid() != null) {
                    iReturn = -1;
                } else if (b1.getRemindpid() == null && b2.getRemindpid() == null) {
                    iReturn = 0;
                } else if (b1.getRemindpid() != null && b2.getRemindpid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRemindpid().compareTo(b2.getRemindpid());
                }
                break;
            case ContractManager.ID_STAMP:
                if (b1.getStamp() == null && b2.getStamp() != null) {
                    iReturn = -1;
                } else if (b1.getStamp() == null && b2.getStamp() == null) {
                    iReturn = 0;
                } else if (b1.getStamp() != null && b2.getStamp() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getStamp().compareTo(b2.getStamp());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
