// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the TransitsampleitemBean objects.
 */
public class TransitsampleitemComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TransitsampleitemComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TransitsampleitemComparator(TransitsampleitemManager.TRANSITSAMPLEITEMID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TransitsampleitemManager.ID_TRANSITSAMPLEITEMID
     *   <li>TransitsampleitemManager.ID_CONTRACTSAMPLEITEMID
     *   <li>TransitsampleitemManager.ID_LOCATIONID
     *   <li>TransitsampleitemManager.ID_TRANSITDATE
     *   <li>TransitsampleitemManager.ID_TRANSITTIME
     *   <li>TransitsampleitemManager.ID_CONTAINER
     *   <li>TransitsampleitemManager.ID_RECEIVER
     *   <li>TransitsampleitemManager.ID_RESEARCHER
     *   <li>TransitsampleitemManager.ID_PERSONALS
     *   <li>TransitsampleitemManager.ID_REGBYID
     *   <li>TransitsampleitemManager.ID_REGDATE
     *   <li>TransitsampleitemManager.ID_STATUS
     *   <li>TransitsampleitemManager.ID_PARENTID
     *   <li>TransitsampleitemManager.ID_RESPONSIBLEID
     *   <li>TransitsampleitemManager.ID_SENDREASON
     *   <li>TransitsampleitemManager.ID_SENDCONDITION
     *   <li>TransitsampleitemManager.ID_GETDATE
     *   <li>TransitsampleitemManager.ID_GETBYID
     *   <li>TransitsampleitemManager.ID_FROMLOCATIONID
     *   <li>TransitsampleitemManager.ID_TRANSITACTID
     * </ul>
     */
    public TransitsampleitemComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TransitsampleitemComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TransitsampleitemComparator(TransitsampleitemManager.TRANSITSAMPLEITEMID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TransitsampleitemManager.ID_TRANSITSAMPLEITEMID
     *   <li>TransitsampleitemManager.ID_CONTRACTSAMPLEITEMID
     *   <li>TransitsampleitemManager.ID_LOCATIONID
     *   <li>TransitsampleitemManager.ID_OUTSIDE
     *   <li>TransitsampleitemManager.ID_TRANSITDATE
     *   <li>TransitsampleitemManager.ID_TRANSITTIME
     *   <li>TransitsampleitemManager.ID_CONTAINER
     *   <li>TransitsampleitemManager.ID_RECEIVER
     *   <li>TransitsampleitemManager.ID_RESEARCHER
     *   <li>TransitsampleitemManager.ID_PERSONALS
     *   <li>TransitsampleitemManager.ID_REGBYID
     *   <li>TransitsampleitemManager.ID_REGDATE
     *   <li>TransitsampleitemManager.ID_STATUS
     *   <li>TransitsampleitemManager.ID_PARENTID
     *   <li>TransitsampleitemManager.ID_RESPONSIBLEID
     *   <li>TransitsampleitemManager.ID_SENDREASON
     *   <li>TransitsampleitemManager.ID_SENDCONDITION
     *   <li>TransitsampleitemManager.ID_GETDATE
     *   <li>TransitsampleitemManager.ID_GETBYID
     *   <li>TransitsampleitemManager.ID_FROMLOCATIONID
     *   <li>TransitsampleitemManager.ID_TRANSITACTID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TransitsampleitemComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TransitsampleitemBean b1 = (TransitsampleitemBean)pObj1;
        TransitsampleitemBean b2 = (TransitsampleitemBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TransitsampleitemManager.ID_TRANSITSAMPLEITEMID:
                if (b1.getTransitsampleitemid() == null && b2.getTransitsampleitemid() != null) {
                    iReturn = -1;
                } else if (b1.getTransitsampleitemid() == null && b2.getTransitsampleitemid() == null) {
                    iReturn = 0;
                } else if (b1.getTransitsampleitemid() != null && b2.getTransitsampleitemid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTransitsampleitemid().compareTo(b2.getTransitsampleitemid());
                }
                break;
            case TransitsampleitemManager.ID_CONTRACTSAMPLEITEMID:
                if (b1.getContractsampleitemid() == null && b2.getContractsampleitemid() != null) {
                    iReturn = -1;
                } else if (b1.getContractsampleitemid() == null && b2.getContractsampleitemid() == null) {
                    iReturn = 0;
                } else if (b1.getContractsampleitemid() != null && b2.getContractsampleitemid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractsampleitemid().compareTo(b2.getContractsampleitemid());
                }
                break;
            case TransitsampleitemManager.ID_LOCATIONID:
                if (b1.getLocationid() == null && b2.getLocationid() != null) {
                    iReturn = -1;
                } else if (b1.getLocationid() == null && b2.getLocationid() == null) {
                    iReturn = 0;
                } else if (b1.getLocationid() != null && b2.getLocationid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLocationid().compareTo(b2.getLocationid());
                }
                break;
            case TransitsampleitemManager.ID_TRANSITDATE:
                if (b1.getTransitdate() == null && b2.getTransitdate() != null) {
                    iReturn = -1;
                } else if (b1.getTransitdate() == null && b2.getTransitdate() == null) {
                    iReturn = 0;
                } else if (b1.getTransitdate() != null && b2.getTransitdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTransitdate().compareTo(b2.getTransitdate());
                }
                break;
            case TransitsampleitemManager.ID_TRANSITTIME:
                if (b1.getTransittime() == null && b2.getTransittime() != null) {
                    iReturn = -1;
                } else if (b1.getTransittime() == null && b2.getTransittime() == null) {
                    iReturn = 0;
                } else if (b1.getTransittime() != null && b2.getTransittime() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTransittime().compareTo(b2.getTransittime());
                }
                break;
            case TransitsampleitemManager.ID_CONTAINER:
                if (b1.getContainer() == null && b2.getContainer() != null) {
                    iReturn = -1;
                } else if (b1.getContainer() == null && b2.getContainer() == null) {
                    iReturn = 0;
                } else if (b1.getContainer() != null && b2.getContainer() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContainer().compareTo(b2.getContainer());
                }
                break;
            case TransitsampleitemManager.ID_RECEIVER:
                if (b1.getReceiver() == null && b2.getReceiver() != null) {
                    iReturn = -1;
                } else if (b1.getReceiver() == null && b2.getReceiver() == null) {
                    iReturn = 0;
                } else if (b1.getReceiver() != null && b2.getReceiver() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReceiver().compareTo(b2.getReceiver());
                }
                break;
            case TransitsampleitemManager.ID_RESEARCHER:
                if (b1.getResearcher() == null && b2.getResearcher() != null) {
                    iReturn = -1;
                } else if (b1.getResearcher() == null && b2.getResearcher() == null) {
                    iReturn = 0;
                } else if (b1.getResearcher() != null && b2.getResearcher() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getResearcher().compareTo(b2.getResearcher());
                }
                break;
            case TransitsampleitemManager.ID_PERSONALS:
                if (b1.getPersonals() == null && b2.getPersonals() != null) {
                    iReturn = -1;
                } else if (b1.getPersonals() == null && b2.getPersonals() == null) {
                    iReturn = 0;
                } else if (b1.getPersonals() != null && b2.getPersonals() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPersonals().compareTo(b2.getPersonals());
                }
                break;
            case TransitsampleitemManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case TransitsampleitemManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case TransitsampleitemManager.ID_STATUS:
                if (b1.getStatus() == null && b2.getStatus() != null) {
                    iReturn = -1;
                } else if (b1.getStatus() == null && b2.getStatus() == null) {
                    iReturn = 0;
                } else if (b1.getStatus() != null && b2.getStatus() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getStatus().compareTo(b2.getStatus());
                }
                break;
            case TransitsampleitemManager.ID_PARENTID:
                if (b1.getParentid() == null && b2.getParentid() != null) {
                    iReturn = -1;
                } else if (b1.getParentid() == null && b2.getParentid() == null) {
                    iReturn = 0;
                } else if (b1.getParentid() != null && b2.getParentid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getParentid().compareTo(b2.getParentid());
                }
                break;
            case TransitsampleitemManager.ID_RESPONSIBLEID:
                if (b1.getResponsibleid() == null && b2.getResponsibleid() != null) {
                    iReturn = -1;
                } else if (b1.getResponsibleid() == null && b2.getResponsibleid() == null) {
                    iReturn = 0;
                } else if (b1.getResponsibleid() != null && b2.getResponsibleid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getResponsibleid().compareTo(b2.getResponsibleid());
                }
                break;
            case TransitsampleitemManager.ID_SENDREASON:
                if (b1.getSendreason() == null && b2.getSendreason() != null) {
                    iReturn = -1;
                } else if (b1.getSendreason() == null && b2.getSendreason() == null) {
                    iReturn = 0;
                } else if (b1.getSendreason() != null && b2.getSendreason() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSendreason().compareTo(b2.getSendreason());
                }
                break;
            case TransitsampleitemManager.ID_SENDCONDITION:
                if (b1.getSendcondition() == null && b2.getSendcondition() != null) {
                    iReturn = -1;
                } else if (b1.getSendcondition() == null && b2.getSendcondition() == null) {
                    iReturn = 0;
                } else if (b1.getSendcondition() != null && b2.getSendcondition() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSendcondition().compareTo(b2.getSendcondition());
                }
                break;
            case TransitsampleitemManager.ID_GETDATE:
                if (b1.getGetdate() == null && b2.getGetdate() != null) {
                    iReturn = -1;
                } else if (b1.getGetdate() == null && b2.getGetdate() == null) {
                    iReturn = 0;
                } else if (b1.getGetdate() != null && b2.getGetdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGetdate().compareTo(b2.getGetdate());
                }
                break;
            case TransitsampleitemManager.ID_GETBYID:
                if (b1.getGetbyid() == null && b2.getGetbyid() != null) {
                    iReturn = -1;
                } else if (b1.getGetbyid() == null && b2.getGetbyid() == null) {
                    iReturn = 0;
                } else if (b1.getGetbyid() != null && b2.getGetbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getGetbyid().compareTo(b2.getGetbyid());
                }
                break;
            case TransitsampleitemManager.ID_FROMLOCATIONID:
                if (b1.getFromlocationid() == null && b2.getFromlocationid() != null) {
                    iReturn = -1;
                } else if (b1.getFromlocationid() == null && b2.getFromlocationid() == null) {
                    iReturn = 0;
                } else if (b1.getFromlocationid() != null && b2.getFromlocationid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFromlocationid().compareTo(b2.getFromlocationid());
                }
                break;
            case TransitsampleitemManager.ID_TRANSITACTID:
                if (b1.getTransitactid() == null && b2.getTransitactid() != null) {
                    iReturn = -1;
                } else if (b1.getTransitactid() == null && b2.getTransitactid() == null) {
                    iReturn = 0;
                } else if (b1.getTransitactid() != null && b2.getTransitactid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTransitactid().compareTo(b2.getTransitactid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
