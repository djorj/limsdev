// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class QualitycontrolBean
// extends+ 

// extends- 
{
    private Long qualitycontrolid;
    private boolean qualitycontrolid_is_modified = false;
    private boolean qualitycontrolid_is_initialized = false;
    
    private Long contractsampleitemid;
    private boolean contractsampleitemid_is_modified = false;
    private boolean contractsampleitemid_is_initialized = false;
    
    private Integer qcPerson;
    private boolean qcPerson_is_modified = false;
    private boolean qcPerson_is_initialized = false;
    
    private java.sql.Timestamp qcDatetime;
    private boolean qcDatetime_is_modified = false;
    private boolean qcDatetime_is_initialized = false;
    
    private String positive;
    private boolean positive_is_modified = false;
    private boolean positive_is_initialized = false;
    
    private String negative;
    private boolean negative_is_modified = false;
    private boolean negative_is_initialized = false;
    
    private String info;
    private boolean info_is_modified = false;
    private boolean info_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private String lot;
    private boolean lot_is_modified = false;
    private boolean lot_is_initialized = false;
    
    private Integer deviceid;
    private boolean deviceid_is_modified = false;
    private boolean deviceid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    QualitycontrolBean()
    {
    }
    
    /**
     * Getter method for qualitycontrolid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.qualitycontrolid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of qualitycontrolid
     */
    public Long getQualitycontrolid()
    {
        return qualitycontrolid; 
    }

    /**
     * Setter method for qualitycontrolid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qualitycontrolid
     */
    public void setQualitycontrolid(Long newVal) {
        if ((newVal != null && this.qualitycontrolid != null && (newVal.compareTo(this.qualitycontrolid) == 0)) || 
            (newVal == null && this.qualitycontrolid == null && qualitycontrolid_is_initialized)) {
            return; 
        } 
        this.qualitycontrolid = newVal; 
        qualitycontrolid_is_modified = true; 
        qualitycontrolid_is_initialized = true; 
    }

    /**
     * Setter method for qualitycontrolid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qualitycontrolid
     */
    public void setQualitycontrolid(long newVal) {
        setQualitycontrolid(new Long(newVal));
    }

    /**
     * Determines if the qualitycontrolid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQualitycontrolidModified() {
        return qualitycontrolid_is_modified; 
    }

    /**
     * Determines if the qualitycontrolid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQualitycontrolidInitialized() {
        return qualitycontrolid_is_initialized; 
    }

    /**
     * Getter method for contractsampleitemid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.contractsampleitemid
     * <li> foreign key: contractsampleitem.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleitemid
     */
    public Long getContractsampleitemid()
    {
        return contractsampleitemid; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(Long newVal) {
        if ((newVal != null && this.contractsampleitemid != null && (newVal.compareTo(this.contractsampleitemid) == 0)) || 
            (newVal == null && this.contractsampleitemid == null && contractsampleitemid_is_initialized)) {
            return; 
        } 
        this.contractsampleitemid = newVal; 
        contractsampleitemid_is_modified = true; 
        contractsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(long newVal) {
        setContractsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleitemidModified() {
        return contractsampleitemid_is_modified; 
    }

    /**
     * Determines if the contractsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleitemidInitialized() {
        return contractsampleitemid_is_initialized; 
    }

    /**
     * Getter method for qcPerson.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.qc_person
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of qcPerson
     */
    public Integer getQcPerson()
    {
        return qcPerson; 
    }

    /**
     * Setter method for qcPerson.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qcPerson
     */
    public void setQcPerson(Integer newVal) {
        if ((newVal != null && this.qcPerson != null && (newVal.compareTo(this.qcPerson) == 0)) || 
            (newVal == null && this.qcPerson == null && qcPerson_is_initialized)) {
            return; 
        } 
        this.qcPerson = newVal; 
        qcPerson_is_modified = true; 
        qcPerson_is_initialized = true; 
    }

    /**
     * Setter method for qcPerson.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qcPerson
     */
    public void setQcPerson(int newVal) {
        setQcPerson(new Integer(newVal));
    }

    /**
     * Determines if the qcPerson has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQcPersonModified() {
        return qcPerson_is_modified; 
    }

    /**
     * Determines if the qcPerson has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQcPersonInitialized() {
        return qcPerson_is_initialized; 
    }

    /**
     * Getter method for qcDatetime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.qc_datetime
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of qcDatetime
     */
    public java.sql.Timestamp getQcDatetime()
    {
        return qcDatetime; 
    }

    /**
     * Setter method for qcDatetime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qcDatetime
     */
    public void setQcDatetime(java.sql.Timestamp newVal) {
        if ((newVal != null && this.qcDatetime != null && (newVal.compareTo(this.qcDatetime) == 0)) || 
            (newVal == null && this.qcDatetime == null && qcDatetime_is_initialized)) {
            return; 
        } 
        this.qcDatetime = newVal; 
        qcDatetime_is_modified = true; 
        qcDatetime_is_initialized = true; 
    }

    /**
     * Setter method for qcDatetime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qcDatetime
     */
    public void setQcDatetime(long newVal) {
        setQcDatetime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the qcDatetime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQcDatetimeModified() {
        return qcDatetime_is_modified; 
    }

    /**
     * Determines if the qcDatetime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQcDatetimeInitialized() {
        return qcDatetime_is_initialized; 
    }

    /**
     * Getter method for positive.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.positive
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of positive
     */
    public String getPositive()
    {
        return positive; 
    }

    /**
     * Setter method for positive.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to positive
     */
    public void setPositive(String newVal) {
        if ((newVal != null && this.positive != null && (newVal.compareTo(this.positive) == 0)) || 
            (newVal == null && this.positive == null && positive_is_initialized)) {
            return; 
        } 
        this.positive = newVal; 
        positive_is_modified = true; 
        positive_is_initialized = true; 
    }

    /**
     * Determines if the positive has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPositiveModified() {
        return positive_is_modified; 
    }

    /**
     * Determines if the positive has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPositiveInitialized() {
        return positive_is_initialized; 
    }

    /**
     * Getter method for negative.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.negative
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of negative
     */
    public String getNegative()
    {
        return negative; 
    }

    /**
     * Setter method for negative.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to negative
     */
    public void setNegative(String newVal) {
        if ((newVal != null && this.negative != null && (newVal.compareTo(this.negative) == 0)) || 
            (newVal == null && this.negative == null && negative_is_initialized)) {
            return; 
        } 
        this.negative = newVal; 
        negative_is_modified = true; 
        negative_is_initialized = true; 
    }

    /**
     * Determines if the negative has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNegativeModified() {
        return negative_is_modified; 
    }

    /**
     * Determines if the negative has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNegativeInitialized() {
        return negative_is_initialized; 
    }

    /**
     * Getter method for info.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.info
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of info
     */
    public String getInfo()
    {
        return info; 
    }

    /**
     * Setter method for info.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to info
     */
    public void setInfo(String newVal) {
        if ((newVal != null && this.info != null && (newVal.compareTo(this.info) == 0)) || 
            (newVal == null && this.info == null && info_is_initialized)) {
            return; 
        } 
        this.info = newVal; 
        info_is_modified = true; 
        info_is_initialized = true; 
    }

    /**
     * Determines if the info has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInfoModified() {
        return info_is_modified; 
    }

    /**
     * Determines if the info has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInfoInitialized() {
        return info_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for lot.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.lot
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of lot
     */
    public String getLot()
    {
        return lot; 
    }

    /**
     * Setter method for lot.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lot
     */
    public void setLot(String newVal) {
        if ((newVal != null && this.lot != null && (newVal.compareTo(this.lot) == 0)) || 
            (newVal == null && this.lot == null && lot_is_initialized)) {
            return; 
        } 
        this.lot = newVal; 
        lot_is_modified = true; 
        lot_is_initialized = true; 
    }

    /**
     * Determines if the lot has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLotModified() {
        return lot_is_modified; 
    }

    /**
     * Determines if the lot has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLotInitialized() {
        return lot_is_initialized; 
    }

    /**
     * Getter method for deviceid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: qualitycontrol.deviceid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of deviceid
     */
    public Integer getDeviceid()
    {
        return deviceid; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(Integer newVal) {
        if ((newVal != null && this.deviceid != null && (newVal.compareTo(this.deviceid) == 0)) || 
            (newVal == null && this.deviceid == null && deviceid_is_initialized)) {
            return; 
        } 
        this.deviceid = newVal; 
        deviceid_is_modified = true; 
        deviceid_is_initialized = true; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(int newVal) {
        setDeviceid(new Integer(newVal));
    }

    /**
     * Determines if the deviceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeviceidModified() {
        return deviceid_is_modified; 
    }

    /**
     * Determines if the deviceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeviceidInitialized() {
        return deviceid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return qualitycontrolid_is_modified || 
		contractsampleitemid_is_modified || 
		qcPerson_is_modified || 
		qcDatetime_is_modified || 
		positive_is_modified || 
		negative_is_modified || 
		info_is_modified || 
		deleted_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		lot_is_modified || 
		deviceid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        qualitycontrolid_is_modified = false;
        contractsampleitemid_is_modified = false;
        qcPerson_is_modified = false;
        qcDatetime_is_modified = false;
        positive_is_modified = false;
        negative_is_modified = false;
        info_is_modified = false;
        deleted_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        lot_is_modified = false;
        deviceid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(QualitycontrolBean bean) {
        setQualitycontrolid(bean.getQualitycontrolid());
        setContractsampleitemid(bean.getContractsampleitemid());
        setQcPerson(bean.getQcPerson());
        setQcDatetime(bean.getQcDatetime());
        setPositive(bean.getPositive());
        setNegative(bean.getNegative());
        setInfo(bean.getInfo());
        setDeleted(bean.getDeleted());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setLot(bean.getLot());
        setDeviceid(bean.getDeviceid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[qualitycontrol] "
                 + "\n - qualitycontrol.qualitycontrolid = " + (qualitycontrolid_is_initialized ? ("[" + (qualitycontrolid == null ? null : qualitycontrolid.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.contractsampleitemid = " + (contractsampleitemid_is_initialized ? ("[" + (contractsampleitemid == null ? null : contractsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.qc_person = " + (qcPerson_is_initialized ? ("[" + (qcPerson == null ? null : qcPerson.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.qc_datetime = " + (qcDatetime_is_initialized ? ("[" + (qcDatetime == null ? null : qcDatetime.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.positive = " + (positive_is_initialized ? ("[" + (positive == null ? null : positive.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.negative = " + (negative_is_initialized ? ("[" + (negative == null ? null : negative.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.info = " + (info_is_initialized ? ("[" + (info == null ? null : info.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.lot = " + (lot_is_initialized ? ("[" + (lot == null ? null : lot.toString()) + "]") : "not initialized") + ""
                 + "\n - qualitycontrol.deviceid = " + (deviceid_is_initialized ? ("[" + (deviceid == null ? null : deviceid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
