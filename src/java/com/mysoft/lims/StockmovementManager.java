// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the stockmovement table.
 */
public class StockmovementManager
// extends+ 

// extends- 
{

    /**
     * Column stockmovementid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_STOCKMOVEMENTID = 0;
    public static final int TYPE_STOCKMOVEMENTID = Types.BIGINT;
    public static final String NAME_STOCKMOVEMENTID = "stockmovementid";

    /**
     * Column stockid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STOCKID = 1;
    public static final int TYPE_STOCKID = Types.INTEGER;
    public static final String NAME_STOCKID = "stockid";

    /**
     * Column operdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_OPERDATE = 2;
    public static final int TYPE_OPERDATE = Types.TIMESTAMP;
    public static final String NAME_OPERDATE = "operdate";

    /**
     * Column productid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PRODUCTID = 3;
    public static final int TYPE_PRODUCTID = Types.BIGINT;
    public static final String NAME_PRODUCTID = "productid";

    /**
     * Column operid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_OPERID = 4;
    public static final int TYPE_OPERID = Types.INTEGER;
    public static final String NAME_OPERID = "operid";

    /**
     * Column quantity of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_QUANTITY = 5;
    public static final int TYPE_QUANTITY = Types.DOUBLE;
    public static final String NAME_QUANTITY = "quantity";

    /**
     * Column unitprice of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_UNITPRICE = 6;
    public static final int TYPE_UNITPRICE = Types.DOUBLE;
    public static final String NAME_UNITPRICE = "unitprice";

    /**
     * Column parentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PARENTID = 7;
    public static final int TYPE_PARENTID = Types.BIGINT;
    public static final String NAME_PARENTID = "parentid";

    /**
     * Column curquantity of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_CURQUANTITY = 8;
    public static final int TYPE_CURQUANTITY = Types.DOUBLE;
    public static final String NAME_CURQUANTITY = "curquantity";

    /**
     * Column mstockid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_MSTOCKID = 9;
    public static final int TYPE_MSTOCKID = Types.INTEGER;
    public static final String NAME_MSTOCKID = "mstockid";

    /**
     * Column mcontragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_MCONTRAGENTID = 10;
    public static final int TYPE_MCONTRAGENTID = Types.BIGINT;
    public static final String NAME_MCONTRAGENTID = "mcontragentid";

    /**
     * Column testresultid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_TESTRESULTID = 11;
    public static final int TYPE_TESTRESULTID = Types.BIGINT;
    public static final String NAME_TESTRESULTID = "testresultid";

    /**
     * Column testresultquantity of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_TESTRESULTQUANTITY = 12;
    public static final int TYPE_TESTRESULTQUANTITY = Types.DOUBLE;
    public static final String NAME_TESTRESULTQUANTITY = "testresultquantity";

    /**
     * Column invoiceid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_INVOICEID = 13;
    public static final int TYPE_INVOICEID = Types.BIGINT;
    public static final String NAME_INVOICEID = "invoiceid";

    /**
     * Column note of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NOTE = 14;
    public static final int TYPE_NOTE = Types.VARCHAR;
    public static final String NAME_NOTE = "note";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 15;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 16;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column expdate1 of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_EXPDATE1 = 17;
    public static final int TYPE_EXPDATE1 = Types.TIMESTAMP;
    public static final String NAME_EXPDATE1 = "expdate1";

    /**
     * Column expdate2 of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_EXPDATE2 = 18;
    public static final int TYPE_EXPDATE2 = Types.TIMESTAMP;
    public static final String NAME_EXPDATE2 = "expdate2";


    private static final String TABLE_NAME = "stockmovement";

    /**
     * Create an array of type string containing all the fields of the stockmovement table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "stockmovement.stockmovementid"
        ,"stockmovement.stockid"
        ,"stockmovement.operdate"
        ,"stockmovement.productid"
        ,"stockmovement.operid"
        ,"stockmovement.quantity"
        ,"stockmovement.unitprice"
        ,"stockmovement.parentid"
        ,"stockmovement.curquantity"
        ,"stockmovement.mstockid"
        ,"stockmovement.mcontragentid"
        ,"stockmovement.testresultid"
        ,"stockmovement.testresultquantity"
        ,"stockmovement.invoiceid"
        ,"stockmovement.note"
        ,"stockmovement.regbyid"
        ,"stockmovement.regdate"
        ,"stockmovement.expdate1"
        ,"stockmovement.expdate2"
    };

    /**
     * Field that contains the comma separated fields of the stockmovement table.
     */
    private static final String ALL_FIELDS = "stockmovement.stockmovementid"
                            + ",stockmovement.stockid"
                            + ",stockmovement.operdate"
                            + ",stockmovement.productid"
                            + ",stockmovement.operid"
                            + ",stockmovement.quantity"
                            + ",stockmovement.unitprice"
                            + ",stockmovement.parentid"
                            + ",stockmovement.curquantity"
                            + ",stockmovement.mstockid"
                            + ",stockmovement.mcontragentid"
                            + ",stockmovement.testresultid"
                            + ",stockmovement.testresultquantity"
                            + ",stockmovement.invoiceid"
                            + ",stockmovement.note"
                            + ",stockmovement.regbyid"
                            + ",stockmovement.regdate"
                            + ",stockmovement.expdate1"
                            + ",stockmovement.expdate2";

    private static StockmovementManager singleton = new StockmovementManager();

    /**
     * Get the StockmovementManager singleton.
     *
     * @return StockmovementManager 
     */
    synchronized public static StockmovementManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own StockmovementManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(StockmovementManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new StockmovementBean instance.
     *
     * @return the new StockmovementBean 
     */
    public StockmovementBean createStockmovementBean()
    {
        return new StockmovementBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a StockmovementBean from the stockmovement using its key fields.
     *
     * @return a unique StockmovementBean 
     */
    //12
    public StockmovementBean loadByPrimaryKey(Long stockmovementid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE stockmovement.stockmovementid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, stockmovementid);
            StockmovementBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long stockmovementid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from stockmovement WHERE stockmovement.stockmovementid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, stockmovementid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads StockmovementBean array from the stockmovement table using its mcontragentid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByMcontragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE mcontragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by mcontragentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByMcontragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE mcontragentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads StockmovementBean array from the stockmovement table using its stockid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByStockid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE stockid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by stockid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByStockid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE stockid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads StockmovementBean array from the stockmovement table using its mstockid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByMstockid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE mstockid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by mstockid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByMstockid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE mstockid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads StockmovementBean array from the stockmovement table using its invoiceid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByInvoiceid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE invoiceid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by invoiceid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByInvoiceid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE invoiceid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads StockmovementBean array from the stockmovement table using its operid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByOperid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE operid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by operid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByOperid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE operid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads StockmovementBean array from the stockmovement table using its regbyid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads StockmovementBean array from the stockmovement table using its productid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByProductid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE productid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by productid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByProductid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE productid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads StockmovementBean array from the stockmovement table using its parentid field.
     *
     * @return an array of StockmovementBean 
     */
    // LOAD BY IMPORTED KEY
    public StockmovementBean[] loadByParentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement WHERE parentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the stockmovement table by parentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByParentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM stockmovement WHERE parentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ContragentBean object from the stockmovement.contragentid field.
     *
     * @param pObject the StockmovementBean 
     * @return the associated ContragentBean pObject
     */
    // GET IMPORTED
    public ContragentBean getContragentBean(StockmovementBean pObject) throws SQLException
    {
        ContragentBean other = ContragentManager.getInstance().createContragentBean();
        other.setContragentid(pObject.getMcontragentid());
        return ContragentManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the StockmovementBean object to the ContragentBean object.
     *
     * @param pObject the StockmovementBean object to use
     * @param pObjectToBeSet the ContragentBean object to associate to the StockmovementBean 
     * @return the associated ContragentBean pObject
     */
    // SET IMPORTED
    public StockmovementBean setContragentBean(StockmovementBean pObject,ContragentBean pObjectToBeSet)
    {
        pObject.setMcontragentid(pObjectToBeSet.getContragentid());
        return pObject;
    }

    /**
     * Retrieves the InstitutionBean object from the stockmovement.institutionid field.
     *
     * @param pObject the StockmovementBean 
     * @return the associated InstitutionBean pObject
     */
    // GET IMPORTED
    public InstitutionBean getInstitutionBean(StockmovementBean pObject) throws SQLException
    {
        InstitutionBean other = InstitutionManager.getInstance().createInstitutionBean();
        other.setInstitutionid(pObject.getStockid());
        return InstitutionManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the StockmovementBean object to the InstitutionBean object.
     *
     * @param pObject the StockmovementBean object to use
     * @param pObjectToBeSet the InstitutionBean object to associate to the StockmovementBean 
     * @return the associated InstitutionBean pObject
     */
    // SET IMPORTED
    public StockmovementBean setInstitutionBean(StockmovementBean pObject,InstitutionBean pObjectToBeSet)
    {
        pObject.setStockid(pObjectToBeSet.getInstitutionid());
        return pObject;
    }

    /**
     * Retrieves the InvoiceBean object from the stockmovement.invoiceid field.
     *
     * @param pObject the StockmovementBean 
     * @return the associated InvoiceBean pObject
     */
    // GET IMPORTED
    public InvoiceBean getInvoiceBean(StockmovementBean pObject) throws SQLException
    {
        InvoiceBean other = InvoiceManager.getInstance().createInvoiceBean();
        other.setInvoiceid(pObject.getInvoiceid());
        return InvoiceManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the StockmovementBean object to the InvoiceBean object.
     *
     * @param pObject the StockmovementBean object to use
     * @param pObjectToBeSet the InvoiceBean object to associate to the StockmovementBean 
     * @return the associated InvoiceBean pObject
     */
    // SET IMPORTED
    public StockmovementBean setInvoiceBean(StockmovementBean pObject,InvoiceBean pObjectToBeSet)
    {
        pObject.setInvoiceid(pObjectToBeSet.getInvoiceid());
        return pObject;
    }

    /**
     * Retrieves the OperBean object from the stockmovement.operid field.
     *
     * @param pObject the StockmovementBean 
     * @return the associated OperBean pObject
     */
    // GET IMPORTED
    public OperBean getOperBean(StockmovementBean pObject) throws SQLException
    {
        OperBean other = OperManager.getInstance().createOperBean();
        other.setOperid(pObject.getOperid());
        return OperManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the StockmovementBean object to the OperBean object.
     *
     * @param pObject the StockmovementBean object to use
     * @param pObjectToBeSet the OperBean object to associate to the StockmovementBean 
     * @return the associated OperBean pObject
     */
    // SET IMPORTED
    public StockmovementBean setOperBean(StockmovementBean pObject,OperBean pObjectToBeSet)
    {
        pObject.setOperid(pObjectToBeSet.getOperid());
        return pObject;
    }

    /**
     * Retrieves the PersonellBean object from the stockmovement.personellid field.
     *
     * @param pObject the StockmovementBean 
     * @return the associated PersonellBean pObject
     */
    // GET IMPORTED
    public PersonellBean getPersonellBean(StockmovementBean pObject) throws SQLException
    {
        PersonellBean other = PersonellManager.getInstance().createPersonellBean();
        other.setPersonellid(pObject.getRegbyid());
        return PersonellManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the StockmovementBean object to the PersonellBean object.
     *
     * @param pObject the StockmovementBean object to use
     * @param pObjectToBeSet the PersonellBean object to associate to the StockmovementBean 
     * @return the associated PersonellBean pObject
     */
    // SET IMPORTED
    public StockmovementBean setPersonellBean(StockmovementBean pObject,PersonellBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonellid());
        return pObject;
    }

    /**
     * Retrieves the ProductBean object from the stockmovement.productid field.
     *
     * @param pObject the StockmovementBean 
     * @return the associated ProductBean pObject
     */
    // GET IMPORTED
    public ProductBean getProductBean(StockmovementBean pObject) throws SQLException
    {
        ProductBean other = ProductManager.getInstance().createProductBean();
        other.setProductid(pObject.getProductid());
        return ProductManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the StockmovementBean object to the ProductBean object.
     *
     * @param pObject the StockmovementBean object to use
     * @param pObjectToBeSet the ProductBean object to associate to the StockmovementBean 
     * @return the associated ProductBean pObject
     */
    // SET IMPORTED
    public StockmovementBean setProductBean(StockmovementBean pObject,ProductBean pObjectToBeSet)
    {
        pObject.setProductid(pObjectToBeSet.getProductid());
        return pObject;
    }

    /**
     * Retrieves the StockmovementBean object from the stockmovement.stockmovementid field.
     *
     * @param pObject the StockmovementBean 
     * @return the associated StockmovementBean pObject
     */
    // GET IMPORTED
    public StockmovementBean getStockmovementBean(StockmovementBean pObject) throws SQLException
    {
        StockmovementBean other = StockmovementManager.getInstance().createStockmovementBean();
        other.setStockmovementid(pObject.getParentid());
        return StockmovementManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the StockmovementBean object to the StockmovementBean object.
     *
     * @param pObject the StockmovementBean object to use
     * @param pObjectToBeSet the StockmovementBean object to associate to the StockmovementBean 
     * @return the associated StockmovementBean pObject
     */
    // SET IMPORTED
    public StockmovementBean setStockmovementBean(StockmovementBean pObject,StockmovementBean pObjectToBeSet)
    {
        pObject.setParentid(pObjectToBeSet.getStockmovementid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from stockmovement.
     *
     * @return an array of StockmovementManager pObject
     */
    //38
    public StockmovementBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM stockmovement",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of StockmovementBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting StockmovementBean table 
     */
    //49
    public StockmovementBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of StockmovementBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting StockmovementBean table 
     */
    //51
    public StockmovementBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from stockmovement " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from stockmovement ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (StockmovementBean[])v.toArray(new StockmovementBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from stockmovement table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the stockmovement table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM stockmovement " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the StockmovementBean pObject into the database.
     *
     * @param pObject the StockmovementBean pObject to be saved
     */
    //100
    public StockmovementBean save(StockmovementBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isStockmovementidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('stockmovementid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setStockmovementid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into stockmovement (");
    
                if (pObject.isStockmovementidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("stockmovementid");
                    _dirtyCount++;
                }

                if (pObject.isStockidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("stockid");
                    _dirtyCount++;
                }

                if (pObject.isOperdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("operdate");
                    _dirtyCount++;
                }

                if (pObject.isProductidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("productid");
                    _dirtyCount++;
                }

                if (pObject.isOperidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("operid");
                    _dirtyCount++;
                }

                if (pObject.isQuantityModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("quantity");
                    _dirtyCount++;
                }

                if (pObject.isUnitpriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("unitprice");
                    _dirtyCount++;
                }

                if (pObject.isParentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("parentid");
                    _dirtyCount++;
                }

                if (pObject.isCurquantityModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("curquantity");
                    _dirtyCount++;
                }

                if (pObject.isMstockidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("mstockid");
                    _dirtyCount++;
                }

                if (pObject.isMcontragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("mcontragentid");
                    _dirtyCount++;
                }

                if (pObject.isTestresultidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("testresultid");
                    _dirtyCount++;
                }

                if (pObject.isTestresultquantityModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("testresultquantity");
                    _dirtyCount++;
                }

                if (pObject.isInvoiceidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("invoiceid");
                    _dirtyCount++;
                }

                if (pObject.isNoteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("note");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isExpdate1Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("expdate1");
                    _dirtyCount++;
                }

                if (pObject.isExpdate2Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("expdate2");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isStockmovementidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getStockmovementid());
                }
    
                if (pObject.isStockidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStockid());
                }
    
                if (pObject.isOperdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getOperdate());
                }
    
                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isOperidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOperid());
                }
    
                if (pObject.isQuantityModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getQuantity());
                }
    
                if (pObject.isUnitpriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getUnitprice());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isCurquantityModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getCurquantity());
                }
    
                if (pObject.isMstockidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMstockid());
                }
    
                if (pObject.isMcontragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getMcontragentid());
                }
    
                if (pObject.isTestresultidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTestresultid());
                }
    
                if (pObject.isTestresultquantityModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getTestresultquantity());
                }
    
                if (pObject.isInvoiceidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getInvoiceid());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isExpdate1Modified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getExpdate1());
                }
    
                if (pObject.isExpdate2Modified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getExpdate2());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE stockmovement SET ");
                boolean useComma=false;

                if (pObject.isStockmovementidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("stockmovementid").append("=?");
                }

                if (pObject.isStockidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("stockid").append("=?");
                }

                if (pObject.isOperdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("operdate").append("=?");
                }

                if (pObject.isProductidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("productid").append("=?");
                }

                if (pObject.isOperidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("operid").append("=?");
                }

                if (pObject.isQuantityModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("quantity").append("=?");
                }

                if (pObject.isUnitpriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("unitprice").append("=?");
                }

                if (pObject.isParentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("parentid").append("=?");
                }

                if (pObject.isCurquantityModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("curquantity").append("=?");
                }

                if (pObject.isMstockidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("mstockid").append("=?");
                }

                if (pObject.isMcontragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("mcontragentid").append("=?");
                }

                if (pObject.isTestresultidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("testresultid").append("=?");
                }

                if (pObject.isTestresultquantityModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("testresultquantity").append("=?");
                }

                if (pObject.isInvoiceidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("invoiceid").append("=?");
                }

                if (pObject.isNoteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("note").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isExpdate1Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("expdate1").append("=?");
                }

                if (pObject.isExpdate2Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("expdate2").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("stockmovement.stockmovementid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isStockmovementidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getStockmovementid());
                }

                if (pObject.isStockidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStockid());
                }

                if (pObject.isOperdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getOperdate());
                }

                if (pObject.isProductidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }

                if (pObject.isOperidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getOperid());
                }

                if (pObject.isQuantityModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getQuantity());
                }

                if (pObject.isUnitpriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getUnitprice());
                }

                if (pObject.isParentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }

                if (pObject.isCurquantityModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getCurquantity());
                }

                if (pObject.isMstockidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getMstockid());
                }

                if (pObject.isMcontragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getMcontragentid());
                }

                if (pObject.isTestresultidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getTestresultid());
                }

                if (pObject.isTestresultquantityModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getTestresultquantity());
                }

                if (pObject.isInvoiceidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getInvoiceid());
                }

                if (pObject.isNoteModified()) {
                      ps.setString(++_dirtyCount, pObject.getNote());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isExpdate1Modified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getExpdate1());
                }

                if (pObject.isExpdate2Modified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getExpdate2());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getStockmovementid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of StockmovementBean pObjects into the database.
     *
     * @param pObjects the StockmovementBean pObject table to be saved
     * @return the saved StockmovementBean array.
     */
    //65
    public StockmovementBean[] save(StockmovementBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique StockmovementBean pObject from a template one giving a c
     *
     * @param pObject the StockmovementBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public StockmovementBean loadUniqueUsingTemplate(StockmovementBean pObject) throws SQLException
    {
         StockmovementBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of StockmovementBean from a template one.
     *
     * @param pObject the StockmovementBean template to look for
     * @return all the StockmovementBean matching the template
     */
    //88
    public StockmovementBean[] loadUsingTemplate(StockmovementBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from stockmovement WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isStockmovementidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stockmovementid= ?");
             }
    
             if (pObject.isStockidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stockid= ?");
             }
    
             if (pObject.isOperdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("operdate= ?");
             }
    
             if (pObject.isProductidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
             }
    
             if (pObject.isOperidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("operid= ?");
             }
    
             if (pObject.isQuantityModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("quantity= ?");
             }
    
             if (pObject.isUnitpriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("unitprice= ?");
             }
    
             if (pObject.isParentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
             }
    
             if (pObject.isCurquantityModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("curquantity= ?");
             }
    
             if (pObject.isMstockidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mstockid= ?");
             }
    
             if (pObject.isMcontragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mcontragentid= ?");
             }
    
             if (pObject.isTestresultidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testresultid= ?");
             }
    
             if (pObject.isTestresultquantityModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testresultquantity= ?");
             }
    
             if (pObject.isInvoiceidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invoiceid= ?");
             }
    
             if (pObject.isNoteModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isExpdate1Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("expdate1= ?");
             }
    
             if (pObject.isExpdate2Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("expdate2= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isStockmovementidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getStockmovementid());
             }
    
             if (pObject.isStockidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStockid());
             }
    
             if (pObject.isOperdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getOperdate());
             }
    
             if (pObject.isProductidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
             }
    
             if (pObject.isOperidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getOperid());
             }
    
             if (pObject.isQuantityModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getQuantity());
             }
    
             if (pObject.isUnitpriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getUnitprice());
             }
    
             if (pObject.isParentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
             }
    
             if (pObject.isCurquantityModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getCurquantity());
             }
    
             if (pObject.isMstockidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getMstockid());
             }
    
             if (pObject.isMcontragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getMcontragentid());
             }
    
             if (pObject.isTestresultidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getTestresultid());
             }
    
             if (pObject.isTestresultquantityModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getTestresultquantity());
             }
    
             if (pObject.isInvoiceidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getInvoiceid());
             }
    
             if (pObject.isNoteModified()) {
                 ps.setString(++_dirtyCount, pObject.getNote());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isExpdate1Modified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getExpdate1());
             }
    
             if (pObject.isExpdate2Modified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getExpdate2());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a StockmovementBean template.
     *
     * @param pObject the StockmovementBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(StockmovementBean pObject) throws SQLException
    {
        if (pObject.isStockmovementidInitialized())
            return deleteByPrimaryKey(pObject.getStockmovementid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM stockmovement WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isStockmovementidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("stockmovementid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStockidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("stockid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOperdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("operdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isProductidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("productid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOperidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("operid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isQuantityInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("quantity").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isUnitpriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("unitprice").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isParentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("parentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCurquantityInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("curquantity").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMstockidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("mstockid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMcontragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("mcontragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTestresultidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("testresultid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTestresultquantityInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("testresultquantity").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInvoiceidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("invoiceid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNoteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("note").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isExpdate1Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("expdate1").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isExpdate2Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("expdate2").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isStockmovementidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getStockmovementid());
            }
    
            if (pObject.isStockidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStockid());
            }
    
            if (pObject.isOperdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getOperdate());
            }
    
            if (pObject.isProductidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
            }
    
            if (pObject.isOperidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getOperid());
            }
    
            if (pObject.isQuantityInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getQuantity());
            }
    
            if (pObject.isUnitpriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getUnitprice());
            }
    
            if (pObject.isParentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
            }
    
            if (pObject.isCurquantityInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getCurquantity());
            }
    
            if (pObject.isMstockidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getMstockid());
            }
    
            if (pObject.isMcontragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getMcontragentid());
            }
    
            if (pObject.isTestresultidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getTestresultid());
            }
    
            if (pObject.isTestresultquantityInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getTestresultquantity());
            }
    
            if (pObject.isInvoiceidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getInvoiceid());
            }
    
            if (pObject.isNoteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNote());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isExpdate1Initialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getExpdate1());
            }
    
            if (pObject.isExpdate2Initialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getExpdate2());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table stockmovement.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table stockmovement with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from stockmovement " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table stockmovement with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific StockmovementBean pObject given a c
     *
     * @param pObject the StockmovementBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(StockmovementBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from stockmovement WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isStockmovementidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stockmovementid= ?");
                }
    
                if (pObject.isStockidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stockid= ?");
                }
    
                if (pObject.isOperdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("operdate= ?");
                }
    
                if (pObject.isProductidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
                }
    
                if (pObject.isOperidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("operid= ?");
                }
    
                if (pObject.isQuantityModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("quantity= ?");
                }
    
                if (pObject.isUnitpriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("unitprice= ?");
                }
    
                if (pObject.isParentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
                }
    
                if (pObject.isCurquantityModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("curquantity= ?");
                }
    
                if (pObject.isMstockidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mstockid= ?");
                }
    
                if (pObject.isMcontragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("mcontragentid= ?");
                }
    
                if (pObject.isTestresultidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testresultid= ?");
                }
    
                if (pObject.isTestresultquantityModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testresultquantity= ?");
                }
    
                if (pObject.isInvoiceidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invoiceid= ?");
                }
    
                if (pObject.isNoteModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isExpdate1Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("expdate1= ?");
                }
    
                if (pObject.isExpdate2Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("expdate2= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isStockmovementidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getStockmovementid());
                }
    
                if (pObject.isStockidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStockid());
                }
    
                if (pObject.isOperdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getOperdate());
                }
    
                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isOperidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getOperid());
                }
    
                if (pObject.isQuantityModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getQuantity());
                }
    
                if (pObject.isUnitpriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getUnitprice());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isCurquantityModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getCurquantity());
                }
    
                if (pObject.isMstockidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getMstockid());
                }
    
                if (pObject.isMcontragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getMcontragentid());
                }
    
                if (pObject.isTestresultidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTestresultid());
                }
    
                if (pObject.isTestresultquantityModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getTestresultquantity());
                }
    
                if (pObject.isInvoiceidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getInvoiceid());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isExpdate1Modified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getExpdate1());
                }
    
                if (pObject.isExpdate2Modified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getExpdate2());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the stockmovement on a StockmovementBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting StockmovementBean pObject
     */
    //72
    public StockmovementBean decodeRow(ResultSet rs) throws SQLException
    {
        StockmovementBean pObject = createStockmovementBean();
        pObject.setStockmovementid(Manager.getLong(rs, 1));
        pObject.setStockid(Manager.getInteger(rs, 2));
        pObject.setOperdate(rs.getTimestamp(3));
        pObject.setProductid(Manager.getLong(rs, 4));
        pObject.setOperid(Manager.getInteger(rs, 5));
        pObject.setQuantity(Manager.getDouble(rs, 6));
        pObject.setUnitprice(Manager.getDouble(rs, 7));
        pObject.setParentid(Manager.getLong(rs, 8));
        pObject.setCurquantity(Manager.getDouble(rs, 9));
        pObject.setMstockid(Manager.getInteger(rs, 10));
        pObject.setMcontragentid(Manager.getLong(rs, 11));
        pObject.setTestresultid(Manager.getLong(rs, 12));
        pObject.setTestresultquantity(Manager.getDouble(rs, 13));
        pObject.setInvoiceid(Manager.getLong(rs, 14));
        pObject.setNote(rs.getString(15));
        pObject.setRegbyid(Manager.getInteger(rs, 16));
        pObject.setRegdate(rs.getTimestamp(17));
        pObject.setExpdate1(rs.getTimestamp(18));
        pObject.setExpdate2(rs.getTimestamp(19));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the stockmovement table on a StockmovementBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting StockmovementBean pObject
     */
    //73
    public StockmovementBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        StockmovementBean pObject = createStockmovementBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_STOCKMOVEMENTID:
                    ++pos;
                    pObject.setStockmovementid(Manager.getLong(rs, pos));
                    break;
                case ID_STOCKID:
                    ++pos;
                    pObject.setStockid(Manager.getInteger(rs, pos));
                    break;
                case ID_OPERDATE:
                    ++pos;
                    pObject.setOperdate(rs.getTimestamp(pos));
                    break;
                case ID_PRODUCTID:
                    ++pos;
                    pObject.setProductid(Manager.getLong(rs, pos));
                    break;
                case ID_OPERID:
                    ++pos;
                    pObject.setOperid(Manager.getInteger(rs, pos));
                    break;
                case ID_QUANTITY:
                    ++pos;
                    pObject.setQuantity(Manager.getDouble(rs, pos));
                    break;
                case ID_UNITPRICE:
                    ++pos;
                    pObject.setUnitprice(Manager.getDouble(rs, pos));
                    break;
                case ID_PARENTID:
                    ++pos;
                    pObject.setParentid(Manager.getLong(rs, pos));
                    break;
                case ID_CURQUANTITY:
                    ++pos;
                    pObject.setCurquantity(Manager.getDouble(rs, pos));
                    break;
                case ID_MSTOCKID:
                    ++pos;
                    pObject.setMstockid(Manager.getInteger(rs, pos));
                    break;
                case ID_MCONTRAGENTID:
                    ++pos;
                    pObject.setMcontragentid(Manager.getLong(rs, pos));
                    break;
                case ID_TESTRESULTID:
                    ++pos;
                    pObject.setTestresultid(Manager.getLong(rs, pos));
                    break;
                case ID_TESTRESULTQUANTITY:
                    ++pos;
                    pObject.setTestresultquantity(Manager.getDouble(rs, pos));
                    break;
                case ID_INVOICEID:
                    ++pos;
                    pObject.setInvoiceid(Manager.getLong(rs, pos));
                    break;
                case ID_NOTE:
                    ++pos;
                    pObject.setNote(rs.getString(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_EXPDATE1:
                    ++pos;
                    pObject.setExpdate1(rs.getTimestamp(pos));
                    break;
                case ID_EXPDATE2:
                    ++pos;
                    pObject.setExpdate2(rs.getTimestamp(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of StockmovementBean 
     */
    //41
    public StockmovementBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of StockmovementBean 
     */
    public StockmovementBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (StockmovementBean[])v.toArray(new StockmovementBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private StockmovementListener listener = null;

    /**
     * Registers a unique StockmovementListener listener.
     */
    //66.5
    public void registerListener(StockmovementListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the StockmovementBean pObject.
     *
     * @param pObject the StockmovementBean pObject to be saved
     */
    //67
    void beforeInsert(StockmovementBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the StockmovementBean pObject.
     *
     * @param pObject the StockmovementBean pObject to be saved
     */
    //68
    void afterInsert(StockmovementBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the StockmovementBean pObject.
     *
     * @param pObject the StockmovementBean pObject to be updated
     */
    //69
    void beforeUpdate(StockmovementBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the StockmovementBean pObject.
     *
     * @param pObject the StockmovementBean pObject to be updated
     */
    //70
    void afterUpdate(StockmovementBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
