// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the v_lab_research table.
 */
public class VLabResearchManager
// extends+ 

// extends- 
{

    /**
     * Column labtestid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LABTESTID = 0;
    public static final int TYPE_LABTESTID = Types.INTEGER;
    public static final String NAME_LABTESTID = "labtestid";

    /**
     * Column labtestname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LABTESTNAME = 1;
    public static final int TYPE_LABTESTNAME = Types.VARCHAR;
    public static final String NAME_LABTESTNAME = "labtestname";

    /**
     * Column contractsampleitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTSAMPLEITEMID = 2;
    public static final int TYPE_CONTRACTSAMPLEITEMID = Types.BIGINT;
    public static final String NAME_CONTRACTSAMPLEITEMID = "contractsampleitemid";

    /**
     * Column confirm1date of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_CONFIRM1DATE = 3;
    public static final int TYPE_CONFIRM1DATE = Types.TIMESTAMP;
    public static final String NAME_CONFIRM1DATE = "confirm1date";

    /**
     * Column confirm1byid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_CONFIRM1BYID = 4;
    public static final int TYPE_CONFIRM1BYID = Types.INTEGER;
    public static final String NAME_CONFIRM1BYID = "confirm1byid";

    /**
     * Column confirm1status of type Types.BIT mapped to Boolean.
     */
    public static final int ID_CONFIRM1STATUS = 5;
    public static final int TYPE_CONFIRM1STATUS = Types.BIT;
    public static final String NAME_CONFIRM1STATUS = "confirm1status";

    /**
     * Column confirm1person of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CONFIRM1PERSON = 6;
    public static final int TYPE_CONFIRM1PERSON = Types.VARCHAR;
    public static final String NAME_CONFIRM1PERSON = "confirm1person";

    /**
     * Column confirm2date of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_CONFIRM2DATE = 7;
    public static final int TYPE_CONFIRM2DATE = Types.TIMESTAMP;
    public static final String NAME_CONFIRM2DATE = "confirm2date";

    /**
     * Column confirm2byid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_CONFIRM2BYID = 8;
    public static final int TYPE_CONFIRM2BYID = Types.INTEGER;
    public static final String NAME_CONFIRM2BYID = "confirm2byid";

    /**
     * Column confirm2status of type Types.BIT mapped to Boolean.
     */
    public static final int ID_CONFIRM2STATUS = 9;
    public static final int TYPE_CONFIRM2STATUS = Types.BIT;
    public static final String NAME_CONFIRM2STATUS = "confirm2status";

    /**
     * Column confirm2person of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CONFIRM2PERSON = 10;
    public static final int TYPE_CONFIRM2PERSON = Types.VARCHAR;
    public static final String NAME_CONFIRM2PERSON = "confirm2person";

    /**
     * Column confirm3date of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_CONFIRM3DATE = 11;
    public static final int TYPE_CONFIRM3DATE = Types.TIMESTAMP;
    public static final String NAME_CONFIRM3DATE = "confirm3date";

    /**
     * Column confirm3byid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_CONFIRM3BYID = 12;
    public static final int TYPE_CONFIRM3BYID = Types.INTEGER;
    public static final String NAME_CONFIRM3BYID = "confirm3byid";

    /**
     * Column confirm3status of type Types.BIT mapped to Boolean.
     */
    public static final int ID_CONFIRM3STATUS = 13;
    public static final int TYPE_CONFIRM3STATUS = Types.BIT;
    public static final String NAME_CONFIRM3STATUS = "confirm3status";

    /**
     * Column confirm3person of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CONFIRM3PERSON = 14;
    public static final int TYPE_CONFIRM3PERSON = Types.VARCHAR;
    public static final String NAME_CONFIRM3PERSON = "confirm3person";


    private static final String TABLE_NAME = "v_lab_research";

    /**
     * Create an array of type string containing all the fields of the v_lab_research table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "v_lab_research.labtestid"
        ,"v_lab_research.labtestname"
        ,"v_lab_research.contractsampleitemid"
        ,"v_lab_research.confirm1date"
        ,"v_lab_research.confirm1byid"
        ,"v_lab_research.confirm1status"
        ,"v_lab_research.confirm1person"
        ,"v_lab_research.confirm2date"
        ,"v_lab_research.confirm2byid"
        ,"v_lab_research.confirm2status"
        ,"v_lab_research.confirm2person"
        ,"v_lab_research.confirm3date"
        ,"v_lab_research.confirm3byid"
        ,"v_lab_research.confirm3status"
        ,"v_lab_research.confirm3person"
    };

    /**
     * Field that contains the comma separated fields of the v_lab_research table.
     */
    private static final String ALL_FIELDS = "v_lab_research.labtestid"
                            + ",v_lab_research.labtestname"
                            + ",v_lab_research.contractsampleitemid"
                            + ",v_lab_research.confirm1date"
                            + ",v_lab_research.confirm1byid"
                            + ",v_lab_research.confirm1status"
                            + ",v_lab_research.confirm1person"
                            + ",v_lab_research.confirm2date"
                            + ",v_lab_research.confirm2byid"
                            + ",v_lab_research.confirm2status"
                            + ",v_lab_research.confirm2person"
                            + ",v_lab_research.confirm3date"
                            + ",v_lab_research.confirm3byid"
                            + ",v_lab_research.confirm3status"
                            + ",v_lab_research.confirm3person";

    private static VLabResearchManager singleton = new VLabResearchManager();

    /**
     * Get the VLabResearchManager singleton.
     *
     * @return VLabResearchManager 
     */
    synchronized public static VLabResearchManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own VLabResearchManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(VLabResearchManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new VLabResearchBean instance.
     *
     * @return the new VLabResearchBean 
     */
    public VLabResearchBean createVLabResearchBean()
    {
        return new VLabResearchBean();
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from v_lab_research.
     *
     * @return an array of VLabResearchManager pObject
     */
    //38
    public VLabResearchBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM v_lab_research",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of VLabResearchBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting VLabResearchBean table 
     */
    //49
    public VLabResearchBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of VLabResearchBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting VLabResearchBean table 
     */
    //51
    public VLabResearchBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from v_lab_research " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from v_lab_research ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (VLabResearchBean[])v.toArray(new VLabResearchBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from v_lab_research table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the v_lab_research table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM v_lab_research " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the VLabResearchBean pObject into the database.
     *
     * @param pObject the VLabResearchBean pObject to be saved
     */
    //100
    public VLabResearchBean save(VLabResearchBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into v_lab_research (");
    
                if (pObject.isLabtestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestid");
                    _dirtyCount++;
                }

                if (pObject.isLabtestnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestname");
                    _dirtyCount++;
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractsampleitemid");
                    _dirtyCount++;
                }

                if (pObject.isConfirm1dateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm1date");
                    _dirtyCount++;
                }

                if (pObject.isConfirm1byidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm1byid");
                    _dirtyCount++;
                }

                if (pObject.isConfirm1statusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm1status");
                    _dirtyCount++;
                }

                if (pObject.isConfirm1personModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm1person");
                    _dirtyCount++;
                }

                if (pObject.isConfirm2dateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm2date");
                    _dirtyCount++;
                }

                if (pObject.isConfirm2byidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm2byid");
                    _dirtyCount++;
                }

                if (pObject.isConfirm2statusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm2status");
                    _dirtyCount++;
                }

                if (pObject.isConfirm2personModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm2person");
                    _dirtyCount++;
                }

                if (pObject.isConfirm3dateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm3date");
                    _dirtyCount++;
                }

                if (pObject.isConfirm3byidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm3byid");
                    _dirtyCount++;
                }

                if (pObject.isConfirm3statusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm3status");
                    _dirtyCount++;
                }

                if (pObject.isConfirm3personModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirm3person");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isLabtestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLabtestname());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isConfirm1dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfirm1date());
                }
    
                if (pObject.isConfirm1byidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm1byid());
                }
    
                if (pObject.isConfirm1statusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm1status());
                }
    
                if (pObject.isConfirm1personModified()) {
                    ps.setString(++_dirtyCount, pObject.getConfirm1person());
                }
    
                if (pObject.isConfirm2dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfirm2date());
                }
    
                if (pObject.isConfirm2byidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm2byid());
                }
    
                if (pObject.isConfirm2statusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm2status());
                }
    
                if (pObject.isConfirm2personModified()) {
                    ps.setString(++_dirtyCount, pObject.getConfirm2person());
                }
    
                if (pObject.isConfirm3dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfirm3date());
                }
    
                if (pObject.isConfirm3byidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm3byid());
                }
    
                if (pObject.isConfirm3statusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm3status());
                }
    
                if (pObject.isConfirm3personModified()) {
                    ps.setString(++_dirtyCount, pObject.getConfirm3person());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE v_lab_research SET ");
                boolean useComma=false;

                if (pObject.isLabtestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestid").append("=?");
                }

                if (pObject.isLabtestnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestname").append("=?");
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractsampleitemid").append("=?");
                }

                if (pObject.isConfirm1dateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm1date").append("=?");
                }

                if (pObject.isConfirm1byidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm1byid").append("=?");
                }

                if (pObject.isConfirm1statusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm1status").append("=?");
                }

                if (pObject.isConfirm1personModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm1person").append("=?");
                }

                if (pObject.isConfirm2dateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm2date").append("=?");
                }

                if (pObject.isConfirm2byidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm2byid").append("=?");
                }

                if (pObject.isConfirm2statusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm2status").append("=?");
                }

                if (pObject.isConfirm2personModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm2person").append("=?");
                }

                if (pObject.isConfirm3dateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm3date").append("=?");
                }

                if (pObject.isConfirm3byidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm3byid").append("=?");
                }

                if (pObject.isConfirm3statusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm3status").append("=?");
                }

                if (pObject.isConfirm3personModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirm3person").append("=?");
                }
                _sql.append("");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isLabtestidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }

                if (pObject.isLabtestnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getLabtestname());
                }

                if (pObject.isContractsampleitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }

                if (pObject.isConfirm1dateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getConfirm1date());
                }

                if (pObject.isConfirm1byidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm1byid());
                }

                if (pObject.isConfirm1statusModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm1status());
                }

                if (pObject.isConfirm1personModified()) {
                      ps.setString(++_dirtyCount, pObject.getConfirm1person());
                }

                if (pObject.isConfirm2dateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getConfirm2date());
                }

                if (pObject.isConfirm2byidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm2byid());
                }

                if (pObject.isConfirm2statusModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm2status());
                }

                if (pObject.isConfirm2personModified()) {
                      ps.setString(++_dirtyCount, pObject.getConfirm2person());
                }

                if (pObject.isConfirm3dateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getConfirm3date());
                }

                if (pObject.isConfirm3byidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm3byid());
                }

                if (pObject.isConfirm3statusModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm3status());
                }

                if (pObject.isConfirm3personModified()) {
                      ps.setString(++_dirtyCount, pObject.getConfirm3person());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of VLabResearchBean pObjects into the database.
     *
     * @param pObjects the VLabResearchBean pObject table to be saved
     * @return the saved VLabResearchBean array.
     */
    //65
    public VLabResearchBean[] save(VLabResearchBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique VLabResearchBean pObject from a template one giving a c
     *
     * @param pObject the VLabResearchBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public VLabResearchBean loadUniqueUsingTemplate(VLabResearchBean pObject) throws SQLException
    {
         VLabResearchBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of VLabResearchBean from a template one.
     *
     * @param pObject the VLabResearchBean template to look for
     * @return all the VLabResearchBean matching the template
     */
    //88
    public VLabResearchBean[] loadUsingTemplate(VLabResearchBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from v_lab_research WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isLabtestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
             }
    
             if (pObject.isLabtestnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestname= ?");
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
             }
    
             if (pObject.isConfirm1dateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1date= ?");
             }
    
             if (pObject.isConfirm1byidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1byid= ?");
             }
    
             if (pObject.isConfirm1statusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1status= ?");
             }
    
             if (pObject.isConfirm1personModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1person= ?");
             }
    
             if (pObject.isConfirm2dateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2date= ?");
             }
    
             if (pObject.isConfirm2byidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2byid= ?");
             }
    
             if (pObject.isConfirm2statusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2status= ?");
             }
    
             if (pObject.isConfirm2personModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2person= ?");
             }
    
             if (pObject.isConfirm3dateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3date= ?");
             }
    
             if (pObject.isConfirm3byidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3byid= ?");
             }
    
             if (pObject.isConfirm3statusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3status= ?");
             }
    
             if (pObject.isConfirm3personModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3person= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isLabtestidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
             }
    
             if (pObject.isLabtestnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getLabtestname());
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
             }
    
             if (pObject.isConfirm1dateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getConfirm1date());
             }
    
             if (pObject.isConfirm1byidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm1byid());
             }
    
             if (pObject.isConfirm1statusModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm1status());
             }
    
             if (pObject.isConfirm1personModified()) {
                 ps.setString(++_dirtyCount, pObject.getConfirm1person());
             }
    
             if (pObject.isConfirm2dateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getConfirm2date());
             }
    
             if (pObject.isConfirm2byidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm2byid());
             }
    
             if (pObject.isConfirm2statusModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm2status());
             }
    
             if (pObject.isConfirm2personModified()) {
                 ps.setString(++_dirtyCount, pObject.getConfirm2person());
             }
    
             if (pObject.isConfirm3dateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getConfirm3date());
             }
    
             if (pObject.isConfirm3byidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm3byid());
             }
    
             if (pObject.isConfirm3statusModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm3status());
             }
    
             if (pObject.isConfirm3personModified()) {
                 ps.setString(++_dirtyCount, pObject.getConfirm3person());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a VLabResearchBean template.
     *
     * @param pObject the VLabResearchBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(VLabResearchBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM v_lab_research WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isLabtestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLabtestnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractsampleitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm1dateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm1date").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm1byidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm1byid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm1statusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm1status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm1personInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm1person").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm2dateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm2date").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm2byidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm2byid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm2statusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm2status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm2personInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm2person").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm3dateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm3date").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm3byidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm3byid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm3statusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm3status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirm3personInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirm3person").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isLabtestidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
            }
    
            if (pObject.isLabtestnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLabtestname());
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
            }
    
            if (pObject.isConfirm1dateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getConfirm1date());
            }
    
            if (pObject.isConfirm1byidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm1byid());
            }
    
            if (pObject.isConfirm1statusInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm1status());
            }
    
            if (pObject.isConfirm1personInitialized()) {
                ps.setString(++_dirtyCount, pObject.getConfirm1person());
            }
    
            if (pObject.isConfirm2dateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getConfirm2date());
            }
    
            if (pObject.isConfirm2byidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm2byid());
            }
    
            if (pObject.isConfirm2statusInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm2status());
            }
    
            if (pObject.isConfirm2personInitialized()) {
                ps.setString(++_dirtyCount, pObject.getConfirm2person());
            }
    
            if (pObject.isConfirm3dateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getConfirm3date());
            }
    
            if (pObject.isConfirm3byidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm3byid());
            }
    
            if (pObject.isConfirm3statusInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm3status());
            }
    
            if (pObject.isConfirm3personInitialized()) {
                ps.setString(++_dirtyCount, pObject.getConfirm3person());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table v_lab_research.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table v_lab_research with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from v_lab_research " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table v_lab_research with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific VLabResearchBean pObject given a c
     *
     * @param pObject the VLabResearchBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(VLabResearchBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from v_lab_research WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isLabtestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
                }
    
                if (pObject.isLabtestnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestname= ?");
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
                }
    
                if (pObject.isConfirm1dateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1date= ?");
                }
    
                if (pObject.isConfirm1byidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1byid= ?");
                }
    
                if (pObject.isConfirm1statusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1status= ?");
                }
    
                if (pObject.isConfirm1personModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm1person= ?");
                }
    
                if (pObject.isConfirm2dateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2date= ?");
                }
    
                if (pObject.isConfirm2byidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2byid= ?");
                }
    
                if (pObject.isConfirm2statusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2status= ?");
                }
    
                if (pObject.isConfirm2personModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm2person= ?");
                }
    
                if (pObject.isConfirm3dateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3date= ?");
                }
    
                if (pObject.isConfirm3byidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3byid= ?");
                }
    
                if (pObject.isConfirm3statusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3status= ?");
                }
    
                if (pObject.isConfirm3personModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirm3person= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isLabtestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLabtestname());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isConfirm1dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfirm1date());
                }
    
                if (pObject.isConfirm1byidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm1byid());
                }
    
                if (pObject.isConfirm1statusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm1status());
                }
    
                if (pObject.isConfirm1personModified()) {
                    ps.setString(++_dirtyCount, pObject.getConfirm1person());
                }
    
                if (pObject.isConfirm2dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfirm2date());
                }
    
                if (pObject.isConfirm2byidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm2byid());
                }
    
                if (pObject.isConfirm2statusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm2status());
                }
    
                if (pObject.isConfirm2personModified()) {
                    ps.setString(++_dirtyCount, pObject.getConfirm2person());
                }
    
                if (pObject.isConfirm3dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfirm3date());
                }
    
                if (pObject.isConfirm3byidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getConfirm3byid());
                }
    
                if (pObject.isConfirm3statusModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getConfirm3status());
                }
    
                if (pObject.isConfirm3personModified()) {
                    ps.setString(++_dirtyCount, pObject.getConfirm3person());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the v_lab_research on a VLabResearchBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting VLabResearchBean pObject
     */
    //72
    public VLabResearchBean decodeRow(ResultSet rs) throws SQLException
    {
        VLabResearchBean pObject = createVLabResearchBean();
        pObject.setLabtestid(Manager.getInteger(rs, 1));
        pObject.setLabtestname(rs.getString(2));
        pObject.setContractsampleitemid(Manager.getLong(rs, 3));
        pObject.setConfirm1date(rs.getTimestamp(4));
        pObject.setConfirm1byid(Manager.getInteger(rs, 5));
        pObject.setConfirm1status(Manager.getBoolean(rs, 6));
        pObject.setConfirm1person(rs.getString(7));
        pObject.setConfirm2date(rs.getTimestamp(8));
        pObject.setConfirm2byid(Manager.getInteger(rs, 9));
        pObject.setConfirm2status(Manager.getBoolean(rs, 10));
        pObject.setConfirm2person(rs.getString(11));
        pObject.setConfirm3date(rs.getTimestamp(12));
        pObject.setConfirm3byid(Manager.getInteger(rs, 13));
        pObject.setConfirm3status(Manager.getBoolean(rs, 14));
        pObject.setConfirm3person(rs.getString(15));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the v_lab_research table on a VLabResearchBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting VLabResearchBean pObject
     */
    //73
    public VLabResearchBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        VLabResearchBean pObject = createVLabResearchBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_LABTESTID:
                    ++pos;
                    pObject.setLabtestid(Manager.getInteger(rs, pos));
                    break;
                case ID_LABTESTNAME:
                    ++pos;
                    pObject.setLabtestname(rs.getString(pos));
                    break;
                case ID_CONTRACTSAMPLEITEMID:
                    ++pos;
                    pObject.setContractsampleitemid(Manager.getLong(rs, pos));
                    break;
                case ID_CONFIRM1DATE:
                    ++pos;
                    pObject.setConfirm1date(rs.getTimestamp(pos));
                    break;
                case ID_CONFIRM1BYID:
                    ++pos;
                    pObject.setConfirm1byid(Manager.getInteger(rs, pos));
                    break;
                case ID_CONFIRM1STATUS:
                    ++pos;
                    pObject.setConfirm1status(Manager.getBoolean(rs, pos));
                    break;
                case ID_CONFIRM1PERSON:
                    ++pos;
                    pObject.setConfirm1person(rs.getString(pos));
                    break;
                case ID_CONFIRM2DATE:
                    ++pos;
                    pObject.setConfirm2date(rs.getTimestamp(pos));
                    break;
                case ID_CONFIRM2BYID:
                    ++pos;
                    pObject.setConfirm2byid(Manager.getInteger(rs, pos));
                    break;
                case ID_CONFIRM2STATUS:
                    ++pos;
                    pObject.setConfirm2status(Manager.getBoolean(rs, pos));
                    break;
                case ID_CONFIRM2PERSON:
                    ++pos;
                    pObject.setConfirm2person(rs.getString(pos));
                    break;
                case ID_CONFIRM3DATE:
                    ++pos;
                    pObject.setConfirm3date(rs.getTimestamp(pos));
                    break;
                case ID_CONFIRM3BYID:
                    ++pos;
                    pObject.setConfirm3byid(Manager.getInteger(rs, pos));
                    break;
                case ID_CONFIRM3STATUS:
                    ++pos;
                    pObject.setConfirm3status(Manager.getBoolean(rs, pos));
                    break;
                case ID_CONFIRM3PERSON:
                    ++pos;
                    pObject.setConfirm3person(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of VLabResearchBean 
     */
    //41
    public VLabResearchBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of VLabResearchBean 
     */
    public VLabResearchBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (VLabResearchBean[])v.toArray(new VLabResearchBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private VLabResearchListener listener = null;

    /**
     * Registers a unique VLabResearchListener listener.
     */
    //66.5
    public void registerListener(VLabResearchListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the VLabResearchBean pObject.
     *
     * @param pObject the VLabResearchBean pObject to be saved
     */
    //67
    void beforeInsert(VLabResearchBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the VLabResearchBean pObject.
     *
     * @param pObject the VLabResearchBean pObject to be saved
     */
    //68
    void afterInsert(VLabResearchBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the VLabResearchBean pObject.
     *
     * @param pObject the VLabResearchBean pObject to be updated
     */
    //69
    void beforeUpdate(VLabResearchBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the VLabResearchBean pObject.
     *
     * @param pObject the VLabResearchBean pObject to be updated
     */
    //70
    void afterUpdate(VLabResearchBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
