// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the contractanalysis table.
 */
public class ContractanalysisManager
// extends+ 

// extends- 
{

    /**
     * Column contractanalysisid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTANALYSISID = 0;
    public static final int TYPE_CONTRACTANALYSISID = Types.BIGINT;
    public static final String NAME_CONTRACTANALYSISID = "contractanalysisid";

    /**
     * Column contractid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTID = 1;
    public static final int TYPE_CONTRACTID = Types.BIGINT;
    public static final String NAME_CONTRACTID = "contractid";

    /**
     * Column sampletypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SAMPLETYPEID = 2;
    public static final int TYPE_SAMPLETYPEID = Types.INTEGER;
    public static final String NAME_SAMPLETYPEID = "sampletypeid";

    /**
     * Column labtestid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LABTESTID = 3;
    public static final int TYPE_LABTESTID = Types.INTEGER;
    public static final String NAME_LABTESTID = "labtestid";

    /**
     * Column institutionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INSTITUTIONID = 4;
    public static final int TYPE_INSTITUTIONID = Types.INTEGER;
    public static final String NAME_INSTITUTIONID = "institutionid";

    /**
     * Column price of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_PRICE = 5;
    public static final int TYPE_PRICE = Types.DOUBLE;
    public static final String NAME_PRICE = "price";

    /**
     * Column enddays of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_ENDDAYS = 6;
    public static final int TYPE_ENDDAYS = Types.INTEGER;
    public static final String NAME_ENDDAYS = "enddays";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 7;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 8;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 9;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 10;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";


    private static final String TABLE_NAME = "contractanalysis";

    /**
     * Create an array of type string containing all the fields of the contractanalysis table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "contractanalysis.contractanalysisid"
        ,"contractanalysis.contractid"
        ,"contractanalysis.sampletypeid"
        ,"contractanalysis.labtestid"
        ,"contractanalysis.institutionid"
        ,"contractanalysis.price"
        ,"contractanalysis.enddays"
        ,"contractanalysis.regbyid"
        ,"contractanalysis.regdate"
        ,"contractanalysis.deleted"
        ,"contractanalysis.status"
    };

    /**
     * Field that contains the comma separated fields of the contractanalysis table.
     */
    private static final String ALL_FIELDS = "contractanalysis.contractanalysisid"
                            + ",contractanalysis.contractid"
                            + ",contractanalysis.sampletypeid"
                            + ",contractanalysis.labtestid"
                            + ",contractanalysis.institutionid"
                            + ",contractanalysis.price"
                            + ",contractanalysis.enddays"
                            + ",contractanalysis.regbyid"
                            + ",contractanalysis.regdate"
                            + ",contractanalysis.deleted"
                            + ",contractanalysis.status";

    private static ContractanalysisManager singleton = new ContractanalysisManager();

    /**
     * Get the ContractanalysisManager singleton.
     *
     * @return ContractanalysisManager 
     */
    synchronized public static ContractanalysisManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ContractanalysisManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ContractanalysisManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ContractanalysisBean instance.
     *
     * @return the new ContractanalysisBean 
     */
    public ContractanalysisBean createContractanalysisBean()
    {
        return new ContractanalysisBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ContractanalysisBean from the contractanalysis using its key fields.
     *
     * @return a unique ContractanalysisBean 
     */
    //12
    public ContractanalysisBean loadByPrimaryKey(Long contractanalysisid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractanalysis WHERE contractanalysis.contractanalysisid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractanalysisid);
            ContractanalysisBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long contractanalysisid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from contractanalysis WHERE contractanalysis.contractanalysisid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractanalysisid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ContractanalysisBean array from the contractanalysis table using its contractid field.
     *
     * @return an array of ContractanalysisBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractanalysisBean[] loadByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractanalysis WHERE contractid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractanalysis table by contractid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractanalysis WHERE contractid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractanalysisBean array from the contractanalysis table using its institutionid field.
     *
     * @return an array of ContractanalysisBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractanalysisBean[] loadByInstitutionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractanalysis WHERE institutionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractanalysis table by institutionid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByInstitutionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractanalysis WHERE institutionid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractanalysisBean array from the contractanalysis table using its labtestid field.
     *
     * @return an array of ContractanalysisBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractanalysisBean[] loadByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractanalysis WHERE labtestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractanalysis table by labtestid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractanalysis WHERE labtestid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractanalysisBean array from the contractanalysis table using its sampletypeid field.
     *
     * @return an array of ContractanalysisBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractanalysisBean[] loadBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractanalysis WHERE sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractanalysis table by sampletypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractanalysis WHERE sampletypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ContractBean object from the contractanalysis.contractid field.
     *
     * @param pObject the ContractanalysisBean 
     * @return the associated ContractBean pObject
     */
    // GET IMPORTED
    public ContractBean getContractBean(ContractanalysisBean pObject) throws SQLException
    {
        ContractBean other = ContractManager.getInstance().createContractBean();
        other.setContractid(pObject.getContractid());
        return ContractManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractanalysisBean object to the ContractBean object.
     *
     * @param pObject the ContractanalysisBean object to use
     * @param pObjectToBeSet the ContractBean object to associate to the ContractanalysisBean 
     * @return the associated ContractBean pObject
     */
    // SET IMPORTED
    public ContractanalysisBean setContractBean(ContractanalysisBean pObject,ContractBean pObjectToBeSet)
    {
        pObject.setContractid(pObjectToBeSet.getContractid());
        return pObject;
    }

    /**
     * Retrieves the InstitutionBean object from the contractanalysis.institutionid field.
     *
     * @param pObject the ContractanalysisBean 
     * @return the associated InstitutionBean pObject
     */
    // GET IMPORTED
    public InstitutionBean getInstitutionBean(ContractanalysisBean pObject) throws SQLException
    {
        InstitutionBean other = InstitutionManager.getInstance().createInstitutionBean();
        other.setInstitutionid(pObject.getInstitutionid());
        return InstitutionManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractanalysisBean object to the InstitutionBean object.
     *
     * @param pObject the ContractanalysisBean object to use
     * @param pObjectToBeSet the InstitutionBean object to associate to the ContractanalysisBean 
     * @return the associated InstitutionBean pObject
     */
    // SET IMPORTED
    public ContractanalysisBean setInstitutionBean(ContractanalysisBean pObject,InstitutionBean pObjectToBeSet)
    {
        pObject.setInstitutionid(pObjectToBeSet.getInstitutionid());
        return pObject;
    }

    /**
     * Retrieves the LabtestBean object from the contractanalysis.labtestid field.
     *
     * @param pObject the ContractanalysisBean 
     * @return the associated LabtestBean pObject
     */
    // GET IMPORTED
    public LabtestBean getLabtestBean(ContractanalysisBean pObject) throws SQLException
    {
        LabtestBean other = LabtestManager.getInstance().createLabtestBean();
        other.setLabtestid(pObject.getLabtestid());
        return LabtestManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractanalysisBean object to the LabtestBean object.
     *
     * @param pObject the ContractanalysisBean object to use
     * @param pObjectToBeSet the LabtestBean object to associate to the ContractanalysisBean 
     * @return the associated LabtestBean pObject
     */
    // SET IMPORTED
    public ContractanalysisBean setLabtestBean(ContractanalysisBean pObject,LabtestBean pObjectToBeSet)
    {
        pObject.setLabtestid(pObjectToBeSet.getLabtestid());
        return pObject;
    }

    /**
     * Retrieves the SampletypeBean object from the contractanalysis.sampletypeid field.
     *
     * @param pObject the ContractanalysisBean 
     * @return the associated SampletypeBean pObject
     */
    // GET IMPORTED
    public SampletypeBean getSampletypeBean(ContractanalysisBean pObject) throws SQLException
    {
        SampletypeBean other = SampletypeManager.getInstance().createSampletypeBean();
        other.setSampletypeid(pObject.getSampletypeid());
        return SampletypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractanalysisBean object to the SampletypeBean object.
     *
     * @param pObject the ContractanalysisBean object to use
     * @param pObjectToBeSet the SampletypeBean object to associate to the ContractanalysisBean 
     * @return the associated SampletypeBean pObject
     */
    // SET IMPORTED
    public ContractanalysisBean setSampletypeBean(ContractanalysisBean pObject,SampletypeBean pObjectToBeSet)
    {
        pObject.setSampletypeid(pObjectToBeSet.getSampletypeid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from contractanalysis.
     *
     * @return an array of ContractanalysisManager pObject
     */
    //38
    public ContractanalysisBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractanalysis",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ContractanalysisBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ContractanalysisBean table 
     */
    //49
    public ContractanalysisBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ContractanalysisBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ContractanalysisBean table 
     */
    //51
    public ContractanalysisBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from contractanalysis " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from contractanalysis ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ContractanalysisBean[])v.toArray(new ContractanalysisBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from contractanalysis table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the contractanalysis table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM contractanalysis " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ContractanalysisBean pObject into the database.
     *
     * @param pObject the ContractanalysisBean pObject to be saved
     */
    //100
    public ContractanalysisBean save(ContractanalysisBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isContractanalysisidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('contractanalysisid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setContractanalysisid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into contractanalysis (");
    
                if (pObject.isContractanalysisidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractanalysisid");
                    _dirtyCount++;
                }

                if (pObject.isContractidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractid");
                    _dirtyCount++;
                }

                if (pObject.isSampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampletypeid");
                    _dirtyCount++;
                }

                if (pObject.isLabtestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestid");
                    _dirtyCount++;
                }

                if (pObject.isInstitutionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("institutionid");
                    _dirtyCount++;
                }

                if (pObject.isPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("price");
                    _dirtyCount++;
                }

                if (pObject.isEnddaysModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("enddays");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isContractanalysisidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractanalysisid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isEnddaysModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getEnddays());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE contractanalysis SET ");
                boolean useComma=false;

                if (pObject.isContractanalysisidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractanalysisid").append("=?");
                }

                if (pObject.isContractidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractid").append("=?");
                }

                if (pObject.isSampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampletypeid").append("=?");
                }

                if (pObject.isLabtestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestid").append("=?");
                }

                if (pObject.isInstitutionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("institutionid").append("=?");
                }

                if (pObject.isPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("price").append("=?");
                }

                if (pObject.isEnddaysModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("enddays").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("contractanalysis.contractanalysisid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isContractanalysisidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractanalysisid());
                }

                if (pObject.isContractidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }

                if (pObject.isSampletypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }

                if (pObject.isLabtestidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }

                if (pObject.isInstitutionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }

                if (pObject.isPriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }

                if (pObject.isEnddaysModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getEnddays());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractanalysisid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ContractanalysisBean pObjects into the database.
     *
     * @param pObjects the ContractanalysisBean pObject table to be saved
     * @return the saved ContractanalysisBean array.
     */
    //65
    public ContractanalysisBean[] save(ContractanalysisBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ContractanalysisBean pObject from a template one giving a c
     *
     * @param pObject the ContractanalysisBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ContractanalysisBean loadUniqueUsingTemplate(ContractanalysisBean pObject) throws SQLException
    {
         ContractanalysisBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ContractanalysisBean from a template one.
     *
     * @param pObject the ContractanalysisBean template to look for
     * @return all the ContractanalysisBean matching the template
     */
    //88
    public ContractanalysisBean[] loadUsingTemplate(ContractanalysisBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from contractanalysis WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isContractanalysisidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractanalysisid= ?");
             }
    
             if (pObject.isContractidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
             }
    
             if (pObject.isSampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
             }
    
             if (pObject.isLabtestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
             }
    
             if (pObject.isInstitutionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
             }
    
             if (pObject.isPriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
             }
    
             if (pObject.isEnddaysModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("enddays= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isContractanalysisidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractanalysisid());
             }
    
             if (pObject.isContractidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
             }
    
             if (pObject.isSampletypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
             }
    
             if (pObject.isLabtestidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
             }
    
             if (pObject.isInstitutionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
             }
    
             if (pObject.isPriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
             }
    
             if (pObject.isEnddaysModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getEnddays());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ContractanalysisBean template.
     *
     * @param pObject the ContractanalysisBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ContractanalysisBean pObject) throws SQLException
    {
        if (pObject.isContractanalysisidInitialized())
            return deleteByPrimaryKey(pObject.getContractanalysisid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM contractanalysis WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isContractanalysisidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractanalysisid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLabtestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInstitutionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("institutionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("price").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEnddaysInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("enddays").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isContractanalysisidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractanalysisid());
            }
    
            if (pObject.isContractidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
            }
    
            if (pObject.isSampletypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
            }
    
            if (pObject.isLabtestidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
            }
    
            if (pObject.isInstitutionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
            }
    
            if (pObject.isPriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
            }
    
            if (pObject.isEnddaysInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getEnddays());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table contractanalysis.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table contractanalysis with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from contractanalysis " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table contractanalysis with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ContractanalysisBean pObject given a c
     *
     * @param pObject the ContractanalysisBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ContractanalysisBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from contractanalysis WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isContractanalysisidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractanalysisid= ?");
                }
    
                if (pObject.isContractidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
                }
    
                if (pObject.isSampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
                }
    
                if (pObject.isLabtestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
                }
    
                if (pObject.isInstitutionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
                }
    
                if (pObject.isPriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
                }
    
                if (pObject.isEnddaysModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("enddays= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isContractanalysisidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractanalysisid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isEnddaysModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getEnddays());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the contractanalysis on a ContractanalysisBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ContractanalysisBean pObject
     */
    //72
    public ContractanalysisBean decodeRow(ResultSet rs) throws SQLException
    {
        ContractanalysisBean pObject = createContractanalysisBean();
        pObject.setContractanalysisid(Manager.getLong(rs, 1));
        pObject.setContractid(Manager.getLong(rs, 2));
        pObject.setSampletypeid(Manager.getInteger(rs, 3));
        pObject.setLabtestid(Manager.getInteger(rs, 4));
        pObject.setInstitutionid(Manager.getInteger(rs, 5));
        pObject.setPrice(Manager.getDouble(rs, 6));
        pObject.setEnddays(Manager.getInteger(rs, 7));
        pObject.setRegbyid(Manager.getInteger(rs, 8));
        pObject.setRegdate(rs.getTimestamp(9));
        pObject.setDeleted(Manager.getBoolean(rs, 10));
        pObject.setStatus(Manager.getInteger(rs, 11));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the contractanalysis table on a ContractanalysisBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ContractanalysisBean pObject
     */
    //73
    public ContractanalysisBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ContractanalysisBean pObject = createContractanalysisBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_CONTRACTANALYSISID:
                    ++pos;
                    pObject.setContractanalysisid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTID:
                    ++pos;
                    pObject.setContractid(Manager.getLong(rs, pos));
                    break;
                case ID_SAMPLETYPEID:
                    ++pos;
                    pObject.setSampletypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_LABTESTID:
                    ++pos;
                    pObject.setLabtestid(Manager.getInteger(rs, pos));
                    break;
                case ID_INSTITUTIONID:
                    ++pos;
                    pObject.setInstitutionid(Manager.getInteger(rs, pos));
                    break;
                case ID_PRICE:
                    ++pos;
                    pObject.setPrice(Manager.getDouble(rs, pos));
                    break;
                case ID_ENDDAYS:
                    ++pos;
                    pObject.setEnddays(Manager.getInteger(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ContractanalysisBean 
     */
    //41
    public ContractanalysisBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ContractanalysisBean 
     */
    public ContractanalysisBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ContractanalysisBean[])v.toArray(new ContractanalysisBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ContractanalysisListener listener = null;

    /**
     * Registers a unique ContractanalysisListener listener.
     */
    //66.5
    public void registerListener(ContractanalysisListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ContractanalysisBean pObject.
     *
     * @param pObject the ContractanalysisBean pObject to be saved
     */
    //67
    void beforeInsert(ContractanalysisBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ContractanalysisBean pObject.
     *
     * @param pObject the ContractanalysisBean pObject to be saved
     */
    //68
    void afterInsert(ContractanalysisBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ContractanalysisBean pObject.
     *
     * @param pObject the ContractanalysisBean pObject to be updated
     */
    //69
    void beforeUpdate(ContractanalysisBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ContractanalysisBean pObject.
     *
     * @param pObject the ContractanalysisBean pObject to be updated
     */
    //70
    void afterUpdate(ContractanalysisBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
