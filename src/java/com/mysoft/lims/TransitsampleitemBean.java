// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class TransitsampleitemBean
// extends+ 

// extends- 
{
    private Long transitsampleitemid;
    private boolean transitsampleitemid_is_modified = false;
    private boolean transitsampleitemid_is_initialized = false;
    
    private Long contractsampleitemid;
    private boolean contractsampleitemid_is_modified = false;
    private boolean contractsampleitemid_is_initialized = false;
    
    private Integer locationid;
    private boolean locationid_is_modified = false;
    private boolean locationid_is_initialized = false;
    
    private Boolean outside;
    private boolean outside_is_modified = false;
    private boolean outside_is_initialized = false;
    
    private java.util.Date transitdate;
    private boolean transitdate_is_modified = false;
    private boolean transitdate_is_initialized = false;
    
    private java.util.Date transittime;
    private boolean transittime_is_modified = false;
    private boolean transittime_is_initialized = false;
    
    private String container;
    private boolean container_is_modified = false;
    private boolean container_is_initialized = false;
    
    private String receiver;
    private boolean receiver_is_modified = false;
    private boolean receiver_is_initialized = false;
    
    private String researcher;
    private boolean researcher_is_modified = false;
    private boolean researcher_is_initialized = false;
    
    private String personals;
    private boolean personals_is_modified = false;
    private boolean personals_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private Long parentid;
    private boolean parentid_is_modified = false;
    private boolean parentid_is_initialized = false;
    
    private Integer responsibleid;
    private boolean responsibleid_is_modified = false;
    private boolean responsibleid_is_initialized = false;
    
    private String sendreason;
    private boolean sendreason_is_modified = false;
    private boolean sendreason_is_initialized = false;
    
    private String sendcondition;
    private boolean sendcondition_is_modified = false;
    private boolean sendcondition_is_initialized = false;
    
    private java.sql.Timestamp getdate;
    private boolean getdate_is_modified = false;
    private boolean getdate_is_initialized = false;
    
    private Integer getbyid;
    private boolean getbyid_is_modified = false;
    private boolean getbyid_is_initialized = false;
    
    private Integer fromlocationid;
    private boolean fromlocationid_is_modified = false;
    private boolean fromlocationid_is_initialized = false;
    
    private Long transitactid;
    private boolean transitactid_is_modified = false;
    private boolean transitactid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    TransitsampleitemBean()
    {
    }
    
    /**
     * Getter method for transitsampleitemid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.transitsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of transitsampleitemid
     */
    public Long getTransitsampleitemid()
    {
        return transitsampleitemid; 
    }

    /**
     * Setter method for transitsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to transitsampleitemid
     */
    public void setTransitsampleitemid(Long newVal) {
        if ((newVal != null && this.transitsampleitemid != null && (newVal.compareTo(this.transitsampleitemid) == 0)) || 
            (newVal == null && this.transitsampleitemid == null && transitsampleitemid_is_initialized)) {
            return; 
        } 
        this.transitsampleitemid = newVal; 
        transitsampleitemid_is_modified = true; 
        transitsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for transitsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to transitsampleitemid
     */
    public void setTransitsampleitemid(long newVal) {
        setTransitsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the transitsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTransitsampleitemidModified() {
        return transitsampleitemid_is_modified; 
    }

    /**
     * Determines if the transitsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTransitsampleitemidInitialized() {
        return transitsampleitemid_is_initialized; 
    }

    /**
     * Getter method for contractsampleitemid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.contractsampleitemid
     * <li> foreign key: contractsampleitem.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleitemid
     */
    public Long getContractsampleitemid()
    {
        return contractsampleitemid; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(Long newVal) {
        if ((newVal != null && this.contractsampleitemid != null && (newVal.compareTo(this.contractsampleitemid) == 0)) || 
            (newVal == null && this.contractsampleitemid == null && contractsampleitemid_is_initialized)) {
            return; 
        } 
        this.contractsampleitemid = newVal; 
        contractsampleitemid_is_modified = true; 
        contractsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(long newVal) {
        setContractsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleitemidModified() {
        return contractsampleitemid_is_modified; 
    }

    /**
     * Determines if the contractsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleitemidInitialized() {
        return contractsampleitemid_is_initialized; 
    }

    /**
     * Getter method for locationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.locationid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of locationid
     */
    public Integer getLocationid()
    {
        return locationid; 
    }

    /**
     * Setter method for locationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to locationid
     */
    public void setLocationid(Integer newVal) {
        if ((newVal != null && this.locationid != null && (newVal.compareTo(this.locationid) == 0)) || 
            (newVal == null && this.locationid == null && locationid_is_initialized)) {
            return; 
        } 
        this.locationid = newVal; 
        locationid_is_modified = true; 
        locationid_is_initialized = true; 
    }

    /**
     * Setter method for locationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to locationid
     */
    public void setLocationid(int newVal) {
        setLocationid(new Integer(newVal));
    }

    /**
     * Determines if the locationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLocationidModified() {
        return locationid_is_modified; 
    }

    /**
     * Determines if the locationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLocationidInitialized() {
        return locationid_is_initialized; 
    }

    /**
     * Getter method for outside.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.outside
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of outside
     */
    public Boolean getOutside()
    {
        return outside; 
    }

    /**
     * Setter method for outside.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to outside
     */
    public void setOutside(Boolean newVal) {
        if ((newVal != null && this.outside != null && newVal.equals(this.outside)) || 
            (newVal == null && this.outside == null && outside_is_initialized)) {
            return; 
        } 
        this.outside = newVal; 
        outside_is_modified = true; 
        outside_is_initialized = true; 
    }

    /**
     * Setter method for outside.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to outside
     */
    public void setOutside(boolean newVal) {
        setOutside(new Boolean(newVal));
    }

    /**
     * Determines if the outside has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOutsideModified() {
        return outside_is_modified; 
    }

    /**
     * Determines if the outside has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOutsideInitialized() {
        return outside_is_initialized; 
    }

    /**
     * Getter method for transitdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.transitdate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of transitdate
     */
    public java.util.Date getTransitdate()
    {
        return transitdate; 
    }

    /**
     * Setter method for transitdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to transitdate
     */
    public void setTransitdate(java.util.Date newVal) {
        if ((newVal != null && this.transitdate != null && (newVal.compareTo(this.transitdate) == 0)) || 
            (newVal == null && this.transitdate == null && transitdate_is_initialized)) {
            return; 
        } 
        this.transitdate = newVal; 
        transitdate_is_modified = true; 
        transitdate_is_initialized = true; 
    }

    /**
     * Setter method for transitdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to transitdate
     */
    public void setTransitdate(long newVal) {
        setTransitdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the transitdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTransitdateModified() {
        return transitdate_is_modified; 
    }

    /**
     * Determines if the transitdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTransitdateInitialized() {
        return transitdate_is_initialized; 
    }

    /**
     * Getter method for transittime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.transittime
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIME
     * </ul>
     *
     * @return the value of transittime
     */
    public java.util.Date getTransittime()
    {
        return transittime; 
    }

    /**
     * Setter method for transittime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to transittime
     */
    public void setTransittime(java.util.Date newVal) {
        if ((newVal != null && this.transittime != null && (newVal.compareTo(this.transittime) == 0)) || 
            (newVal == null && this.transittime == null && transittime_is_initialized)) {
            return; 
        } 
        this.transittime = newVal; 
        transittime_is_modified = true; 
        transittime_is_initialized = true; 
    }

    /**
     * Setter method for transittime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to transittime
     */
    public void setTransittime(long newVal) {
        setTransittime(new java.util.Date(newVal));
    }

    /**
     * Determines if the transittime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTransittimeModified() {
        return transittime_is_modified; 
    }

    /**
     * Determines if the transittime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTransittimeInitialized() {
        return transittime_is_initialized; 
    }

    /**
     * Getter method for container.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.container
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of container
     */
    public String getContainer()
    {
        return container; 
    }

    /**
     * Setter method for container.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to container
     */
    public void setContainer(String newVal) {
        if ((newVal != null && this.container != null && (newVal.compareTo(this.container) == 0)) || 
            (newVal == null && this.container == null && container_is_initialized)) {
            return; 
        } 
        this.container = newVal; 
        container_is_modified = true; 
        container_is_initialized = true; 
    }

    /**
     * Determines if the container has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContainerModified() {
        return container_is_modified; 
    }

    /**
     * Determines if the container has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContainerInitialized() {
        return container_is_initialized; 
    }

    /**
     * Getter method for receiver.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.receiver
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of receiver
     */
    public String getReceiver()
    {
        return receiver; 
    }

    /**
     * Setter method for receiver.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to receiver
     */
    public void setReceiver(String newVal) {
        if ((newVal != null && this.receiver != null && (newVal.compareTo(this.receiver) == 0)) || 
            (newVal == null && this.receiver == null && receiver_is_initialized)) {
            return; 
        } 
        this.receiver = newVal; 
        receiver_is_modified = true; 
        receiver_is_initialized = true; 
    }

    /**
     * Determines if the receiver has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReceiverModified() {
        return receiver_is_modified; 
    }

    /**
     * Determines if the receiver has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReceiverInitialized() {
        return receiver_is_initialized; 
    }

    /**
     * Getter method for researcher.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.researcher
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of researcher
     */
    public String getResearcher()
    {
        return researcher; 
    }

    /**
     * Setter method for researcher.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to researcher
     */
    public void setResearcher(String newVal) {
        if ((newVal != null && this.researcher != null && (newVal.compareTo(this.researcher) == 0)) || 
            (newVal == null && this.researcher == null && researcher_is_initialized)) {
            return; 
        } 
        this.researcher = newVal; 
        researcher_is_modified = true; 
        researcher_is_initialized = true; 
    }

    /**
     * Determines if the researcher has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResearcherModified() {
        return researcher_is_modified; 
    }

    /**
     * Determines if the researcher has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResearcherInitialized() {
        return researcher_is_initialized; 
    }

    /**
     * Getter method for personals.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.personals
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of personals
     */
    public String getPersonals()
    {
        return personals; 
    }

    /**
     * Setter method for personals.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to personals
     */
    public void setPersonals(String newVal) {
        if ((newVal != null && this.personals != null && (newVal.compareTo(this.personals) == 0)) || 
            (newVal == null && this.personals == null && personals_is_initialized)) {
            return; 
        } 
        this.personals = newVal; 
        personals_is_modified = true; 
        personals_is_initialized = true; 
    }

    /**
     * Determines if the personals has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPersonalsModified() {
        return personals_is_modified; 
    }

    /**
     * Determines if the personals has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPersonalsInitialized() {
        return personals_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.status
     * <li>default value: 1
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of status
     */
    public Integer getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Integer newVal) {
        if ((newVal != null && this.status != null && (newVal.compareTo(this.status) == 0)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal) {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Getter method for parentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.parentid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parentid
     */
    public Long getParentid()
    {
        return parentid; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(Long newVal) {
        if ((newVal != null && this.parentid != null && (newVal.compareTo(this.parentid) == 0)) || 
            (newVal == null && this.parentid == null && parentid_is_initialized)) {
            return; 
        } 
        this.parentid = newVal; 
        parentid_is_modified = true; 
        parentid_is_initialized = true; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(long newVal) {
        setParentid(new Long(newVal));
    }

    /**
     * Determines if the parentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParentidModified() {
        return parentid_is_modified; 
    }

    /**
     * Determines if the parentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParentidInitialized() {
        return parentid_is_initialized; 
    }

    /**
     * Getter method for responsibleid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.responsibleid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of responsibleid
     */
    public Integer getResponsibleid()
    {
        return responsibleid; 
    }

    /**
     * Setter method for responsibleid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to responsibleid
     */
    public void setResponsibleid(Integer newVal) {
        if ((newVal != null && this.responsibleid != null && (newVal.compareTo(this.responsibleid) == 0)) || 
            (newVal == null && this.responsibleid == null && responsibleid_is_initialized)) {
            return; 
        } 
        this.responsibleid = newVal; 
        responsibleid_is_modified = true; 
        responsibleid_is_initialized = true; 
    }

    /**
     * Setter method for responsibleid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to responsibleid
     */
    public void setResponsibleid(int newVal) {
        setResponsibleid(new Integer(newVal));
    }

    /**
     * Determines if the responsibleid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResponsibleidModified() {
        return responsibleid_is_modified; 
    }

    /**
     * Determines if the responsibleid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResponsibleidInitialized() {
        return responsibleid_is_initialized; 
    }

    /**
     * Getter method for sendreason.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.sendreason
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sendreason
     */
    public String getSendreason()
    {
        return sendreason; 
    }

    /**
     * Setter method for sendreason.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sendreason
     */
    public void setSendreason(String newVal) {
        if ((newVal != null && this.sendreason != null && (newVal.compareTo(this.sendreason) == 0)) || 
            (newVal == null && this.sendreason == null && sendreason_is_initialized)) {
            return; 
        } 
        this.sendreason = newVal; 
        sendreason_is_modified = true; 
        sendreason_is_initialized = true; 
    }

    /**
     * Determines if the sendreason has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSendreasonModified() {
        return sendreason_is_modified; 
    }

    /**
     * Determines if the sendreason has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSendreasonInitialized() {
        return sendreason_is_initialized; 
    }

    /**
     * Getter method for sendcondition.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.sendcondition
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sendcondition
     */
    public String getSendcondition()
    {
        return sendcondition; 
    }

    /**
     * Setter method for sendcondition.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sendcondition
     */
    public void setSendcondition(String newVal) {
        if ((newVal != null && this.sendcondition != null && (newVal.compareTo(this.sendcondition) == 0)) || 
            (newVal == null && this.sendcondition == null && sendcondition_is_initialized)) {
            return; 
        } 
        this.sendcondition = newVal; 
        sendcondition_is_modified = true; 
        sendcondition_is_initialized = true; 
    }

    /**
     * Determines if the sendcondition has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSendconditionModified() {
        return sendcondition_is_modified; 
    }

    /**
     * Determines if the sendcondition has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSendconditionInitialized() {
        return sendcondition_is_initialized; 
    }

    /**
     * Getter method for getdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.getdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of getdate
     */
    public java.sql.Timestamp getGetdate()
    {
        return getdate; 
    }

    /**
     * Setter method for getdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to getdate
     */
    public void setGetdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.getdate != null && (newVal.compareTo(this.getdate) == 0)) || 
            (newVal == null && this.getdate == null && getdate_is_initialized)) {
            return; 
        } 
        this.getdate = newVal; 
        getdate_is_modified = true; 
        getdate_is_initialized = true; 
    }

    /**
     * Setter method for getdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to getdate
     */
    public void setGetdate(long newVal) {
        setGetdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the getdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGetdateModified() {
        return getdate_is_modified; 
    }

    /**
     * Determines if the getdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGetdateInitialized() {
        return getdate_is_initialized; 
    }

    /**
     * Getter method for getbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.getbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of getbyid
     */
    public Integer getGetbyid()
    {
        return getbyid; 
    }

    /**
     * Setter method for getbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to getbyid
     */
    public void setGetbyid(Integer newVal) {
        if ((newVal != null && this.getbyid != null && (newVal.compareTo(this.getbyid) == 0)) || 
            (newVal == null && this.getbyid == null && getbyid_is_initialized)) {
            return; 
        } 
        this.getbyid = newVal; 
        getbyid_is_modified = true; 
        getbyid_is_initialized = true; 
    }

    /**
     * Setter method for getbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to getbyid
     */
    public void setGetbyid(int newVal) {
        setGetbyid(new Integer(newVal));
    }

    /**
     * Determines if the getbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGetbyidModified() {
        return getbyid_is_modified; 
    }

    /**
     * Determines if the getbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGetbyidInitialized() {
        return getbyid_is_initialized; 
    }

    /**
     * Getter method for fromlocationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.fromlocationid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of fromlocationid
     */
    public Integer getFromlocationid()
    {
        return fromlocationid; 
    }

    /**
     * Setter method for fromlocationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fromlocationid
     */
    public void setFromlocationid(Integer newVal) {
        if ((newVal != null && this.fromlocationid != null && (newVal.compareTo(this.fromlocationid) == 0)) || 
            (newVal == null && this.fromlocationid == null && fromlocationid_is_initialized)) {
            return; 
        } 
        this.fromlocationid = newVal; 
        fromlocationid_is_modified = true; 
        fromlocationid_is_initialized = true; 
    }

    /**
     * Setter method for fromlocationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fromlocationid
     */
    public void setFromlocationid(int newVal) {
        setFromlocationid(new Integer(newVal));
    }

    /**
     * Determines if the fromlocationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFromlocationidModified() {
        return fromlocationid_is_modified; 
    }

    /**
     * Determines if the fromlocationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFromlocationidInitialized() {
        return fromlocationid_is_initialized; 
    }

    /**
     * Getter method for transitactid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitsampleitem.transitactid
     * <li> foreign key: transitact.transitactid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of transitactid
     */
    public Long getTransitactid()
    {
        return transitactid; 
    }

    /**
     * Setter method for transitactid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to transitactid
     */
    public void setTransitactid(Long newVal) {
        if ((newVal != null && this.transitactid != null && (newVal.compareTo(this.transitactid) == 0)) || 
            (newVal == null && this.transitactid == null && transitactid_is_initialized)) {
            return; 
        } 
        this.transitactid = newVal; 
        transitactid_is_modified = true; 
        transitactid_is_initialized = true; 
    }

    /**
     * Setter method for transitactid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to transitactid
     */
    public void setTransitactid(long newVal) {
        setTransitactid(new Long(newVal));
    }

    /**
     * Determines if the transitactid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTransitactidModified() {
        return transitactid_is_modified; 
    }

    /**
     * Determines if the transitactid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTransitactidInitialized() {
        return transitactid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return transitsampleitemid_is_modified || 
		contractsampleitemid_is_modified || 
		locationid_is_modified || 
		outside_is_modified || 
		transitdate_is_modified || 
		transittime_is_modified || 
		container_is_modified || 
		receiver_is_modified || 
		researcher_is_modified || 
		personals_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		status_is_modified || 
		parentid_is_modified || 
		responsibleid_is_modified || 
		sendreason_is_modified || 
		sendcondition_is_modified || 
		getdate_is_modified || 
		getbyid_is_modified || 
		fromlocationid_is_modified || 
		transitactid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        transitsampleitemid_is_modified = false;
        contractsampleitemid_is_modified = false;
        locationid_is_modified = false;
        outside_is_modified = false;
        transitdate_is_modified = false;
        transittime_is_modified = false;
        container_is_modified = false;
        receiver_is_modified = false;
        researcher_is_modified = false;
        personals_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        status_is_modified = false;
        parentid_is_modified = false;
        responsibleid_is_modified = false;
        sendreason_is_modified = false;
        sendcondition_is_modified = false;
        getdate_is_modified = false;
        getbyid_is_modified = false;
        fromlocationid_is_modified = false;
        transitactid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TransitsampleitemBean bean) {
        setTransitsampleitemid(bean.getTransitsampleitemid());
        setContractsampleitemid(bean.getContractsampleitemid());
        setLocationid(bean.getLocationid());
        setOutside(bean.getOutside());
        setTransitdate(bean.getTransitdate());
        setTransittime(bean.getTransittime());
        setContainer(bean.getContainer());
        setReceiver(bean.getReceiver());
        setResearcher(bean.getResearcher());
        setPersonals(bean.getPersonals());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setStatus(bean.getStatus());
        setParentid(bean.getParentid());
        setResponsibleid(bean.getResponsibleid());
        setSendreason(bean.getSendreason());
        setSendcondition(bean.getSendcondition());
        setGetdate(bean.getGetdate());
        setGetbyid(bean.getGetbyid());
        setFromlocationid(bean.getFromlocationid());
        setTransitactid(bean.getTransitactid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[transitsampleitem] "
                 + "\n - transitsampleitem.transitsampleitemid = " + (transitsampleitemid_is_initialized ? ("[" + (transitsampleitemid == null ? null : transitsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.contractsampleitemid = " + (contractsampleitemid_is_initialized ? ("[" + (contractsampleitemid == null ? null : contractsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.locationid = " + (locationid_is_initialized ? ("[" + (locationid == null ? null : locationid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.outside = " + (outside_is_initialized ? ("[" + (outside == null ? null : outside.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.transitdate = " + (transitdate_is_initialized ? ("[" + (transitdate == null ? null : transitdate.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.transittime = " + (transittime_is_initialized ? ("[" + (transittime == null ? null : transittime.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.container = " + (container_is_initialized ? ("[" + (container == null ? null : container.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.receiver = " + (receiver_is_initialized ? ("[" + (receiver == null ? null : receiver.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.researcher = " + (researcher_is_initialized ? ("[" + (researcher == null ? null : researcher.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.personals = " + (personals_is_initialized ? ("[" + (personals == null ? null : personals.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.parentid = " + (parentid_is_initialized ? ("[" + (parentid == null ? null : parentid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.responsibleid = " + (responsibleid_is_initialized ? ("[" + (responsibleid == null ? null : responsibleid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.sendreason = " + (sendreason_is_initialized ? ("[" + (sendreason == null ? null : sendreason.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.sendcondition = " + (sendcondition_is_initialized ? ("[" + (sendcondition == null ? null : sendcondition.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.getdate = " + (getdate_is_initialized ? ("[" + (getdate == null ? null : getdate.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.getbyid = " + (getbyid_is_initialized ? ("[" + (getbyid == null ? null : getbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.fromlocationid = " + (fromlocationid_is_initialized ? ("[" + (fromlocationid == null ? null : fromlocationid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitsampleitem.transitactid = " + (transitactid_is_initialized ? ("[" + (transitactid == null ? null : transitactid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
