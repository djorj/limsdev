// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the contractsampletype table.
 */
public class ContractsampletypeManager
// extends+ 

// extends- 
{

    /**
     * Column contractsampletypeid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTSAMPLETYPEID = 0;
    public static final int TYPE_CONTRACTSAMPLETYPEID = Types.BIGINT;
    public static final String NAME_CONTRACTSAMPLETYPEID = "contractsampletypeid";

    /**
     * Column contractid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTID = 1;
    public static final int TYPE_CONTRACTID = Types.BIGINT;
    public static final String NAME_CONTRACTID = "contractid";

    /**
     * Column sampletypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SAMPLETYPEID = 2;
    public static final int TYPE_SAMPLETYPEID = Types.INTEGER;
    public static final String NAME_SAMPLETYPEID = "sampletypeid";

    /**
     * Column boxnum of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BOXNUM = 3;
    public static final int TYPE_BOXNUM = Types.VARCHAR;
    public static final String NAME_BOXNUM = "boxnum";

    /**
     * Column quantity of type Types.BIGINT mapped to Long.
     */
    public static final int ID_QUANTITY = 4;
    public static final int TYPE_QUANTITY = Types.BIGINT;
    public static final String NAME_QUANTITY = "quantity";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 5;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 6;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column isbox of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ISBOX = 7;
    public static final int TYPE_ISBOX = Types.BIT;
    public static final String NAME_ISBOX = "isbox";

    /**
     * Column parentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PARENTID = 8;
    public static final int TYPE_PARENTID = Types.BIGINT;
    public static final String NAME_PARENTID = "parentid";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 9;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column info of type Types.VARCHAR mapped to String.
     */
    public static final int ID_INFO = 10;
    public static final int TYPE_INFO = Types.VARCHAR;
    public static final String NAME_INFO = "info";

    /**
     * Column speciesid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SPECIESID = 11;
    public static final int TYPE_SPECIESID = Types.INTEGER;
    public static final String NAME_SPECIESID = "speciesid";

    /**
     * Column stamp of type Types.VARCHAR mapped to String.
     */
    public static final int ID_STAMP = 12;
    public static final int TYPE_STAMP = Types.VARCHAR;
    public static final String NAME_STAMP = "stamp";

    /**
     * Column appealid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_APPEALID = 13;
    public static final int TYPE_APPEALID = Types.BIGINT;
    public static final String NAME_APPEALID = "appealid";

    /**
     * Column actid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_ACTID = 14;
    public static final int TYPE_ACTID = Types.BIGINT;
    public static final String NAME_ACTID = "actid";


    private static final String TABLE_NAME = "contractsampletype";

    /**
     * Create an array of type string containing all the fields of the contractsampletype table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "contractsampletype.contractsampletypeid"
        ,"contractsampletype.contractid"
        ,"contractsampletype.sampletypeid"
        ,"contractsampletype.boxnum"
        ,"contractsampletype.quantity"
        ,"contractsampletype.regbyid"
        ,"contractsampletype.regdate"
        ,"contractsampletype.isbox"
        ,"contractsampletype.parentid"
        ,"contractsampletype.deleted"
        ,"contractsampletype.info"
        ,"contractsampletype.speciesid"
        ,"contractsampletype.stamp"
        ,"contractsampletype.appealid"
        ,"contractsampletype.actid"
    };

    /**
     * Field that contains the comma separated fields of the contractsampletype table.
     */
    private static final String ALL_FIELDS = "contractsampletype.contractsampletypeid"
                            + ",contractsampletype.contractid"
                            + ",contractsampletype.sampletypeid"
                            + ",contractsampletype.boxnum"
                            + ",contractsampletype.quantity"
                            + ",contractsampletype.regbyid"
                            + ",contractsampletype.regdate"
                            + ",contractsampletype.isbox"
                            + ",contractsampletype.parentid"
                            + ",contractsampletype.deleted"
                            + ",contractsampletype.info"
                            + ",contractsampletype.speciesid"
                            + ",contractsampletype.stamp"
                            + ",contractsampletype.appealid"
                            + ",contractsampletype.actid";

    private static ContractsampletypeManager singleton = new ContractsampletypeManager();

    /**
     * Get the ContractsampletypeManager singleton.
     *
     * @return ContractsampletypeManager 
     */
    synchronized public static ContractsampletypeManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ContractsampletypeManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ContractsampletypeManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ContractsampletypeBean instance.
     *
     * @return the new ContractsampletypeBean 
     */
    public ContractsampletypeBean createContractsampletypeBean()
    {
        return new ContractsampletypeBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ContractsampletypeBean from the contractsampletype using its key fields.
     *
     * @return a unique ContractsampletypeBean 
     */
    //12
    public ContractsampletypeBean loadByPrimaryKey(Long contractsampletypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype WHERE contractsampletype.contractsampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractsampletypeid);
            ContractsampletypeBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long contractsampletypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from contractsampletype WHERE contractsampletype.contractsampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractsampletypeid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ContractsampletypeBean array from the contractsampletype table using its actid field.
     *
     * @return an array of ContractsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampletypeBean[] loadByActid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype WHERE actid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampletype table by actid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByActid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampletype WHERE actid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampletypeBean array from the contractsampletype table using its appealid field.
     *
     * @return an array of ContractsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampletypeBean[] loadByAppealid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype WHERE appealid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampletype table by appealid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByAppealid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampletype WHERE appealid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampletypeBean array from the contractsampletype table using its contractid field.
     *
     * @return an array of ContractsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampletypeBean[] loadByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype WHERE contractid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampletype table by contractid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampletype WHERE contractid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampletypeBean array from the contractsampletype table using its parentid field.
     *
     * @return an array of ContractsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampletypeBean[] loadByParentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype WHERE parentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampletype table by parentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByParentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampletype WHERE parentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampletypeBean array from the contractsampletype table using its sampletypeid field.
     *
     * @return an array of ContractsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampletypeBean[] loadBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype WHERE sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampletype table by sampletypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampletype WHERE sampletypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampletypeBean array from the contractsampletype table using its speciesid field.
     *
     * @return an array of ContractsampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampletypeBean[] loadBySpeciesid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype WHERE speciesid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampletype table by speciesid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySpeciesid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampletype WHERE speciesid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ActBean object from the contractsampletype.actid field.
     *
     * @param pObject the ContractsampletypeBean 
     * @return the associated ActBean pObject
     */
    // GET IMPORTED
    public ActBean getActBean(ContractsampletypeBean pObject) throws SQLException
    {
        ActBean other = ActManager.getInstance().createActBean();
        other.setActid(pObject.getActid());
        return ActManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampletypeBean object to the ActBean object.
     *
     * @param pObject the ContractsampletypeBean object to use
     * @param pObjectToBeSet the ActBean object to associate to the ContractsampletypeBean 
     * @return the associated ActBean pObject
     */
    // SET IMPORTED
    public ContractsampletypeBean setActBean(ContractsampletypeBean pObject,ActBean pObjectToBeSet)
    {
        pObject.setActid(pObjectToBeSet.getActid());
        return pObject;
    }

    /**
     * Retrieves the AppealBean object from the contractsampletype.appealid field.
     *
     * @param pObject the ContractsampletypeBean 
     * @return the associated AppealBean pObject
     */
    // GET IMPORTED
    public AppealBean getAppealBean(ContractsampletypeBean pObject) throws SQLException
    {
        AppealBean other = AppealManager.getInstance().createAppealBean();
        other.setAppealid(pObject.getAppealid());
        return AppealManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampletypeBean object to the AppealBean object.
     *
     * @param pObject the ContractsampletypeBean object to use
     * @param pObjectToBeSet the AppealBean object to associate to the ContractsampletypeBean 
     * @return the associated AppealBean pObject
     */
    // SET IMPORTED
    public ContractsampletypeBean setAppealBean(ContractsampletypeBean pObject,AppealBean pObjectToBeSet)
    {
        pObject.setAppealid(pObjectToBeSet.getAppealid());
        return pObject;
    }

    /**
     * Retrieves the ContractBean object from the contractsampletype.contractid field.
     *
     * @param pObject the ContractsampletypeBean 
     * @return the associated ContractBean pObject
     */
    // GET IMPORTED
    public ContractBean getContractBean(ContractsampletypeBean pObject) throws SQLException
    {
        ContractBean other = ContractManager.getInstance().createContractBean();
        other.setContractid(pObject.getContractid());
        return ContractManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampletypeBean object to the ContractBean object.
     *
     * @param pObject the ContractsampletypeBean object to use
     * @param pObjectToBeSet the ContractBean object to associate to the ContractsampletypeBean 
     * @return the associated ContractBean pObject
     */
    // SET IMPORTED
    public ContractsampletypeBean setContractBean(ContractsampletypeBean pObject,ContractBean pObjectToBeSet)
    {
        pObject.setContractid(pObjectToBeSet.getContractid());
        return pObject;
    }

    /**
     * Retrieves the ContractsampletypeBean object from the contractsampletype.contractsampletypeid field.
     *
     * @param pObject the ContractsampletypeBean 
     * @return the associated ContractsampletypeBean pObject
     */
    // GET IMPORTED
    public ContractsampletypeBean getContractsampletypeBean(ContractsampletypeBean pObject) throws SQLException
    {
        ContractsampletypeBean other = ContractsampletypeManager.getInstance().createContractsampletypeBean();
        other.setContractsampletypeid(pObject.getParentid());
        return ContractsampletypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampletypeBean object to the ContractsampletypeBean object.
     *
     * @param pObject the ContractsampletypeBean object to use
     * @param pObjectToBeSet the ContractsampletypeBean object to associate to the ContractsampletypeBean 
     * @return the associated ContractsampletypeBean pObject
     */
    // SET IMPORTED
    public ContractsampletypeBean setContractsampletypeBean(ContractsampletypeBean pObject,ContractsampletypeBean pObjectToBeSet)
    {
        pObject.setParentid(pObjectToBeSet.getContractsampletypeid());
        return pObject;
    }

    /**
     * Retrieves the SampletypeBean object from the contractsampletype.sampletypeid field.
     *
     * @param pObject the ContractsampletypeBean 
     * @return the associated SampletypeBean pObject
     */
    // GET IMPORTED
    public SampletypeBean getSampletypeBean(ContractsampletypeBean pObject) throws SQLException
    {
        SampletypeBean other = SampletypeManager.getInstance().createSampletypeBean();
        other.setSampletypeid(pObject.getSampletypeid());
        return SampletypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampletypeBean object to the SampletypeBean object.
     *
     * @param pObject the ContractsampletypeBean object to use
     * @param pObjectToBeSet the SampletypeBean object to associate to the ContractsampletypeBean 
     * @return the associated SampletypeBean pObject
     */
    // SET IMPORTED
    public ContractsampletypeBean setSampletypeBean(ContractsampletypeBean pObject,SampletypeBean pObjectToBeSet)
    {
        pObject.setSampletypeid(pObjectToBeSet.getSampletypeid());
        return pObject;
    }

    /**
     * Retrieves the SpeciesBean object from the contractsampletype.speciesid field.
     *
     * @param pObject the ContractsampletypeBean 
     * @return the associated SpeciesBean pObject
     */
    // GET IMPORTED
    public SpeciesBean getSpeciesBean(ContractsampletypeBean pObject) throws SQLException
    {
        SpeciesBean other = SpeciesManager.getInstance().createSpeciesBean();
        other.setSpeciesid(pObject.getSpeciesid());
        return SpeciesManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampletypeBean object to the SpeciesBean object.
     *
     * @param pObject the ContractsampletypeBean object to use
     * @param pObjectToBeSet the SpeciesBean object to associate to the ContractsampletypeBean 
     * @return the associated SpeciesBean pObject
     */
    // SET IMPORTED
    public ContractsampletypeBean setSpeciesBean(ContractsampletypeBean pObject,SpeciesBean pObjectToBeSet)
    {
        pObject.setSpeciesid(pObjectToBeSet.getSpeciesid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from contractsampletype.
     *
     * @return an array of ContractsampletypeManager pObject
     */
    //38
    public ContractsampletypeBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampletype",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ContractsampletypeBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ContractsampletypeBean table 
     */
    //49
    public ContractsampletypeBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ContractsampletypeBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ContractsampletypeBean table 
     */
    //51
    public ContractsampletypeBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from contractsampletype " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from contractsampletype ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ContractsampletypeBean[])v.toArray(new ContractsampletypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from contractsampletype table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the contractsampletype table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM contractsampletype " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ContractsampletypeBean pObject into the database.
     *
     * @param pObject the ContractsampletypeBean pObject to be saved
     */
    //100
    public ContractsampletypeBean save(ContractsampletypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isContractsampletypeidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('contractsampletypeid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setContractsampletypeid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into contractsampletype (");
    
                if (pObject.isContractsampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractsampletypeid");
                    _dirtyCount++;
                }

                if (pObject.isContractidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractid");
                    _dirtyCount++;
                }

                if (pObject.isSampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampletypeid");
                    _dirtyCount++;
                }

                if (pObject.isBoxnumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("boxnum");
                    _dirtyCount++;
                }

                if (pObject.isQuantityModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("quantity");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isIsboxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("isbox");
                    _dirtyCount++;
                }

                if (pObject.isParentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("parentid");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isInfoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("info");
                    _dirtyCount++;
                }

                if (pObject.isSpeciesidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("speciesid");
                    _dirtyCount++;
                }

                if (pObject.isStampModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("stamp");
                    _dirtyCount++;
                }

                if (pObject.isAppealidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("appealid");
                    _dirtyCount++;
                }

                if (pObject.isActidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("actid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isContractsampletypeidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isBoxnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getBoxnum());
                }
    
                if (pObject.isQuantityModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getQuantity());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isIsboxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getIsbox());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getInfo());
                }
    
                if (pObject.isSpeciesidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                if (pObject.isAppealidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }
    
                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE contractsampletype SET ");
                boolean useComma=false;

                if (pObject.isContractsampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractsampletypeid").append("=?");
                }

                if (pObject.isContractidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractid").append("=?");
                }

                if (pObject.isSampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampletypeid").append("=?");
                }

                if (pObject.isBoxnumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("boxnum").append("=?");
                }

                if (pObject.isQuantityModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("quantity").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isIsboxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("isbox").append("=?");
                }

                if (pObject.isParentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("parentid").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isInfoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("info").append("=?");
                }

                if (pObject.isSpeciesidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("speciesid").append("=?");
                }

                if (pObject.isStampModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("stamp").append("=?");
                }

                if (pObject.isAppealidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("appealid").append("=?");
                }

                if (pObject.isActidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("actid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("contractsampletype.contractsampletypeid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isContractsampletypeidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
                }

                if (pObject.isContractidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }

                if (pObject.isSampletypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }

                if (pObject.isBoxnumModified()) {
                      ps.setString(++_dirtyCount, pObject.getBoxnum());
                }

                if (pObject.isQuantityModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getQuantity());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isIsboxModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getIsbox());
                }

                if (pObject.isParentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isInfoModified()) {
                      ps.setString(++_dirtyCount, pObject.getInfo());
                }

                if (pObject.isSpeciesidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }

                if (pObject.isStampModified()) {
                      ps.setString(++_dirtyCount, pObject.getStamp());
                }

                if (pObject.isAppealidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }

                if (pObject.isActidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ContractsampletypeBean pObjects into the database.
     *
     * @param pObjects the ContractsampletypeBean pObject table to be saved
     * @return the saved ContractsampletypeBean array.
     */
    //65
    public ContractsampletypeBean[] save(ContractsampletypeBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ContractsampletypeBean pObject from a template one giving a c
     *
     * @param pObject the ContractsampletypeBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ContractsampletypeBean loadUniqueUsingTemplate(ContractsampletypeBean pObject) throws SQLException
    {
         ContractsampletypeBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ContractsampletypeBean from a template one.
     *
     * @param pObject the ContractsampletypeBean template to look for
     * @return all the ContractsampletypeBean matching the template
     */
    //88
    public ContractsampletypeBean[] loadUsingTemplate(ContractsampletypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from contractsampletype WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isContractsampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampletypeid= ?");
             }
    
             if (pObject.isContractidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
             }
    
             if (pObject.isSampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
             }
    
             if (pObject.isBoxnumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("boxnum= ?");
             }
    
             if (pObject.isQuantityModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("quantity= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isIsboxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("isbox= ?");
             }
    
             if (pObject.isParentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isInfoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("info= ?");
             }
    
             if (pObject.isSpeciesidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("speciesid= ?");
             }
    
             if (pObject.isStampModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
             }
    
             if (pObject.isAppealidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("appealid= ?");
             }
    
             if (pObject.isActidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isContractsampletypeidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
             }
    
             if (pObject.isContractidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
             }
    
             if (pObject.isSampletypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
             }
    
             if (pObject.isBoxnumModified()) {
                 ps.setString(++_dirtyCount, pObject.getBoxnum());
             }
    
             if (pObject.isQuantityModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getQuantity());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isIsboxModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getIsbox());
             }
    
             if (pObject.isParentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isInfoModified()) {
                 ps.setString(++_dirtyCount, pObject.getInfo());
             }
    
             if (pObject.isSpeciesidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
             }
    
             if (pObject.isStampModified()) {
                 ps.setString(++_dirtyCount, pObject.getStamp());
             }
    
             if (pObject.isAppealidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
             }
    
             if (pObject.isActidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ContractsampletypeBean template.
     *
     * @param pObject the ContractsampletypeBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ContractsampletypeBean pObject) throws SQLException
    {
        if (pObject.isContractsampletypeidInitialized())
            return deleteByPrimaryKey(pObject.getContractsampletypeid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM contractsampletype WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isContractsampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractsampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBoxnumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("boxnum").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isQuantityInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("quantity").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIsboxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("isbox").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isParentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("parentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInfoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("info").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSpeciesidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("speciesid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStampInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("stamp").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAppealidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("appealid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("actid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isContractsampletypeidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
            }
    
            if (pObject.isContractidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
            }
    
            if (pObject.isSampletypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
            }
    
            if (pObject.isBoxnumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getBoxnum());
            }
    
            if (pObject.isQuantityInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getQuantity());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isIsboxInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getIsbox());
            }
    
            if (pObject.isParentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isInfoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getInfo());
            }
    
            if (pObject.isSpeciesidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
            }
    
            if (pObject.isStampInitialized()) {
                ps.setString(++_dirtyCount, pObject.getStamp());
            }
    
            if (pObject.isAppealidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
            }
    
            if (pObject.isActidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ContractsampleitemBean using the relation table Contractsampleitem given a ContractsampletypeBean object.
     *
     * @param pObject the ContractsampletypeBean pObject to be used
     * @return an array of ContractsampleitemBean 
     */
    // MANY TO MANY
    public ContractsampleitemBean[] loadContractsampleitemViaContractsampleitem(ContractsampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampleitem,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.contractsampletypeid = ?"
                         + " AND contractsampleitem.parentid = contractsampleitem.contractsampleitemid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampletypeid());
             return ContractsampleitemManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DerivatetypeBean using the relation table Contractsampleitem given a ContractsampletypeBean object.
     *
     * @param pObject the ContractsampletypeBean pObject to be used
     * @return an array of DerivatetypeBean 
     */
    // MANY TO MANY
    public DerivatetypeBean[] loadDerivatetypeViaContractsampleitem(ContractsampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        derivatetype,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.contractsampletypeid = ?"
                         + " AND contractsampleitem.derivatetypeid = derivatetype.derivatetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampletypeid());
             return DerivatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Contractsampleitem given a ContractsampletypeBean object.
     *
     * @param pObject the ContractsampletypeBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaContractsampleitem(ContractsampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.contractsampletypeid = ?"
                         + " AND contractsampleitem.institutionid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampletypeid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SpeciesBean using the relation table Contractsampleitem given a ContractsampletypeBean object.
     *
     * @param pObject the ContractsampletypeBean pObject to be used
     * @return an array of SpeciesBean 
     */
    // MANY TO MANY
    public SpeciesBean[] loadSpeciesViaContractsampleitem(ContractsampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        species,contractsampleitem"
                         + " WHERE "    
                         + "     contractsampleitem.contractsampletypeid = ?"
                         + " AND contractsampleitem.speciesid = species.speciesid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampletypeid());
             return SpeciesManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Sampleboxreseach given a ContractsampletypeBean object.
     *
     * @param pObject the ContractsampletypeBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaSampleboxreseach(ContractsampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,sampleboxreseach"
                         + " WHERE "    
                         + "     sampleboxreseach.contractsampletypeid = ?"
                         + " AND sampleboxreseach.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampletypeid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table contractsampletype.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table contractsampletype with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from contractsampletype " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table contractsampletype with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ContractsampletypeBean pObject given a c
     *
     * @param pObject the ContractsampletypeBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ContractsampletypeBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from contractsampletype WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isContractsampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampletypeid= ?");
                }
    
                if (pObject.isContractidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
                }
    
                if (pObject.isSampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
                }
    
                if (pObject.isBoxnumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("boxnum= ?");
                }
    
                if (pObject.isQuantityModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("quantity= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isIsboxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("isbox= ?");
                }
    
                if (pObject.isParentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isInfoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("info= ?");
                }
    
                if (pObject.isSpeciesidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("speciesid= ?");
                }
    
                if (pObject.isStampModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
                }
    
                if (pObject.isAppealidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("appealid= ?");
                }
    
                if (pObject.isActidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isContractsampletypeidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isBoxnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getBoxnum());
                }
    
                if (pObject.isQuantityModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getQuantity());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isIsboxModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getIsbox());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getInfo());
                }
    
                if (pObject.isSpeciesidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                if (pObject.isAppealidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }
    
                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the contractsampletype on a ContractsampletypeBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ContractsampletypeBean pObject
     */
    //72
    public ContractsampletypeBean decodeRow(ResultSet rs) throws SQLException
    {
        ContractsampletypeBean pObject = createContractsampletypeBean();
        pObject.setContractsampletypeid(Manager.getLong(rs, 1));
        pObject.setContractid(Manager.getLong(rs, 2));
        pObject.setSampletypeid(Manager.getInteger(rs, 3));
        pObject.setBoxnum(rs.getString(4));
        pObject.setQuantity(Manager.getLong(rs, 5));
        pObject.setRegbyid(Manager.getInteger(rs, 6));
        pObject.setRegdate(rs.getTimestamp(7));
        pObject.setIsbox(Manager.getBoolean(rs, 8));
        pObject.setParentid(Manager.getLong(rs, 9));
        pObject.setDeleted(Manager.getBoolean(rs, 10));
        pObject.setInfo(rs.getString(11));
        pObject.setSpeciesid(Manager.getInteger(rs, 12));
        pObject.setStamp(rs.getString(13));
        pObject.setAppealid(Manager.getLong(rs, 14));
        pObject.setActid(Manager.getLong(rs, 15));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the contractsampletype table on a ContractsampletypeBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ContractsampletypeBean pObject
     */
    //73
    public ContractsampletypeBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ContractsampletypeBean pObject = createContractsampletypeBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_CONTRACTSAMPLETYPEID:
                    ++pos;
                    pObject.setContractsampletypeid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTID:
                    ++pos;
                    pObject.setContractid(Manager.getLong(rs, pos));
                    break;
                case ID_SAMPLETYPEID:
                    ++pos;
                    pObject.setSampletypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_BOXNUM:
                    ++pos;
                    pObject.setBoxnum(rs.getString(pos));
                    break;
                case ID_QUANTITY:
                    ++pos;
                    pObject.setQuantity(Manager.getLong(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_ISBOX:
                    ++pos;
                    pObject.setIsbox(Manager.getBoolean(rs, pos));
                    break;
                case ID_PARENTID:
                    ++pos;
                    pObject.setParentid(Manager.getLong(rs, pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_INFO:
                    ++pos;
                    pObject.setInfo(rs.getString(pos));
                    break;
                case ID_SPECIESID:
                    ++pos;
                    pObject.setSpeciesid(Manager.getInteger(rs, pos));
                    break;
                case ID_STAMP:
                    ++pos;
                    pObject.setStamp(rs.getString(pos));
                    break;
                case ID_APPEALID:
                    ++pos;
                    pObject.setAppealid(Manager.getLong(rs, pos));
                    break;
                case ID_ACTID:
                    ++pos;
                    pObject.setActid(Manager.getLong(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ContractsampletypeBean 
     */
    //41
    public ContractsampletypeBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ContractsampletypeBean 
     */
    public ContractsampletypeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ContractsampletypeBean[])v.toArray(new ContractsampletypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ContractsampletypeListener listener = null;

    /**
     * Registers a unique ContractsampletypeListener listener.
     */
    //66.5
    public void registerListener(ContractsampletypeListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ContractsampletypeBean pObject.
     *
     * @param pObject the ContractsampletypeBean pObject to be saved
     */
    //67
    void beforeInsert(ContractsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ContractsampletypeBean pObject.
     *
     * @param pObject the ContractsampletypeBean pObject to be saved
     */
    //68
    void afterInsert(ContractsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ContractsampletypeBean pObject.
     *
     * @param pObject the ContractsampletypeBean pObject to be updated
     */
    //69
    void beforeUpdate(ContractsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ContractsampletypeBean pObject.
     *
     * @param pObject the ContractsampletypeBean pObject to be updated
     */
    //70
    void afterUpdate(ContractsampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
