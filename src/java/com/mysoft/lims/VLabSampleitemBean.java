// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class VLabSampleitemBean
// extends+ 

// extends- 
{
    private Long barcode;
    private boolean barcode_is_modified = false;
    private boolean barcode_is_initialized = false;
    
    private String num1;
    private boolean num1_is_modified = false;
    private boolean num1_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private String sampletype;
    private boolean sampletype_is_modified = false;
    private boolean sampletype_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private String contragent;
    private boolean contragent_is_modified = false;
    private boolean contragent_is_initialized = false;
    
    private Long contragentid;
    private boolean contragentid_is_modified = false;
    private boolean contragentid_is_initialized = false;
    
    private Integer companyid;
    private boolean companyid_is_modified = false;
    private boolean companyid_is_initialized = false;
    
    private String smname;
    private boolean smname_is_modified = false;
    private boolean smname_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private Integer derivatetypeid;
    private boolean derivatetypeid_is_modified = false;
    private boolean derivatetypeid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VLabSampleitemBean()
    {
    }
    
    /**
     * Getter method for barcode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.barcode
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of barcode
     */
    public Long getBarcode()
    {
        return barcode; 
    }

    /**
     * Setter method for barcode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to barcode
     */
    public void setBarcode(Long newVal) {
        if ((newVal != null && this.barcode != null && (newVal.compareTo(this.barcode) == 0)) || 
            (newVal == null && this.barcode == null && barcode_is_initialized)) {
            return; 
        } 
        this.barcode = newVal; 
        barcode_is_modified = true; 
        barcode_is_initialized = true; 
    }

    /**
     * Setter method for barcode.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to barcode
     */
    public void setBarcode(long newVal) {
        setBarcode(new Long(newVal));
    }

    /**
     * Determines if the barcode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBarcodeModified() {
        return barcode_is_modified; 
    }

    /**
     * Determines if the barcode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBarcodeInitialized() {
        return barcode_is_initialized; 
    }

    /**
     * Getter method for num1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.num1
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num1
     */
    public String getNum1()
    {
        return num1; 
    }

    /**
     * Setter method for num1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num1
     */
    public void setNum1(String newVal) {
        if ((newVal != null && this.num1 != null && (newVal.compareTo(this.num1) == 0)) || 
            (newVal == null && this.num1 == null && num1_is_initialized)) {
            return; 
        } 
        this.num1 = newVal; 
        num1_is_modified = true; 
        num1_is_initialized = true; 
    }

    /**
     * Determines if the num1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNum1Modified() {
        return num1_is_modified; 
    }

    /**
     * Determines if the num1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNum1Initialized() {
        return num1_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.regdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.status
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of status
     */
    public Integer getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Integer newVal) {
        if ((newVal != null && this.status != null && (newVal.compareTo(this.status) == 0)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal) {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Getter method for sampletype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.sampletype
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sampletype
     */
    public String getSampletype()
    {
        return sampletype; 
    }

    /**
     * Setter method for sampletype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletype
     */
    public void setSampletype(String newVal) {
        if ((newVal != null && this.sampletype != null && (newVal.compareTo(this.sampletype) == 0)) || 
            (newVal == null && this.sampletype == null && sampletype_is_initialized)) {
            return; 
        } 
        this.sampletype = newVal; 
        sampletype_is_modified = true; 
        sampletype_is_initialized = true; 
    }

    /**
     * Determines if the sampletype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeModified() {
        return sampletype_is_modified; 
    }

    /**
     * Determines if the sampletype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeInitialized() {
        return sampletype_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Getter method for contragent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.contragent
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of contragent
     */
    public String getContragent()
    {
        return contragent; 
    }

    /**
     * Setter method for contragent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragent
     */
    public void setContragent(String newVal) {
        if ((newVal != null && this.contragent != null && (newVal.compareTo(this.contragent) == 0)) || 
            (newVal == null && this.contragent == null && contragent_is_initialized)) {
            return; 
        } 
        this.contragent = newVal; 
        contragent_is_modified = true; 
        contragent_is_initialized = true; 
    }

    /**
     * Determines if the contragent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentModified() {
        return contragent_is_modified; 
    }

    /**
     * Determines if the contragent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentInitialized() {
        return contragent_is_initialized; 
    }

    /**
     * Getter method for contragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.contragentid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contragentid
     */
    public Long getContragentid()
    {
        return contragentid; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(Long newVal) {
        if ((newVal != null && this.contragentid != null && (newVal.compareTo(this.contragentid) == 0)) || 
            (newVal == null && this.contragentid == null && contragentid_is_initialized)) {
            return; 
        } 
        this.contragentid = newVal; 
        contragentid_is_modified = true; 
        contragentid_is_initialized = true; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(long newVal) {
        setContragentid(new Long(newVal));
    }

    /**
     * Determines if the contragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentidModified() {
        return contragentid_is_modified; 
    }

    /**
     * Determines if the contragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentidInitialized() {
        return contragentid_is_initialized; 
    }

    /**
     * Getter method for companyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.companyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of companyid
     */
    public Integer getCompanyid()
    {
        return companyid; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(Integer newVal) {
        if ((newVal != null && this.companyid != null && (newVal.compareTo(this.companyid) == 0)) || 
            (newVal == null && this.companyid == null && companyid_is_initialized)) {
            return; 
        } 
        this.companyid = newVal; 
        companyid_is_modified = true; 
        companyid_is_initialized = true; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(int newVal) {
        setCompanyid(new Integer(newVal));
    }

    /**
     * Determines if the companyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyidModified() {
        return companyid_is_modified; 
    }

    /**
     * Determines if the companyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyidInitialized() {
        return companyid_is_initialized; 
    }

    /**
     * Getter method for smname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.smname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of smname
     */
    public String getSmname()
    {
        return smname; 
    }

    /**
     * Setter method for smname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to smname
     */
    public void setSmname(String newVal) {
        if ((newVal != null && this.smname != null && (newVal.compareTo(this.smname) == 0)) || 
            (newVal == null && this.smname == null && smname_is_initialized)) {
            return; 
        } 
        this.smname = newVal; 
        smname_is_modified = true; 
        smname_is_initialized = true; 
    }

    /**
     * Determines if the smname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSmnameModified() {
        return smname_is_modified; 
    }

    /**
     * Determines if the smname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSmnameInitialized() {
        return smname_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for derivatetypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_sampleitem.derivatetypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of derivatetypeid
     */
    public Integer getDerivatetypeid()
    {
        return derivatetypeid; 
    }

    /**
     * Setter method for derivatetypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to derivatetypeid
     */
    public void setDerivatetypeid(Integer newVal) {
        if ((newVal != null && this.derivatetypeid != null && (newVal.compareTo(this.derivatetypeid) == 0)) || 
            (newVal == null && this.derivatetypeid == null && derivatetypeid_is_initialized)) {
            return; 
        } 
        this.derivatetypeid = newVal; 
        derivatetypeid_is_modified = true; 
        derivatetypeid_is_initialized = true; 
    }

    /**
     * Setter method for derivatetypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to derivatetypeid
     */
    public void setDerivatetypeid(int newVal) {
        setDerivatetypeid(new Integer(newVal));
    }

    /**
     * Determines if the derivatetypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDerivatetypeidModified() {
        return derivatetypeid_is_modified; 
    }

    /**
     * Determines if the derivatetypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDerivatetypeidInitialized() {
        return derivatetypeid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return barcode_is_modified || 
		num1_is_modified || 
		regdate_is_modified || 
		status_is_modified || 
		sampletype_is_modified || 
		sampletypeid_is_modified || 
		contragent_is_modified || 
		contragentid_is_modified || 
		companyid_is_modified || 
		smname_is_modified || 
		institutionid_is_modified || 
		derivatetypeid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        barcode_is_modified = false;
        num1_is_modified = false;
        regdate_is_modified = false;
        status_is_modified = false;
        sampletype_is_modified = false;
        sampletypeid_is_modified = false;
        contragent_is_modified = false;
        contragentid_is_modified = false;
        companyid_is_modified = false;
        smname_is_modified = false;
        institutionid_is_modified = false;
        derivatetypeid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VLabSampleitemBean bean) {
        setBarcode(bean.getBarcode());
        setNum1(bean.getNum1());
        setRegdate(bean.getRegdate());
        setStatus(bean.getStatus());
        setSampletype(bean.getSampletype());
        setSampletypeid(bean.getSampletypeid());
        setContragent(bean.getContragent());
        setContragentid(bean.getContragentid());
        setCompanyid(bean.getCompanyid());
        setSmname(bean.getSmname());
        setInstitutionid(bean.getInstitutionid());
        setDerivatetypeid(bean.getDerivatetypeid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_lab_sampleitem] "
                 + "\n - v_lab_sampleitem.barcode = " + (barcode_is_initialized ? ("[" + (barcode == null ? null : barcode.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.num1 = " + (num1_is_initialized ? ("[" + (num1 == null ? null : num1.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.sampletype = " + (sampletype_is_initialized ? ("[" + (sampletype == null ? null : sampletype.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.contragent = " + (contragent_is_initialized ? ("[" + (contragent == null ? null : contragent.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.contragentid = " + (contragentid_is_initialized ? ("[" + (contragentid == null ? null : contragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.companyid = " + (companyid_is_initialized ? ("[" + (companyid == null ? null : companyid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.smname = " + (smname_is_initialized ? ("[" + (smname == null ? null : smname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_sampleitem.derivatetypeid = " + (derivatetypeid_is_initialized ? ("[" + (derivatetypeid == null ? null : derivatetypeid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
