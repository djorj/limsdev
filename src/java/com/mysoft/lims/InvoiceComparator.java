// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the InvoiceBean objects.
 */
public class InvoiceComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for InvoiceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new InvoiceComparator(InvoiceManager.INVOICEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>InvoiceManager.ID_INVOICEID
     *   <li>InvoiceManager.ID_NUM
     *   <li>InvoiceManager.ID_INVOICEDATE
     *   <li>InvoiceManager.ID_PRICE
     *   <li>InvoiceManager.ID_VAT
     *   <li>InvoiceManager.ID_OPERID
     *   <li>InvoiceManager.ID_CONTRAGENTID
     *   <li>InvoiceManager.ID_REGBYID
     *   <li>InvoiceManager.ID_REGDATE
     *   <li>InvoiceManager.ID_INVOICETYPEID
     *   <li>InvoiceManager.ID_INVOICESOURCETYPEID
     * </ul>
     */
    public InvoiceComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for InvoiceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new InvoiceComparator(InvoiceManager.INVOICEID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>InvoiceManager.ID_INVOICEID
     *   <li>InvoiceManager.ID_NUM
     *   <li>InvoiceManager.ID_INVOICEDATE
     *   <li>InvoiceManager.ID_PRICE
     *   <li>InvoiceManager.ID_VAT
     *   <li>InvoiceManager.ID_OPERID
     *   <li>InvoiceManager.ID_CONTRAGENTID
     *   <li>InvoiceManager.ID_REGBYID
     *   <li>InvoiceManager.ID_REGDATE
     *   <li>InvoiceManager.ID_INVOICETYPEID
     *   <li>InvoiceManager.ID_INVOICESOURCETYPEID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public InvoiceComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        InvoiceBean b1 = (InvoiceBean)pObj1;
        InvoiceBean b2 = (InvoiceBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case InvoiceManager.ID_INVOICEID:
                if (b1.getInvoiceid() == null && b2.getInvoiceid() != null) {
                    iReturn = -1;
                } else if (b1.getInvoiceid() == null && b2.getInvoiceid() == null) {
                    iReturn = 0;
                } else if (b1.getInvoiceid() != null && b2.getInvoiceid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInvoiceid().compareTo(b2.getInvoiceid());
                }
                break;
            case InvoiceManager.ID_NUM:
                if (b1.getNum() == null && b2.getNum() != null) {
                    iReturn = -1;
                } else if (b1.getNum() == null && b2.getNum() == null) {
                    iReturn = 0;
                } else if (b1.getNum() != null && b2.getNum() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getNum().compareTo(b2.getNum());
                }
                break;
            case InvoiceManager.ID_INVOICEDATE:
                if (b1.getInvoicedate() == null && b2.getInvoicedate() != null) {
                    iReturn = -1;
                } else if (b1.getInvoicedate() == null && b2.getInvoicedate() == null) {
                    iReturn = 0;
                } else if (b1.getInvoicedate() != null && b2.getInvoicedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInvoicedate().compareTo(b2.getInvoicedate());
                }
                break;
            case InvoiceManager.ID_PRICE:
                if (b1.getPrice() == null && b2.getPrice() != null) {
                    iReturn = -1;
                } else if (b1.getPrice() == null && b2.getPrice() == null) {
                    iReturn = 0;
                } else if (b1.getPrice() != null && b2.getPrice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPrice().compareTo(b2.getPrice());
                }
                break;
            case InvoiceManager.ID_VAT:
                if (b1.getVat() == null && b2.getVat() != null) {
                    iReturn = -1;
                } else if (b1.getVat() == null && b2.getVat() == null) {
                    iReturn = 0;
                } else if (b1.getVat() != null && b2.getVat() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getVat().compareTo(b2.getVat());
                }
                break;
            case InvoiceManager.ID_OPERID:
                if (b1.getOperid() == null && b2.getOperid() != null) {
                    iReturn = -1;
                } else if (b1.getOperid() == null && b2.getOperid() == null) {
                    iReturn = 0;
                } else if (b1.getOperid() != null && b2.getOperid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getOperid().compareTo(b2.getOperid());
                }
                break;
            case InvoiceManager.ID_CONTRAGENTID:
                if (b1.getContragentid() == null && b2.getContragentid() != null) {
                    iReturn = -1;
                } else if (b1.getContragentid() == null && b2.getContragentid() == null) {
                    iReturn = 0;
                } else if (b1.getContragentid() != null && b2.getContragentid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContragentid().compareTo(b2.getContragentid());
                }
                break;
            case InvoiceManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case InvoiceManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case InvoiceManager.ID_INVOICETYPEID:
                if (b1.getInvoicetypeid() == null && b2.getInvoicetypeid() != null) {
                    iReturn = -1;
                } else if (b1.getInvoicetypeid() == null && b2.getInvoicetypeid() == null) {
                    iReturn = 0;
                } else if (b1.getInvoicetypeid() != null && b2.getInvoicetypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInvoicetypeid().compareTo(b2.getInvoicetypeid());
                }
                break;
            case InvoiceManager.ID_INVOICESOURCETYPEID:
                if (b1.getInvoicesourcetypeid() == null && b2.getInvoicesourcetypeid() != null) {
                    iReturn = -1;
                } else if (b1.getInvoicesourcetypeid() == null && b2.getInvoicesourcetypeid() == null) {
                    iReturn = 0;
                } else if (b1.getInvoicesourcetypeid() != null && b2.getInvoicesourcetypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInvoicesourcetypeid().compareTo(b2.getInvoicesourcetypeid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
