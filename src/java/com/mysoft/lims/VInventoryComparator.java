// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the VInventoryBean objects.
 */
public class VInventoryComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for VInventoryComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VInventoryComparator(VInventoryManager.INSTITUTIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VInventoryManager.ID_INSTITUTIONID
     *   <li>VInventoryManager.ID_PRODUCTGROUPID
     *   <li>VInventoryManager.ID_PRODUCTID
     *   <li>VInventoryManager.ID_ACCOUNTNAME
     *   <li>VInventoryManager.ID_CODE
     *   <li>VInventoryManager.ID_COMPNUM
     *   <li>VInventoryManager.ID_INVNUMBER
     *   <li>VInventoryManager.ID_PRODUCTNAME
     *   <li>VInventoryManager.ID_UNITNAME
     *   <li>VInventoryManager.ID_PRICE
     *   <li>VInventoryManager.ID_REALAMOUNT
     *   <li>VInventoryManager.ID_REALPRICE
     *   <li>VInventoryManager.ID_AMOUNT
     *   <li>VInventoryManager.ID_ACCPRICE
     *   <li>VInventoryManager.ID_LESSAMOUNT
     *   <li>VInventoryManager.ID_LESSPRICE
     *   <li>VInventoryManager.ID_MOREAMOUNT
     *   <li>VInventoryManager.ID_MOREPRICE
     *   <li>VInventoryManager.ID_NOTE
     *   <li>VInventoryManager.ID_INVENTORYID
     * </ul>
     */
    public VInventoryComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for VInventoryComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VInventoryComparator(VInventoryManager.INSTITUTIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VInventoryManager.ID_INSTITUTIONID
     *   <li>VInventoryManager.ID_PRODUCTGROUPID
     *   <li>VInventoryManager.ID_PRODUCTID
     *   <li>VInventoryManager.ID_ACCOUNTNAME
     *   <li>VInventoryManager.ID_CODE
     *   <li>VInventoryManager.ID_COMPNUM
     *   <li>VInventoryManager.ID_INVNUMBER
     *   <li>VInventoryManager.ID_PRODUCTNAME
     *   <li>VInventoryManager.ID_UNITNAME
     *   <li>VInventoryManager.ID_PRICE
     *   <li>VInventoryManager.ID_REALAMOUNT
     *   <li>VInventoryManager.ID_REALPRICE
     *   <li>VInventoryManager.ID_AMOUNT
     *   <li>VInventoryManager.ID_ACCPRICE
     *   <li>VInventoryManager.ID_LESSAMOUNT
     *   <li>VInventoryManager.ID_LESSPRICE
     *   <li>VInventoryManager.ID_MOREAMOUNT
     *   <li>VInventoryManager.ID_MOREPRICE
     *   <li>VInventoryManager.ID_NOTE
     *   <li>VInventoryManager.ID_INVENTORYID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public VInventoryComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        VInventoryBean b1 = (VInventoryBean)pObj1;
        VInventoryBean b2 = (VInventoryBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case VInventoryManager.ID_INSTITUTIONID:
                if (b1.getInstitutionid() == null && b2.getInstitutionid() != null) {
                    iReturn = -1;
                } else if (b1.getInstitutionid() == null && b2.getInstitutionid() == null) {
                    iReturn = 0;
                } else if (b1.getInstitutionid() != null && b2.getInstitutionid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInstitutionid().compareTo(b2.getInstitutionid());
                }
                break;
            case VInventoryManager.ID_PRODUCTGROUPID:
                if (b1.getProductgroupid() == null && b2.getProductgroupid() != null) {
                    iReturn = -1;
                } else if (b1.getProductgroupid() == null && b2.getProductgroupid() == null) {
                    iReturn = 0;
                } else if (b1.getProductgroupid() != null && b2.getProductgroupid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getProductgroupid().compareTo(b2.getProductgroupid());
                }
                break;
            case VInventoryManager.ID_PRODUCTID:
                if (b1.getProductid() == null && b2.getProductid() != null) {
                    iReturn = -1;
                } else if (b1.getProductid() == null && b2.getProductid() == null) {
                    iReturn = 0;
                } else if (b1.getProductid() != null && b2.getProductid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getProductid().compareTo(b2.getProductid());
                }
                break;
            case VInventoryManager.ID_ACCOUNTNAME:
                if (b1.getAccountname() == null && b2.getAccountname() != null) {
                    iReturn = -1;
                } else if (b1.getAccountname() == null && b2.getAccountname() == null) {
                    iReturn = 0;
                } else if (b1.getAccountname() != null && b2.getAccountname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAccountname().compareTo(b2.getAccountname());
                }
                break;
            case VInventoryManager.ID_CODE:
                if (b1.getCode() == null && b2.getCode() != null) {
                    iReturn = -1;
                } else if (b1.getCode() == null && b2.getCode() == null) {
                    iReturn = 0;
                } else if (b1.getCode() != null && b2.getCode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCode().compareTo(b2.getCode());
                }
                break;
            case VInventoryManager.ID_COMPNUM:
                if (b1.getCompnum() == null && b2.getCompnum() != null) {
                    iReturn = -1;
                } else if (b1.getCompnum() == null && b2.getCompnum() == null) {
                    iReturn = 0;
                } else if (b1.getCompnum() != null && b2.getCompnum() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCompnum().compareTo(b2.getCompnum());
                }
                break;
            case VInventoryManager.ID_INVNUMBER:
                if (b1.getInvnumber() == null && b2.getInvnumber() != null) {
                    iReturn = -1;
                } else if (b1.getInvnumber() == null && b2.getInvnumber() == null) {
                    iReturn = 0;
                } else if (b1.getInvnumber() != null && b2.getInvnumber() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInvnumber().compareTo(b2.getInvnumber());
                }
                break;
            case VInventoryManager.ID_PRODUCTNAME:
                if (b1.getProductname() == null && b2.getProductname() != null) {
                    iReturn = -1;
                } else if (b1.getProductname() == null && b2.getProductname() == null) {
                    iReturn = 0;
                } else if (b1.getProductname() != null && b2.getProductname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getProductname().compareTo(b2.getProductname());
                }
                break;
            case VInventoryManager.ID_UNITNAME:
                if (b1.getUnitname() == null && b2.getUnitname() != null) {
                    iReturn = -1;
                } else if (b1.getUnitname() == null && b2.getUnitname() == null) {
                    iReturn = 0;
                } else if (b1.getUnitname() != null && b2.getUnitname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getUnitname().compareTo(b2.getUnitname());
                }
                break;
            case VInventoryManager.ID_PRICE:
                if (b1.getPrice() == null && b2.getPrice() != null) {
                    iReturn = -1;
                } else if (b1.getPrice() == null && b2.getPrice() == null) {
                    iReturn = 0;
                } else if (b1.getPrice() != null && b2.getPrice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPrice().compareTo(b2.getPrice());
                }
                break;
            case VInventoryManager.ID_REALAMOUNT:
                if (b1.getRealamount() == null && b2.getRealamount() != null) {
                    iReturn = -1;
                } else if (b1.getRealamount() == null && b2.getRealamount() == null) {
                    iReturn = 0;
                } else if (b1.getRealamount() != null && b2.getRealamount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRealamount().compareTo(b2.getRealamount());
                }
                break;
            case VInventoryManager.ID_REALPRICE:
                if (b1.getRealprice() == null && b2.getRealprice() != null) {
                    iReturn = -1;
                } else if (b1.getRealprice() == null && b2.getRealprice() == null) {
                    iReturn = 0;
                } else if (b1.getRealprice() != null && b2.getRealprice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRealprice().compareTo(b2.getRealprice());
                }
                break;
            case VInventoryManager.ID_AMOUNT:
                if (b1.getAmount() == null && b2.getAmount() != null) {
                    iReturn = -1;
                } else if (b1.getAmount() == null && b2.getAmount() == null) {
                    iReturn = 0;
                } else if (b1.getAmount() != null && b2.getAmount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAmount().compareTo(b2.getAmount());
                }
                break;
            case VInventoryManager.ID_ACCPRICE:
                if (b1.getAccprice() == null && b2.getAccprice() != null) {
                    iReturn = -1;
                } else if (b1.getAccprice() == null && b2.getAccprice() == null) {
                    iReturn = 0;
                } else if (b1.getAccprice() != null && b2.getAccprice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAccprice().compareTo(b2.getAccprice());
                }
                break;
            case VInventoryManager.ID_LESSAMOUNT:
                if (b1.getLessamount() == null && b2.getLessamount() != null) {
                    iReturn = -1;
                } else if (b1.getLessamount() == null && b2.getLessamount() == null) {
                    iReturn = 0;
                } else if (b1.getLessamount() != null && b2.getLessamount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLessamount().compareTo(b2.getLessamount());
                }
                break;
            case VInventoryManager.ID_LESSPRICE:
                if (b1.getLessprice() == null && b2.getLessprice() != null) {
                    iReturn = -1;
                } else if (b1.getLessprice() == null && b2.getLessprice() == null) {
                    iReturn = 0;
                } else if (b1.getLessprice() != null && b2.getLessprice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLessprice().compareTo(b2.getLessprice());
                }
                break;
            case VInventoryManager.ID_MOREAMOUNT:
                if (b1.getMoreamount() == null && b2.getMoreamount() != null) {
                    iReturn = -1;
                } else if (b1.getMoreamount() == null && b2.getMoreamount() == null) {
                    iReturn = 0;
                } else if (b1.getMoreamount() != null && b2.getMoreamount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getMoreamount().compareTo(b2.getMoreamount());
                }
                break;
            case VInventoryManager.ID_MOREPRICE:
                if (b1.getMoreprice() == null && b2.getMoreprice() != null) {
                    iReturn = -1;
                } else if (b1.getMoreprice() == null && b2.getMoreprice() == null) {
                    iReturn = 0;
                } else if (b1.getMoreprice() != null && b2.getMoreprice() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getMoreprice().compareTo(b2.getMoreprice());
                }
                break;
            case VInventoryManager.ID_NOTE:
                if (b1.getNote() == null && b2.getNote() != null) {
                    iReturn = -1;
                } else if (b1.getNote() == null && b2.getNote() == null) {
                    iReturn = 0;
                } else if (b1.getNote() != null && b2.getNote() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getNote().compareTo(b2.getNote());
                }
                break;
            case VInventoryManager.ID_INVENTORYID:
                if (b1.getInventoryid() == null && b2.getInventoryid() != null) {
                    iReturn = -1;
                } else if (b1.getInventoryid() == null && b2.getInventoryid() == null) {
                    iReturn = 0;
                } else if (b1.getInventoryid() != null && b2.getInventoryid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInventoryid().compareTo(b2.getInventoryid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
