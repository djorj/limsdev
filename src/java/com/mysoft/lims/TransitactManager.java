// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the transitact table.
 */
public class TransitactManager
// extends+ 

// extends- 
{

    /**
     * Column transitactid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_TRANSITACTID = 0;
    public static final int TYPE_TRANSITACTID = Types.BIGINT;
    public static final String NAME_TRANSITACTID = "transitactid";

    /**
     * Column fromlocationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_FROMLOCATIONID = 1;
    public static final int TYPE_FROMLOCATIONID = Types.INTEGER;
    public static final String NAME_FROMLOCATIONID = "fromlocationid";

    /**
     * Column tolocationid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TOLOCATIONID = 2;
    public static final int TYPE_TOLOCATIONID = Types.INTEGER;
    public static final String NAME_TOLOCATIONID = "tolocationid";

    /**
     * Column senddate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_SENDDATE = 3;
    public static final int TYPE_SENDDATE = Types.TIMESTAMP;
    public static final String NAME_SENDDATE = "senddate";

    /**
     * Column responsible of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RESPONSIBLE = 4;
    public static final int TYPE_RESPONSIBLE = Types.VARCHAR;
    public static final String NAME_RESPONSIBLE = "responsible";

    /**
     * Column sendreason of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SENDREASON = 5;
    public static final int TYPE_SENDREASON = Types.VARCHAR;
    public static final String NAME_SENDREASON = "sendreason";

    /**
     * Column amount of type Types.VARCHAR mapped to String.
     */
    public static final int ID_AMOUNT = 6;
    public static final int TYPE_AMOUNT = Types.VARCHAR;
    public static final String NAME_AMOUNT = "amount";

    /**
     * Column volume of type Types.VARCHAR mapped to String.
     */
    public static final int ID_VOLUME = 7;
    public static final int TYPE_VOLUME = Types.VARCHAR;
    public static final String NAME_VOLUME = "volume";

    /**
     * Column sendcondition of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SENDCONDITION = 8;
    public static final int TYPE_SENDCONDITION = Types.VARCHAR;
    public static final String NAME_SENDCONDITION = "sendcondition";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 9;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 10;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column getbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_GETBYID = 11;
    public static final int TYPE_GETBYID = Types.INTEGER;
    public static final String NAME_GETBYID = "getbyid";

    /**
     * Column getdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_GETDATE = 12;
    public static final int TYPE_GETDATE = Types.TIMESTAMP;
    public static final String NAME_GETDATE = "getdate";

    /**
     * Column contractid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTID = 13;
    public static final int TYPE_CONTRACTID = Types.BIGINT;
    public static final String NAME_CONTRACTID = "contractid";

    /**
     * Column appealid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_APPEALID = 14;
    public static final int TYPE_APPEALID = Types.BIGINT;
    public static final String NAME_APPEALID = "appealid";

    /**
     * Column actid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_ACTID = 15;
    public static final int TYPE_ACTID = Types.BIGINT;
    public static final String NAME_ACTID = "actid";


    private static final String TABLE_NAME = "transitact";

    /**
     * Create an array of type string containing all the fields of the transitact table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "transitact.transitactid"
        ,"transitact.fromlocationid"
        ,"transitact.tolocationid"
        ,"transitact.senddate"
        ,"transitact.responsible"
        ,"transitact.sendreason"
        ,"transitact.amount"
        ,"transitact.volume"
        ,"transitact.sendcondition"
        ,"transitact.regbyid"
        ,"transitact.regdate"
        ,"transitact.getbyid"
        ,"transitact.getdate"
        ,"transitact.contractid"
        ,"transitact.appealid"
        ,"transitact.actid"
    };

    /**
     * Field that contains the comma separated fields of the transitact table.
     */
    private static final String ALL_FIELDS = "transitact.transitactid"
                            + ",transitact.fromlocationid"
                            + ",transitact.tolocationid"
                            + ",transitact.senddate"
                            + ",transitact.responsible"
                            + ",transitact.sendreason"
                            + ",transitact.amount"
                            + ",transitact.volume"
                            + ",transitact.sendcondition"
                            + ",transitact.regbyid"
                            + ",transitact.regdate"
                            + ",transitact.getbyid"
                            + ",transitact.getdate"
                            + ",transitact.contractid"
                            + ",transitact.appealid"
                            + ",transitact.actid";

    private static TransitactManager singleton = new TransitactManager();

    /**
     * Get the TransitactManager singleton.
     *
     * @return TransitactManager 
     */
    synchronized public static TransitactManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own TransitactManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(TransitactManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new TransitactBean instance.
     *
     * @return the new TransitactBean 
     */
    public TransitactBean createTransitactBean()
    {
        return new TransitactBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a TransitactBean from the transitact using its key fields.
     *
     * @return a unique TransitactBean 
     */
    //12
    public TransitactBean loadByPrimaryKey(Long transitactid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE transitact.transitactid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, transitactid);
            TransitactBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long transitactid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from transitact WHERE transitact.transitactid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, transitactid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads TransitactBean array from the transitact table using its actid field.
     *
     * @return an array of TransitactBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitactBean[] loadByActid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE actid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitact table by actid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByActid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitact WHERE actid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitactBean array from the transitact table using its appealid field.
     *
     * @return an array of TransitactBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitactBean[] loadByAppealid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE appealid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitact table by appealid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByAppealid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitact WHERE appealid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitactBean array from the transitact table using its contractid field.
     *
     * @return an array of TransitactBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitactBean[] loadByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE contractid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitact table by contractid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitact WHERE contractid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitactBean array from the transitact table using its fromlocationid field.
     *
     * @return an array of TransitactBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitactBean[] loadByFromlocationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE fromlocationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitact table by fromlocationid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByFromlocationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitact WHERE fromlocationid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitactBean array from the transitact table using its tolocationid field.
     *
     * @return an array of TransitactBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitactBean[] loadByTolocationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE tolocationid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitact table by tolocationid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByTolocationid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitact WHERE tolocationid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitactBean array from the transitact table using its regbyid field.
     *
     * @return an array of TransitactBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitactBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitact table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitact WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads TransitactBean array from the transitact table using its getbyid field.
     *
     * @return an array of TransitactBean 
     */
    // LOAD BY IMPORTED KEY
    public TransitactBean[] loadByGetbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact WHERE getbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the transitact table by getbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByGetbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM transitact WHERE getbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ActBean object from the transitact.actid field.
     *
     * @param pObject the TransitactBean 
     * @return the associated ActBean pObject
     */
    // GET IMPORTED
    public ActBean getActBean(TransitactBean pObject) throws SQLException
    {
        ActBean other = ActManager.getInstance().createActBean();
        other.setActid(pObject.getActid());
        return ActManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitactBean object to the ActBean object.
     *
     * @param pObject the TransitactBean object to use
     * @param pObjectToBeSet the ActBean object to associate to the TransitactBean 
     * @return the associated ActBean pObject
     */
    // SET IMPORTED
    public TransitactBean setActBean(TransitactBean pObject,ActBean pObjectToBeSet)
    {
        pObject.setActid(pObjectToBeSet.getActid());
        return pObject;
    }

    /**
     * Retrieves the AppealBean object from the transitact.appealid field.
     *
     * @param pObject the TransitactBean 
     * @return the associated AppealBean pObject
     */
    // GET IMPORTED
    public AppealBean getAppealBean(TransitactBean pObject) throws SQLException
    {
        AppealBean other = AppealManager.getInstance().createAppealBean();
        other.setAppealid(pObject.getAppealid());
        return AppealManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitactBean object to the AppealBean object.
     *
     * @param pObject the TransitactBean object to use
     * @param pObjectToBeSet the AppealBean object to associate to the TransitactBean 
     * @return the associated AppealBean pObject
     */
    // SET IMPORTED
    public TransitactBean setAppealBean(TransitactBean pObject,AppealBean pObjectToBeSet)
    {
        pObject.setAppealid(pObjectToBeSet.getAppealid());
        return pObject;
    }

    /**
     * Retrieves the ContractBean object from the transitact.contractid field.
     *
     * @param pObject the TransitactBean 
     * @return the associated ContractBean pObject
     */
    // GET IMPORTED
    public ContractBean getContractBean(TransitactBean pObject) throws SQLException
    {
        ContractBean other = ContractManager.getInstance().createContractBean();
        other.setContractid(pObject.getContractid());
        return ContractManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitactBean object to the ContractBean object.
     *
     * @param pObject the TransitactBean object to use
     * @param pObjectToBeSet the ContractBean object to associate to the TransitactBean 
     * @return the associated ContractBean pObject
     */
    // SET IMPORTED
    public TransitactBean setContractBean(TransitactBean pObject,ContractBean pObjectToBeSet)
    {
        pObject.setContractid(pObjectToBeSet.getContractid());
        return pObject;
    }

    /**
     * Retrieves the InstitutionBean object from the transitact.institutionid field.
     *
     * @param pObject the TransitactBean 
     * @return the associated InstitutionBean pObject
     */
    // GET IMPORTED
    public InstitutionBean getInstitutionBean(TransitactBean pObject) throws SQLException
    {
        InstitutionBean other = InstitutionManager.getInstance().createInstitutionBean();
        other.setInstitutionid(pObject.getFromlocationid());
        return InstitutionManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitactBean object to the InstitutionBean object.
     *
     * @param pObject the TransitactBean object to use
     * @param pObjectToBeSet the InstitutionBean object to associate to the TransitactBean 
     * @return the associated InstitutionBean pObject
     */
    // SET IMPORTED
    public TransitactBean setInstitutionBean(TransitactBean pObject,InstitutionBean pObjectToBeSet)
    {
        pObject.setFromlocationid(pObjectToBeSet.getInstitutionid());
        return pObject;
    }

    /**
     * Retrieves the PersonellBean object from the transitact.personellid field.
     *
     * @param pObject the TransitactBean 
     * @return the associated PersonellBean pObject
     */
    // GET IMPORTED
    public PersonellBean getPersonellBean(TransitactBean pObject) throws SQLException
    {
        PersonellBean other = PersonellManager.getInstance().createPersonellBean();
        other.setPersonellid(pObject.getRegbyid());
        return PersonellManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the TransitactBean object to the PersonellBean object.
     *
     * @param pObject the TransitactBean object to use
     * @param pObjectToBeSet the PersonellBean object to associate to the TransitactBean 
     * @return the associated PersonellBean pObject
     */
    // SET IMPORTED
    public TransitactBean setPersonellBean(TransitactBean pObject,PersonellBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonellid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from transitact.
     *
     * @return an array of TransitactManager pObject
     */
    //38
    public TransitactBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM transitact",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TransitactBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TransitactBean table 
     */
    //49
    public TransitactBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TransitactBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting TransitactBean table 
     */
    //51
    public TransitactBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from transitact " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from transitact ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (TransitactBean[])v.toArray(new TransitactBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from transitact table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the transitact table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM transitact " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the TransitactBean pObject into the database.
     *
     * @param pObject the TransitactBean pObject to be saved
     */
    //100
    public TransitactBean save(TransitactBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isTransitactidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('transitactid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setTransitactid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into transitact (");
    
                if (pObject.isTransitactidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("transitactid");
                    _dirtyCount++;
                }

                if (pObject.isFromlocationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fromlocationid");
                    _dirtyCount++;
                }

                if (pObject.isTolocationidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tolocationid");
                    _dirtyCount++;
                }

                if (pObject.isSenddateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("senddate");
                    _dirtyCount++;
                }

                if (pObject.isResponsibleModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("responsible");
                    _dirtyCount++;
                }

                if (pObject.isSendreasonModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sendreason");
                    _dirtyCount++;
                }

                if (pObject.isAmountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("amount");
                    _dirtyCount++;
                }

                if (pObject.isVolumeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("volume");
                    _dirtyCount++;
                }

                if (pObject.isSendconditionModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sendcondition");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isGetbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("getbyid");
                    _dirtyCount++;
                }

                if (pObject.isGetdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("getdate");
                    _dirtyCount++;
                }

                if (pObject.isContractidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractid");
                    _dirtyCount++;
                }

                if (pObject.isAppealidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("appealid");
                    _dirtyCount++;
                }

                if (pObject.isActidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("actid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isTransitactidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
                }
    
                if (pObject.isFromlocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
                }
    
                if (pObject.isTolocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTolocationid());
                }
    
                if (pObject.isSenddateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getSenddate());
                }
    
                if (pObject.isResponsibleModified()) {
                    ps.setString(++_dirtyCount, pObject.getResponsible());
                }
    
                if (pObject.isSendreasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendreason());
                }
    
                if (pObject.isAmountModified()) {
                    ps.setString(++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isVolumeModified()) {
                    ps.setString(++_dirtyCount, pObject.getVolume());
                }
    
                if (pObject.isSendconditionModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendcondition());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isGetbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
                }
    
                if (pObject.isGetdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isAppealidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }
    
                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE transitact SET ");
                boolean useComma=false;

                if (pObject.isTransitactidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("transitactid").append("=?");
                }

                if (pObject.isFromlocationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fromlocationid").append("=?");
                }

                if (pObject.isTolocationidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tolocationid").append("=?");
                }

                if (pObject.isSenddateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("senddate").append("=?");
                }

                if (pObject.isResponsibleModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("responsible").append("=?");
                }

                if (pObject.isSendreasonModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sendreason").append("=?");
                }

                if (pObject.isAmountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("amount").append("=?");
                }

                if (pObject.isVolumeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("volume").append("=?");
                }

                if (pObject.isSendconditionModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sendcondition").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isGetbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("getbyid").append("=?");
                }

                if (pObject.isGetdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("getdate").append("=?");
                }

                if (pObject.isContractidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractid").append("=?");
                }

                if (pObject.isAppealidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("appealid").append("=?");
                }

                if (pObject.isActidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("actid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("transitact.transitactid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isTransitactidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
                }

                if (pObject.isFromlocationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
                }

                if (pObject.isTolocationidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTolocationid());
                }

                if (pObject.isSenddateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getSenddate());
                }

                if (pObject.isResponsibleModified()) {
                      ps.setString(++_dirtyCount, pObject.getResponsible());
                }

                if (pObject.isSendreasonModified()) {
                      ps.setString(++_dirtyCount, pObject.getSendreason());
                }

                if (pObject.isAmountModified()) {
                      ps.setString(++_dirtyCount, pObject.getAmount());
                }

                if (pObject.isVolumeModified()) {
                      ps.setString(++_dirtyCount, pObject.getVolume());
                }

                if (pObject.isSendconditionModified()) {
                      ps.setString(++_dirtyCount, pObject.getSendcondition());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isGetbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
                }

                if (pObject.isGetdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
                }

                if (pObject.isContractidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }

                if (pObject.isAppealidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }

                if (pObject.isActidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of TransitactBean pObjects into the database.
     *
     * @param pObjects the TransitactBean pObject table to be saved
     * @return the saved TransitactBean array.
     */
    //65
    public TransitactBean[] save(TransitactBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique TransitactBean pObject from a template one giving a c
     *
     * @param pObject the TransitactBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public TransitactBean loadUniqueUsingTemplate(TransitactBean pObject) throws SQLException
    {
         TransitactBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of TransitactBean from a template one.
     *
     * @param pObject the TransitactBean template to look for
     * @return all the TransitactBean matching the template
     */
    //88
    public TransitactBean[] loadUsingTemplate(TransitactBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from transitact WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isTransitactidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitactid= ?");
             }
    
             if (pObject.isFromlocationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fromlocationid= ?");
             }
    
             if (pObject.isTolocationidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tolocationid= ?");
             }
    
             if (pObject.isSenddateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("senddate= ?");
             }
    
             if (pObject.isResponsibleModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("responsible= ?");
             }
    
             if (pObject.isSendreasonModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendreason= ?");
             }
    
             if (pObject.isAmountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
             }
    
             if (pObject.isVolumeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("volume= ?");
             }
    
             if (pObject.isSendconditionModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendcondition= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isGetbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getbyid= ?");
             }
    
             if (pObject.isGetdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getdate= ?");
             }
    
             if (pObject.isContractidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
             }
    
             if (pObject.isAppealidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("appealid= ?");
             }
    
             if (pObject.isActidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isTransitactidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
             }
    
             if (pObject.isFromlocationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
             }
    
             if (pObject.isTolocationidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTolocationid());
             }
    
             if (pObject.isSenddateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getSenddate());
             }
    
             if (pObject.isResponsibleModified()) {
                 ps.setString(++_dirtyCount, pObject.getResponsible());
             }
    
             if (pObject.isSendreasonModified()) {
                 ps.setString(++_dirtyCount, pObject.getSendreason());
             }
    
             if (pObject.isAmountModified()) {
                 ps.setString(++_dirtyCount, pObject.getAmount());
             }
    
             if (pObject.isVolumeModified()) {
                 ps.setString(++_dirtyCount, pObject.getVolume());
             }
    
             if (pObject.isSendconditionModified()) {
                 ps.setString(++_dirtyCount, pObject.getSendcondition());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isGetbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
             }
    
             if (pObject.isGetdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
             }
    
             if (pObject.isContractidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
             }
    
             if (pObject.isAppealidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
             }
    
             if (pObject.isActidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a TransitactBean template.
     *
     * @param pObject the TransitactBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(TransitactBean pObject) throws SQLException
    {
        if (pObject.isTransitactidInitialized())
            return deleteByPrimaryKey(pObject.getTransitactid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM transitact WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isTransitactidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("transitactid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFromlocationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fromlocationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTolocationidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tolocationid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSenddateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("senddate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResponsibleInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("responsible").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSendreasonInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sendreason").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAmountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("amount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isVolumeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("volume").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSendconditionInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sendcondition").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGetbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("getbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGetdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("getdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAppealidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("appealid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isActidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("actid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isTransitactidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
            }
    
            if (pObject.isFromlocationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
            }
    
            if (pObject.isTolocationidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTolocationid());
            }
    
            if (pObject.isSenddateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getSenddate());
            }
    
            if (pObject.isResponsibleInitialized()) {
                ps.setString(++_dirtyCount, pObject.getResponsible());
            }
    
            if (pObject.isSendreasonInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSendreason());
            }
    
            if (pObject.isAmountInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAmount());
            }
    
            if (pObject.isVolumeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getVolume());
            }
    
            if (pObject.isSendconditionInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSendcondition());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isGetbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
            }
    
            if (pObject.isGetdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
            }
    
            if (pObject.isContractidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
            }
    
            if (pObject.isAppealidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
            }
    
            if (pObject.isActidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ContractsampleitemBean using the relation table Transitsampleitem given a TransitactBean object.
     *
     * @param pObject the TransitactBean pObject to be used
     * @return an array of ContractsampleitemBean 
     */
    // MANY TO MANY
    public ContractsampleitemBean[] loadContractsampleitemViaTransitsampleitem(TransitactBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampleitem,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.transitactid = ?"
                         + " AND transitsampleitem.contractsampleitemid = contractsampleitem.contractsampleitemid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getTransitactid());
             return ContractsampleitemManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Transitsampleitem given a TransitactBean object.
     *
     * @param pObject the TransitactBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaTransitsampleitem(TransitactBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.transitactid = ?"
                         + " AND transitsampleitem.fromlocationid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getTransitactid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Transitsampleitem given a TransitactBean object.
     *
     * @param pObject the TransitactBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaTransitsampleitem(TransitactBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.transitactid = ?"
                         + " AND transitsampleitem.getbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getTransitactid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table transitact.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table transitact with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from transitact " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table transitact with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific TransitactBean pObject given a c
     *
     * @param pObject the TransitactBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(TransitactBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from transitact WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isTransitactidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transitactid= ?");
                }
    
                if (pObject.isFromlocationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fromlocationid= ?");
                }
    
                if (pObject.isTolocationidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tolocationid= ?");
                }
    
                if (pObject.isSenddateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("senddate= ?");
                }
    
                if (pObject.isResponsibleModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("responsible= ?");
                }
    
                if (pObject.isSendreasonModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendreason= ?");
                }
    
                if (pObject.isAmountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("amount= ?");
                }
    
                if (pObject.isVolumeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("volume= ?");
                }
    
                if (pObject.isSendconditionModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sendcondition= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isGetbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getbyid= ?");
                }
    
                if (pObject.isGetdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("getdate= ?");
                }
    
                if (pObject.isContractidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
                }
    
                if (pObject.isAppealidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("appealid= ?");
                }
    
                if (pObject.isActidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("actid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isTransitactidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getTransitactid());
                }
    
                if (pObject.isFromlocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getFromlocationid());
                }
    
                if (pObject.isTolocationidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTolocationid());
                }
    
                if (pObject.isSenddateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getSenddate());
                }
    
                if (pObject.isResponsibleModified()) {
                    ps.setString(++_dirtyCount, pObject.getResponsible());
                }
    
                if (pObject.isSendreasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendreason());
                }
    
                if (pObject.isAmountModified()) {
                    ps.setString(++_dirtyCount, pObject.getAmount());
                }
    
                if (pObject.isVolumeModified()) {
                    ps.setString(++_dirtyCount, pObject.getVolume());
                }
    
                if (pObject.isSendconditionModified()) {
                    ps.setString(++_dirtyCount, pObject.getSendcondition());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isGetbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getGetbyid());
                }
    
                if (pObject.isGetdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getGetdate());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isAppealidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getAppealid());
                }
    
                if (pObject.isActidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getActid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the transitact on a TransitactBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting TransitactBean pObject
     */
    //72
    public TransitactBean decodeRow(ResultSet rs) throws SQLException
    {
        TransitactBean pObject = createTransitactBean();
        pObject.setTransitactid(Manager.getLong(rs, 1));
        pObject.setFromlocationid(Manager.getInteger(rs, 2));
        pObject.setTolocationid(Manager.getInteger(rs, 3));
        pObject.setSenddate(rs.getTimestamp(4));
        pObject.setResponsible(rs.getString(5));
        pObject.setSendreason(rs.getString(6));
        pObject.setAmount(rs.getString(7));
        pObject.setVolume(rs.getString(8));
        pObject.setSendcondition(rs.getString(9));
        pObject.setRegbyid(Manager.getInteger(rs, 10));
        pObject.setRegdate(rs.getTimestamp(11));
        pObject.setGetbyid(Manager.getInteger(rs, 12));
        pObject.setGetdate(rs.getTimestamp(13));
        pObject.setContractid(Manager.getLong(rs, 14));
        pObject.setAppealid(Manager.getLong(rs, 15));
        pObject.setActid(Manager.getLong(rs, 16));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the transitact table on a TransitactBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting TransitactBean pObject
     */
    //73
    public TransitactBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        TransitactBean pObject = createTransitactBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_TRANSITACTID:
                    ++pos;
                    pObject.setTransitactid(Manager.getLong(rs, pos));
                    break;
                case ID_FROMLOCATIONID:
                    ++pos;
                    pObject.setFromlocationid(Manager.getInteger(rs, pos));
                    break;
                case ID_TOLOCATIONID:
                    ++pos;
                    pObject.setTolocationid(Manager.getInteger(rs, pos));
                    break;
                case ID_SENDDATE:
                    ++pos;
                    pObject.setSenddate(rs.getTimestamp(pos));
                    break;
                case ID_RESPONSIBLE:
                    ++pos;
                    pObject.setResponsible(rs.getString(pos));
                    break;
                case ID_SENDREASON:
                    ++pos;
                    pObject.setSendreason(rs.getString(pos));
                    break;
                case ID_AMOUNT:
                    ++pos;
                    pObject.setAmount(rs.getString(pos));
                    break;
                case ID_VOLUME:
                    ++pos;
                    pObject.setVolume(rs.getString(pos));
                    break;
                case ID_SENDCONDITION:
                    ++pos;
                    pObject.setSendcondition(rs.getString(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_GETBYID:
                    ++pos;
                    pObject.setGetbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_GETDATE:
                    ++pos;
                    pObject.setGetdate(rs.getTimestamp(pos));
                    break;
                case ID_CONTRACTID:
                    ++pos;
                    pObject.setContractid(Manager.getLong(rs, pos));
                    break;
                case ID_APPEALID:
                    ++pos;
                    pObject.setAppealid(Manager.getLong(rs, pos));
                    break;
                case ID_ACTID:
                    ++pos;
                    pObject.setActid(Manager.getLong(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TransitactBean 
     */
    //41
    public TransitactBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TransitactBean 
     */
    public TransitactBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (TransitactBean[])v.toArray(new TransitactBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private TransitactListener listener = null;

    /**
     * Registers a unique TransitactListener listener.
     */
    //66.5
    public void registerListener(TransitactListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the TransitactBean pObject.
     *
     * @param pObject the TransitactBean pObject to be saved
     */
    //67
    void beforeInsert(TransitactBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the TransitactBean pObject.
     *
     * @param pObject the TransitactBean pObject to be saved
     */
    //68
    void afterInsert(TransitactBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the TransitactBean pObject.
     *
     * @param pObject the TransitactBean pObject to be updated
     */
    //69
    void beforeUpdate(TransitactBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the TransitactBean pObject.
     *
     * @param pObject the TransitactBean pObject to be updated
     */
    //70
    void afterUpdate(TransitactBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
