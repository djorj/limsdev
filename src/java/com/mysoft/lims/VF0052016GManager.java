// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the v_f_005_2016_g table.
 */
public class VF0052016GManager
// extends+ 

// extends- 
{

    /**
     * Column sampleitemreseachid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_SAMPLEITEMRESEACHID = 0;
    public static final int TYPE_SAMPLEITEMRESEACHID = Types.BIGINT;
    public static final String NAME_SAMPLEITEMRESEACHID = "sampleitemreseachid";

    /**
     * Column institutionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INSTITUTIONID = 1;
    public static final int TYPE_INSTITUTIONID = Types.INTEGER;
    public static final String NAME_INSTITUTIONID = "institutionid";

    /**
     * Column labname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LABNAME = 2;
    public static final int TYPE_LABNAME = Types.VARCHAR;
    public static final String NAME_LABNAME = "labname";

    /**
     * Column sampletype of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SAMPLETYPE = 3;
    public static final int TYPE_SAMPLETYPE = Types.VARCHAR;
    public static final String NAME_SAMPLETYPE = "sampletype";

    /**
     * Column outdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_OUTDATE = 4;
    public static final int TYPE_OUTDATE = Types.TIMESTAMP;
    public static final String NAME_OUTDATE = "outdate";

    /**
     * Column num of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NUM = 5;
    public static final int TYPE_NUM = Types.VARCHAR;
    public static final String NAME_NUM = "num";

    /**
     * Column regdate of type Types.VARCHAR mapped to String.
     */
    public static final int ID_REGDATE = 6;
    public static final int TYPE_REGDATE = Types.VARCHAR;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column sampleamount of type Types.BIGINT mapped to Long.
     */
    public static final int ID_SAMPLEAMOUNT = 7;
    public static final int TYPE_SAMPLEAMOUNT = Types.BIGINT;
    public static final String NAME_SAMPLEAMOUNT = "sampleamount";

    /**
     * Column stamp of type Types.VARCHAR mapped to String.
     */
    public static final int ID_STAMP = 8;
    public static final int TYPE_STAMP = Types.VARCHAR;
    public static final String NAME_STAMP = "stamp";

    /**
     * Column testname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_TESTNAME = 9;
    public static final int TYPE_TESTNAME = Types.VARCHAR;
    public static final String NAME_TESTNAME = "testname";


    private static final String TABLE_NAME = "v_f_005_2016_g";

    /**
     * Create an array of type string containing all the fields of the v_f_005_2016_g table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "v_f_005_2016_g.sampleitemreseachid"
        ,"v_f_005_2016_g.institutionid"
        ,"v_f_005_2016_g.labname"
        ,"v_f_005_2016_g.sampletype"
        ,"v_f_005_2016_g.outdate"
        ,"v_f_005_2016_g.num"
        ,"v_f_005_2016_g.regdate"
        ,"v_f_005_2016_g.sampleamount"
        ,"v_f_005_2016_g.stamp"
        ,"v_f_005_2016_g.testname"
    };

    /**
     * Field that contains the comma separated fields of the v_f_005_2016_g table.
     */
    private static final String ALL_FIELDS = "v_f_005_2016_g.sampleitemreseachid"
                            + ",v_f_005_2016_g.institutionid"
                            + ",v_f_005_2016_g.labname"
                            + ",v_f_005_2016_g.sampletype"
                            + ",v_f_005_2016_g.outdate"
                            + ",v_f_005_2016_g.num"
                            + ",v_f_005_2016_g.regdate"
                            + ",v_f_005_2016_g.sampleamount"
                            + ",v_f_005_2016_g.stamp"
                            + ",v_f_005_2016_g.testname";

    private static VF0052016GManager singleton = new VF0052016GManager();

    /**
     * Get the VF0052016GManager singleton.
     *
     * @return VF0052016GManager 
     */
    synchronized public static VF0052016GManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own VF0052016GManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(VF0052016GManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new VF0052016GBean instance.
     *
     * @return the new VF0052016GBean 
     */
    public VF0052016GBean createVF0052016GBean()
    {
        return new VF0052016GBean();
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from v_f_005_2016_g.
     *
     * @return an array of VF0052016GManager pObject
     */
    //38
    public VF0052016GBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM v_f_005_2016_g",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of VF0052016GBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting VF0052016GBean table 
     */
    //49
    public VF0052016GBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of VF0052016GBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting VF0052016GBean table 
     */
    //51
    public VF0052016GBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from v_f_005_2016_g " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from v_f_005_2016_g ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (VF0052016GBean[])v.toArray(new VF0052016GBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from v_f_005_2016_g table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the v_f_005_2016_g table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM v_f_005_2016_g " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the VF0052016GBean pObject into the database.
     *
     * @param pObject the VF0052016GBean pObject to be saved
     */
    //100
    public VF0052016GBean save(VF0052016GBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into v_f_005_2016_g (");
    
                if (pObject.isSampleitemreseachidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampleitemreseachid");
                    _dirtyCount++;
                }

                if (pObject.isInstitutionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("institutionid");
                    _dirtyCount++;
                }

                if (pObject.isLabnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labname");
                    _dirtyCount++;
                }

                if (pObject.isSampletypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampletype");
                    _dirtyCount++;
                }

                if (pObject.isOutdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("outdate");
                    _dirtyCount++;
                }

                if (pObject.isNumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("num");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isSampleamountModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampleamount");
                    _dirtyCount++;
                }

                if (pObject.isStampModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("stamp");
                    _dirtyCount++;
                }

                if (pObject.isTestnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("testname");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isLabnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLabname());
                }
    
                if (pObject.isSampletypeModified()) {
                    ps.setString(++_dirtyCount, pObject.getSampletype());
                }
    
                if (pObject.isOutdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getOutdate());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setString(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isSampleamountModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleamount());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                if (pObject.isTestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getTestname());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE v_f_005_2016_g SET ");
                boolean useComma=false;

                if (pObject.isSampleitemreseachidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampleitemreseachid").append("=?");
                }

                if (pObject.isInstitutionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("institutionid").append("=?");
                }

                if (pObject.isLabnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labname").append("=?");
                }

                if (pObject.isSampletypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampletype").append("=?");
                }

                if (pObject.isOutdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("outdate").append("=?");
                }

                if (pObject.isNumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("num").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isSampleamountModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampleamount").append("=?");
                }

                if (pObject.isStampModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("stamp").append("=?");
                }

                if (pObject.isTestnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("testname").append("=?");
                }
                _sql.append("");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isSampleitemreseachidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }

                if (pObject.isInstitutionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }

                if (pObject.isLabnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getLabname());
                }

                if (pObject.isSampletypeModified()) {
                      ps.setString(++_dirtyCount, pObject.getSampletype());
                }

                if (pObject.isOutdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getOutdate());
                }

                if (pObject.isNumModified()) {
                      ps.setString(++_dirtyCount, pObject.getNum());
                }

                if (pObject.isRegdateModified()) {
                      ps.setString(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isSampleamountModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSampleamount());
                }

                if (pObject.isStampModified()) {
                      ps.setString(++_dirtyCount, pObject.getStamp());
                }

                if (pObject.isTestnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getTestname());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of VF0052016GBean pObjects into the database.
     *
     * @param pObjects the VF0052016GBean pObject table to be saved
     * @return the saved VF0052016GBean array.
     */
    //65
    public VF0052016GBean[] save(VF0052016GBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique VF0052016GBean pObject from a template one giving a c
     *
     * @param pObject the VF0052016GBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public VF0052016GBean loadUniqueUsingTemplate(VF0052016GBean pObject) throws SQLException
    {
         VF0052016GBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of VF0052016GBean from a template one.
     *
     * @param pObject the VF0052016GBean template to look for
     * @return all the VF0052016GBean matching the template
     */
    //88
    public VF0052016GBean[] loadUsingTemplate(VF0052016GBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from v_f_005_2016_g WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isSampleitemreseachidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
             }
    
             if (pObject.isInstitutionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
             }
    
             if (pObject.isLabnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labname= ?");
             }
    
             if (pObject.isSampletypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletype= ?");
             }
    
             if (pObject.isOutdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("outdate= ?");
             }
    
             if (pObject.isNumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isSampleamountModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleamount= ?");
             }
    
             if (pObject.isStampModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
             }
    
             if (pObject.isTestnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testname= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isSampleitemreseachidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
             }
    
             if (pObject.isInstitutionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
             }
    
             if (pObject.isLabnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getLabname());
             }
    
             if (pObject.isSampletypeModified()) {
                 ps.setString(++_dirtyCount, pObject.getSampletype());
             }
    
             if (pObject.isOutdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getOutdate());
             }
    
             if (pObject.isNumModified()) {
                 ps.setString(++_dirtyCount, pObject.getNum());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setString(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isSampleamountModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSampleamount());
             }
    
             if (pObject.isStampModified()) {
                 ps.setString(++_dirtyCount, pObject.getStamp());
             }
    
             if (pObject.isTestnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getTestname());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a VF0052016GBean template.
     *
     * @param pObject the VF0052016GBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(VF0052016GBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM v_f_005_2016_g WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isSampleitemreseachidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampleitemreseachid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInstitutionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("institutionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLabnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampletypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampletype").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOutdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("outdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("num").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampleamountInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampleamount").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStampInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("stamp").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTestnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("testname").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isSampleitemreseachidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
            }
    
            if (pObject.isInstitutionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
            }
    
            if (pObject.isLabnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLabname());
            }
    
            if (pObject.isSampletypeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSampletype());
            }
    
            if (pObject.isOutdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getOutdate());
            }
    
            if (pObject.isNumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNum());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setString(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isSampleamountInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSampleamount());
            }
    
            if (pObject.isStampInitialized()) {
                ps.setString(++_dirtyCount, pObject.getStamp());
            }
    
            if (pObject.isTestnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getTestname());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table v_f_005_2016_g.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table v_f_005_2016_g with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from v_f_005_2016_g " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table v_f_005_2016_g with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific VF0052016GBean pObject given a c
     *
     * @param pObject the VF0052016GBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(VF0052016GBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from v_f_005_2016_g WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isSampleitemreseachidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
                }
    
                if (pObject.isInstitutionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
                }
    
                if (pObject.isLabnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labname= ?");
                }
    
                if (pObject.isSampletypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletype= ?");
                }
    
                if (pObject.isOutdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("outdate= ?");
                }
    
                if (pObject.isNumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isSampleamountModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleamount= ?");
                }
    
                if (pObject.isStampModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
                }
    
                if (pObject.isTestnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testname= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isLabnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLabname());
                }
    
                if (pObject.isSampletypeModified()) {
                    ps.setString(++_dirtyCount, pObject.getSampletype());
                }
    
                if (pObject.isOutdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getOutdate());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setString(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isSampleamountModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleamount());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                if (pObject.isTestnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getTestname());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the v_f_005_2016_g on a VF0052016GBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting VF0052016GBean pObject
     */
    //72
    public VF0052016GBean decodeRow(ResultSet rs) throws SQLException
    {
        VF0052016GBean pObject = createVF0052016GBean();
        pObject.setSampleitemreseachid(Manager.getLong(rs, 1));
        pObject.setInstitutionid(Manager.getInteger(rs, 2));
        pObject.setLabname(rs.getString(3));
        pObject.setSampletype(rs.getString(4));
        pObject.setOutdate(rs.getTimestamp(5));
        pObject.setNum(rs.getString(6));
        pObject.setRegdate(rs.getString(7));
        pObject.setSampleamount(Manager.getLong(rs, 8));
        pObject.setStamp(rs.getString(9));
        pObject.setTestname(rs.getString(10));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the v_f_005_2016_g table on a VF0052016GBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting VF0052016GBean pObject
     */
    //73
    public VF0052016GBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        VF0052016GBean pObject = createVF0052016GBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_SAMPLEITEMRESEACHID:
                    ++pos;
                    pObject.setSampleitemreseachid(Manager.getLong(rs, pos));
                    break;
                case ID_INSTITUTIONID:
                    ++pos;
                    pObject.setInstitutionid(Manager.getInteger(rs, pos));
                    break;
                case ID_LABNAME:
                    ++pos;
                    pObject.setLabname(rs.getString(pos));
                    break;
                case ID_SAMPLETYPE:
                    ++pos;
                    pObject.setSampletype(rs.getString(pos));
                    break;
                case ID_OUTDATE:
                    ++pos;
                    pObject.setOutdate(rs.getTimestamp(pos));
                    break;
                case ID_NUM:
                    ++pos;
                    pObject.setNum(rs.getString(pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getString(pos));
                    break;
                case ID_SAMPLEAMOUNT:
                    ++pos;
                    pObject.setSampleamount(Manager.getLong(rs, pos));
                    break;
                case ID_STAMP:
                    ++pos;
                    pObject.setStamp(rs.getString(pos));
                    break;
                case ID_TESTNAME:
                    ++pos;
                    pObject.setTestname(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of VF0052016GBean 
     */
    //41
    public VF0052016GBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of VF0052016GBean 
     */
    public VF0052016GBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (VF0052016GBean[])v.toArray(new VF0052016GBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private VF0052016GListener listener = null;

    /**
     * Registers a unique VF0052016GListener listener.
     */
    //66.5
    public void registerListener(VF0052016GListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the VF0052016GBean pObject.
     *
     * @param pObject the VF0052016GBean pObject to be saved
     */
    //67
    void beforeInsert(VF0052016GBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the VF0052016GBean pObject.
     *
     * @param pObject the VF0052016GBean pObject to be saved
     */
    //68
    void afterInsert(VF0052016GBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the VF0052016GBean pObject.
     *
     * @param pObject the VF0052016GBean pObject to be updated
     */
    //69
    void beforeUpdate(VF0052016GBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the VF0052016GBean pObject.
     *
     * @param pObject the VF0052016GBean pObject to be updated
     */
    //70
    void afterUpdate(VF0052016GBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
