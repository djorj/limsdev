// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the ContractsampleitemBean objects.
 */
public class ContractsampleitemComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ContractsampleitemComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractsampleitemComparator(ContractsampleitemManager.CONTRACTSAMPLEITEMID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractsampleitemManager.ID_CONTRACTSAMPLEITEMID
     *   <li>ContractsampleitemManager.ID_CONTRACTSAMPLETYPEID
     *   <li>ContractsampleitemManager.ID_BARCODE
     *   <li>ContractsampleitemManager.ID_NUM1
     *   <li>ContractsampleitemManager.ID_NUM2
     *   <li>ContractsampleitemManager.ID_REGBYID
     *   <li>ContractsampleitemManager.ID_REGDATE
     *   <li>ContractsampleitemManager.ID_STATUS
     *   <li>ContractsampleitemManager.ID_PARENTID
     *   <li>ContractsampleitemManager.ID_INFO
     *   <li>ContractsampleitemManager.ID_DERIVATETYPEID
     *   <li>ContractsampleitemManager.ID_SPECIESID
     *   <li>ContractsampleitemManager.ID_INSTITUTIONID
     * </ul>
     */
    public ContractsampleitemComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ContractsampleitemComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractsampleitemComparator(ContractsampleitemManager.CONTRACTSAMPLEITEMID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractsampleitemManager.ID_CONTRACTSAMPLEITEMID
     *   <li>ContractsampleitemManager.ID_CONTRACTSAMPLETYPEID
     *   <li>ContractsampleitemManager.ID_BARCODE
     *   <li>ContractsampleitemManager.ID_NUM1
     *   <li>ContractsampleitemManager.ID_NUM2
     *   <li>ContractsampleitemManager.ID_REGBYID
     *   <li>ContractsampleitemManager.ID_REGDATE
     *   <li>ContractsampleitemManager.ID_DISCLAIM
     *   <li>ContractsampleitemManager.ID_STATUS
     *   <li>ContractsampleitemManager.ID_PARENTID
     *   <li>ContractsampleitemManager.ID_DELETED
     *   <li>ContractsampleitemManager.ID_INFO
     *   <li>ContractsampleitemManager.ID_DERIVATETYPEID
     *   <li>ContractsampleitemManager.ID_SPECIESID
     *   <li>ContractsampleitemManager.ID_SRC
     *   <li>ContractsampleitemManager.ID_INSTITUTIONID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ContractsampleitemComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ContractsampleitemBean b1 = (ContractsampleitemBean)pObj1;
        ContractsampleitemBean b2 = (ContractsampleitemBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ContractsampleitemManager.ID_CONTRACTSAMPLEITEMID:
                if (b1.getContractsampleitemid() == null && b2.getContractsampleitemid() != null) {
                    iReturn = -1;
                } else if (b1.getContractsampleitemid() == null && b2.getContractsampleitemid() == null) {
                    iReturn = 0;
                } else if (b1.getContractsampleitemid() != null && b2.getContractsampleitemid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractsampleitemid().compareTo(b2.getContractsampleitemid());
                }
                break;
            case ContractsampleitemManager.ID_CONTRACTSAMPLETYPEID:
                if (b1.getContractsampletypeid() == null && b2.getContractsampletypeid() != null) {
                    iReturn = -1;
                } else if (b1.getContractsampletypeid() == null && b2.getContractsampletypeid() == null) {
                    iReturn = 0;
                } else if (b1.getContractsampletypeid() != null && b2.getContractsampletypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractsampletypeid().compareTo(b2.getContractsampletypeid());
                }
                break;
            case ContractsampleitemManager.ID_BARCODE:
                if (b1.getBarcode() == null && b2.getBarcode() != null) {
                    iReturn = -1;
                } else if (b1.getBarcode() == null && b2.getBarcode() == null) {
                    iReturn = 0;
                } else if (b1.getBarcode() != null && b2.getBarcode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getBarcode().compareTo(b2.getBarcode());
                }
                break;
            case ContractsampleitemManager.ID_NUM1:
                if (b1.getNum1() == null && b2.getNum1() != null) {
                    iReturn = -1;
                } else if (b1.getNum1() == null && b2.getNum1() == null) {
                    iReturn = 0;
                } else if (b1.getNum1() != null && b2.getNum1() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getNum1().compareTo(b2.getNum1());
                }
                break;
            case ContractsampleitemManager.ID_NUM2:
                if (b1.getNum2() == null && b2.getNum2() != null) {
                    iReturn = -1;
                } else if (b1.getNum2() == null && b2.getNum2() == null) {
                    iReturn = 0;
                } else if (b1.getNum2() != null && b2.getNum2() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getNum2().compareTo(b2.getNum2());
                }
                break;
            case ContractsampleitemManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case ContractsampleitemManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case ContractsampleitemManager.ID_STATUS:
                if (b1.getStatus() == null && b2.getStatus() != null) {
                    iReturn = -1;
                } else if (b1.getStatus() == null && b2.getStatus() == null) {
                    iReturn = 0;
                } else if (b1.getStatus() != null && b2.getStatus() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getStatus().compareTo(b2.getStatus());
                }
                break;
            case ContractsampleitemManager.ID_PARENTID:
                if (b1.getParentid() == null && b2.getParentid() != null) {
                    iReturn = -1;
                } else if (b1.getParentid() == null && b2.getParentid() == null) {
                    iReturn = 0;
                } else if (b1.getParentid() != null && b2.getParentid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getParentid().compareTo(b2.getParentid());
                }
                break;
            case ContractsampleitemManager.ID_INFO:
                if (b1.getInfo() == null && b2.getInfo() != null) {
                    iReturn = -1;
                } else if (b1.getInfo() == null && b2.getInfo() == null) {
                    iReturn = 0;
                } else if (b1.getInfo() != null && b2.getInfo() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInfo().compareTo(b2.getInfo());
                }
                break;
            case ContractsampleitemManager.ID_DERIVATETYPEID:
                if (b1.getDerivatetypeid() == null && b2.getDerivatetypeid() != null) {
                    iReturn = -1;
                } else if (b1.getDerivatetypeid() == null && b2.getDerivatetypeid() == null) {
                    iReturn = 0;
                } else if (b1.getDerivatetypeid() != null && b2.getDerivatetypeid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getDerivatetypeid().compareTo(b2.getDerivatetypeid());
                }
                break;
            case ContractsampleitemManager.ID_SPECIESID:
                if (b1.getSpeciesid() == null && b2.getSpeciesid() != null) {
                    iReturn = -1;
                } else if (b1.getSpeciesid() == null && b2.getSpeciesid() == null) {
                    iReturn = 0;
                } else if (b1.getSpeciesid() != null && b2.getSpeciesid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSpeciesid().compareTo(b2.getSpeciesid());
                }
                break;
            case ContractsampleitemManager.ID_INSTITUTIONID:
                if (b1.getInstitutionid() == null && b2.getInstitutionid() != null) {
                    iReturn = -1;
                } else if (b1.getInstitutionid() == null && b2.getInstitutionid() == null) {
                    iReturn = 0;
                } else if (b1.getInstitutionid() != null && b2.getInstitutionid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInstitutionid().compareTo(b2.getInstitutionid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
