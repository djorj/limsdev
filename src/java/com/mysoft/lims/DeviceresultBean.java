// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class DeviceresultBean
// extends+ 

// extends- 
{
    private Long deviceresultid;
    private boolean deviceresultid_is_modified = false;
    private boolean deviceresultid_is_initialized = false;
    
    private Integer deviceid;
    private boolean deviceid_is_modified = false;
    private boolean deviceid_is_initialized = false;
    
    private java.sql.Timestamp resultdate;
    private boolean resultdate_is_modified = false;
    private boolean resultdate_is_initialized = false;
    
    private String result;
    private boolean result_is_modified = false;
    private boolean result_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Long sampleitemreseachid;
    private boolean sampleitemreseachid_is_modified = false;
    private boolean sampleitemreseachid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    DeviceresultBean()
    {
    }
    
    /**
     * Getter method for deviceresultid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: deviceresult.deviceresultid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of deviceresultid
     */
    public Long getDeviceresultid()
    {
        return deviceresultid; 
    }

    /**
     * Setter method for deviceresultid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceresultid
     */
    public void setDeviceresultid(Long newVal) {
        if ((newVal != null && this.deviceresultid != null && (newVal.compareTo(this.deviceresultid) == 0)) || 
            (newVal == null && this.deviceresultid == null && deviceresultid_is_initialized)) {
            return; 
        } 
        this.deviceresultid = newVal; 
        deviceresultid_is_modified = true; 
        deviceresultid_is_initialized = true; 
    }

    /**
     * Setter method for deviceresultid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deviceresultid
     */
    public void setDeviceresultid(long newVal) {
        setDeviceresultid(new Long(newVal));
    }

    /**
     * Determines if the deviceresultid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeviceresultidModified() {
        return deviceresultid_is_modified; 
    }

    /**
     * Determines if the deviceresultid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeviceresultidInitialized() {
        return deviceresultid_is_initialized; 
    }

    /**
     * Getter method for deviceid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: deviceresult.deviceid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of deviceid
     */
    public Integer getDeviceid()
    {
        return deviceid; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(Integer newVal) {
        if ((newVal != null && this.deviceid != null && (newVal.compareTo(this.deviceid) == 0)) || 
            (newVal == null && this.deviceid == null && deviceid_is_initialized)) {
            return; 
        } 
        this.deviceid = newVal; 
        deviceid_is_modified = true; 
        deviceid_is_initialized = true; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(int newVal) {
        setDeviceid(new Integer(newVal));
    }

    /**
     * Determines if the deviceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeviceidModified() {
        return deviceid_is_modified; 
    }

    /**
     * Determines if the deviceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeviceidInitialized() {
        return deviceid_is_initialized; 
    }

    /**
     * Getter method for resultdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: deviceresult.resultdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of resultdate
     */
    public java.sql.Timestamp getResultdate()
    {
        return resultdate; 
    }

    /**
     * Setter method for resultdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultdate
     */
    public void setResultdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.resultdate != null && (newVal.compareTo(this.resultdate) == 0)) || 
            (newVal == null && this.resultdate == null && resultdate_is_initialized)) {
            return; 
        } 
        this.resultdate = newVal; 
        resultdate_is_modified = true; 
        resultdate_is_initialized = true; 
    }

    /**
     * Setter method for resultdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to resultdate
     */
    public void setResultdate(long newVal) {
        setResultdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the resultdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultdateModified() {
        return resultdate_is_modified; 
    }

    /**
     * Determines if the resultdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultdateInitialized() {
        return resultdate_is_initialized; 
    }

    /**
     * Getter method for result.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: deviceresult.result
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of result
     */
    public String getResult()
    {
        return result; 
    }

    /**
     * Setter method for result.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to result
     */
    public void setResult(String newVal) {
        if ((newVal != null && this.result != null && (newVal.compareTo(this.result) == 0)) || 
            (newVal == null && this.result == null && result_is_initialized)) {
            return; 
        } 
        this.result = newVal; 
        result_is_modified = true; 
        result_is_initialized = true; 
    }

    /**
     * Determines if the result has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultModified() {
        return result_is_modified; 
    }

    /**
     * Determines if the result has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultInitialized() {
        return result_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: deviceresult.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: deviceresult.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for sampleitemreseachid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: deviceresult.sampleitemreseachid
     * <li> foreign key: sampleitemreseach.sampleitemreseachid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleitemreseachid
     */
    public Long getSampleitemreseachid()
    {
        return sampleitemreseachid; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(Long newVal) {
        if ((newVal != null && this.sampleitemreseachid != null && (newVal.compareTo(this.sampleitemreseachid) == 0)) || 
            (newVal == null && this.sampleitemreseachid == null && sampleitemreseachid_is_initialized)) {
            return; 
        } 
        this.sampleitemreseachid = newVal; 
        sampleitemreseachid_is_modified = true; 
        sampleitemreseachid_is_initialized = true; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(long newVal) {
        setSampleitemreseachid(new Long(newVal));
    }

    /**
     * Determines if the sampleitemreseachid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleitemreseachidModified() {
        return sampleitemreseachid_is_modified; 
    }

    /**
     * Determines if the sampleitemreseachid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleitemreseachidInitialized() {
        return sampleitemreseachid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return deviceresultid_is_modified || 
		deviceid_is_modified || 
		resultdate_is_modified || 
		result_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		sampleitemreseachid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        deviceresultid_is_modified = false;
        deviceid_is_modified = false;
        resultdate_is_modified = false;
        result_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        sampleitemreseachid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(DeviceresultBean bean) {
        setDeviceresultid(bean.getDeviceresultid());
        setDeviceid(bean.getDeviceid());
        setResultdate(bean.getResultdate());
        setResult(bean.getResult());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setSampleitemreseachid(bean.getSampleitemreseachid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[deviceresult] "
                 + "\n - deviceresult.deviceresultid = " + (deviceresultid_is_initialized ? ("[" + (deviceresultid == null ? null : deviceresultid.toString()) + "]") : "not initialized") + ""
                 + "\n - deviceresult.deviceid = " + (deviceid_is_initialized ? ("[" + (deviceid == null ? null : deviceid.toString()) + "]") : "not initialized") + ""
                 + "\n - deviceresult.resultdate = " + (resultdate_is_initialized ? ("[" + (resultdate == null ? null : resultdate.toString()) + "]") : "not initialized") + ""
                 + "\n - deviceresult.result = " + (result_is_initialized ? ("[" + (result == null ? null : result.toString()) + "]") : "not initialized") + ""
                 + "\n - deviceresult.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - deviceresult.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - deviceresult.sampleitemreseachid = " + (sampleitemreseachid_is_initialized ? ("[" + (sampleitemreseachid == null ? null : sampleitemreseachid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
