// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class VAnswersBean
// extends+ 

// extends- 
{
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private Long appealid;
    private boolean appealid_is_modified = false;
    private boolean appealid_is_initialized = false;
    
    private Long actid;
    private boolean actid_is_modified = false;
    private boolean actid_is_initialized = false;
    
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private String samplename;
    private boolean samplename_is_modified = false;
    private boolean samplename_is_initialized = false;
    
    private Long barcode;
    private boolean barcode_is_modified = false;
    private boolean barcode_is_initialized = false;
    
    private Long sampleitemreseachid;
    private boolean sampleitemreseachid_is_modified = false;
    private boolean sampleitemreseachid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private java.sql.Timestamp resultdate;
    private boolean resultdate_is_modified = false;
    private boolean resultdate_is_initialized = false;
    
    private java.sql.Timestamp plandate;
    private boolean plandate_is_modified = false;
    private boolean plandate_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private Long confirmation1id;
    private boolean confirmation1id_is_modified = false;
    private boolean confirmation1id_is_initialized = false;
    
    private Long confirmation2id;
    private boolean confirmation2id_is_modified = false;
    private boolean confirmation2id_is_initialized = false;
    
    private Long confirmation3id;
    private boolean confirmation3id_is_modified = false;
    private boolean confirmation3id_is_initialized = false;
    
    private Long contractsampleitemid;
    private boolean contractsampleitemid_is_modified = false;
    private boolean contractsampleitemid_is_initialized = false;
    
    private String labtestname;
    private boolean labtestname_is_modified = false;
    private boolean labtestname_is_initialized = false;
    
    private String sname;
    private boolean sname_is_modified = false;
    private boolean sname_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VAnswersBean()
    {
    }
    
    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.num
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for appealid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.appealid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of appealid
     */
    public Long getAppealid()
    {
        return appealid; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(Long newVal) {
        if ((newVal != null && this.appealid != null && (newVal.compareTo(this.appealid) == 0)) || 
            (newVal == null && this.appealid == null && appealid_is_initialized)) {
            return; 
        } 
        this.appealid = newVal; 
        appealid_is_modified = true; 
        appealid_is_initialized = true; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(long newVal) {
        setAppealid(new Long(newVal));
    }

    /**
     * Determines if the appealid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAppealidModified() {
        return appealid_is_modified; 
    }

    /**
     * Determines if the appealid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAppealidInitialized() {
        return appealid_is_initialized; 
    }

    /**
     * Getter method for actid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.actid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of actid
     */
    public Long getActid()
    {
        return actid; 
    }

    /**
     * Setter method for actid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(Long newVal) {
        if ((newVal != null && this.actid != null && (newVal.compareTo(this.actid) == 0)) || 
            (newVal == null && this.actid == null && actid_is_initialized)) {
            return; 
        } 
        this.actid = newVal; 
        actid_is_modified = true; 
        actid_is_initialized = true; 
    }

    /**
     * Setter method for actid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(long newVal) {
        setActid(new Long(newVal));
    }

    /**
     * Determines if the actid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActidModified() {
        return actid_is_modified; 
    }

    /**
     * Determines if the actid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActidInitialized() {
        return actid_is_initialized; 
    }

    /**
     * Getter method for contractid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Getter method for samplename.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.samplename
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of samplename
     */
    public String getSamplename()
    {
        return samplename; 
    }

    /**
     * Setter method for samplename.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to samplename
     */
    public void setSamplename(String newVal) {
        if ((newVal != null && this.samplename != null && (newVal.compareTo(this.samplename) == 0)) || 
            (newVal == null && this.samplename == null && samplename_is_initialized)) {
            return; 
        } 
        this.samplename = newVal; 
        samplename_is_modified = true; 
        samplename_is_initialized = true; 
    }

    /**
     * Determines if the samplename has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSamplenameModified() {
        return samplename_is_modified; 
    }

    /**
     * Determines if the samplename has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSamplenameInitialized() {
        return samplename_is_initialized; 
    }

    /**
     * Getter method for barcode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.barcode
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of barcode
     */
    public Long getBarcode()
    {
        return barcode; 
    }

    /**
     * Setter method for barcode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to barcode
     */
    public void setBarcode(Long newVal) {
        if ((newVal != null && this.barcode != null && (newVal.compareTo(this.barcode) == 0)) || 
            (newVal == null && this.barcode == null && barcode_is_initialized)) {
            return; 
        } 
        this.barcode = newVal; 
        barcode_is_modified = true; 
        barcode_is_initialized = true; 
    }

    /**
     * Setter method for barcode.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to barcode
     */
    public void setBarcode(long newVal) {
        setBarcode(new Long(newVal));
    }

    /**
     * Determines if the barcode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBarcodeModified() {
        return barcode_is_modified; 
    }

    /**
     * Determines if the barcode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBarcodeInitialized() {
        return barcode_is_initialized; 
    }

    /**
     * Getter method for sampleitemreseachid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.sampleitemreseachid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleitemreseachid
     */
    public Long getSampleitemreseachid()
    {
        return sampleitemreseachid; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(Long newVal) {
        if ((newVal != null && this.sampleitemreseachid != null && (newVal.compareTo(this.sampleitemreseachid) == 0)) || 
            (newVal == null && this.sampleitemreseachid == null && sampleitemreseachid_is_initialized)) {
            return; 
        } 
        this.sampleitemreseachid = newVal; 
        sampleitemreseachid_is_modified = true; 
        sampleitemreseachid_is_initialized = true; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(long newVal) {
        setSampleitemreseachid(new Long(newVal));
    }

    /**
     * Determines if the sampleitemreseachid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleitemreseachidModified() {
        return sampleitemreseachid_is_modified; 
    }

    /**
     * Determines if the sampleitemreseachid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleitemreseachidInitialized() {
        return sampleitemreseachid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.regdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for resultdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.resultdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of resultdate
     */
    public java.sql.Timestamp getResultdate()
    {
        return resultdate; 
    }

    /**
     * Setter method for resultdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultdate
     */
    public void setResultdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.resultdate != null && (newVal.compareTo(this.resultdate) == 0)) || 
            (newVal == null && this.resultdate == null && resultdate_is_initialized)) {
            return; 
        } 
        this.resultdate = newVal; 
        resultdate_is_modified = true; 
        resultdate_is_initialized = true; 
    }

    /**
     * Setter method for resultdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to resultdate
     */
    public void setResultdate(long newVal) {
        setResultdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the resultdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultdateModified() {
        return resultdate_is_modified; 
    }

    /**
     * Determines if the resultdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultdateInitialized() {
        return resultdate_is_initialized; 
    }

    /**
     * Getter method for plandate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.plandate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of plandate
     */
    public java.sql.Timestamp getPlandate()
    {
        return plandate; 
    }

    /**
     * Setter method for plandate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to plandate
     */
    public void setPlandate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.plandate != null && (newVal.compareTo(this.plandate) == 0)) || 
            (newVal == null && this.plandate == null && plandate_is_initialized)) {
            return; 
        } 
        this.plandate = newVal; 
        plandate_is_modified = true; 
        plandate_is_initialized = true; 
    }

    /**
     * Setter method for plandate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to plandate
     */
    public void setPlandate(long newVal) {
        setPlandate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the plandate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlandateModified() {
        return plandate_is_modified; 
    }

    /**
     * Determines if the plandate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlandateInitialized() {
        return plandate_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.note
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for confirmation1id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.confirmation1id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation1id
     */
    public Long getConfirmation1id()
    {
        return confirmation1id; 
    }

    /**
     * Setter method for confirmation1id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation1id
     */
    public void setConfirmation1id(Long newVal) {
        if ((newVal != null && this.confirmation1id != null && (newVal.compareTo(this.confirmation1id) == 0)) || 
            (newVal == null && this.confirmation1id == null && confirmation1id_is_initialized)) {
            return; 
        } 
        this.confirmation1id = newVal; 
        confirmation1id_is_modified = true; 
        confirmation1id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation1id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation1id
     */
    public void setConfirmation1id(long newVal) {
        setConfirmation1id(new Long(newVal));
    }

    /**
     * Determines if the confirmation1id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation1idModified() {
        return confirmation1id_is_modified; 
    }

    /**
     * Determines if the confirmation1id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation1idInitialized() {
        return confirmation1id_is_initialized; 
    }

    /**
     * Getter method for confirmation2id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.confirmation2id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation2id
     */
    public Long getConfirmation2id()
    {
        return confirmation2id; 
    }

    /**
     * Setter method for confirmation2id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation2id
     */
    public void setConfirmation2id(Long newVal) {
        if ((newVal != null && this.confirmation2id != null && (newVal.compareTo(this.confirmation2id) == 0)) || 
            (newVal == null && this.confirmation2id == null && confirmation2id_is_initialized)) {
            return; 
        } 
        this.confirmation2id = newVal; 
        confirmation2id_is_modified = true; 
        confirmation2id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation2id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation2id
     */
    public void setConfirmation2id(long newVal) {
        setConfirmation2id(new Long(newVal));
    }

    /**
     * Determines if the confirmation2id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation2idModified() {
        return confirmation2id_is_modified; 
    }

    /**
     * Determines if the confirmation2id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation2idInitialized() {
        return confirmation2id_is_initialized; 
    }

    /**
     * Getter method for confirmation3id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.confirmation3id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation3id
     */
    public Long getConfirmation3id()
    {
        return confirmation3id; 
    }

    /**
     * Setter method for confirmation3id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation3id
     */
    public void setConfirmation3id(Long newVal) {
        if ((newVal != null && this.confirmation3id != null && (newVal.compareTo(this.confirmation3id) == 0)) || 
            (newVal == null && this.confirmation3id == null && confirmation3id_is_initialized)) {
            return; 
        } 
        this.confirmation3id = newVal; 
        confirmation3id_is_modified = true; 
        confirmation3id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation3id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation3id
     */
    public void setConfirmation3id(long newVal) {
        setConfirmation3id(new Long(newVal));
    }

    /**
     * Determines if the confirmation3id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation3idModified() {
        return confirmation3id_is_modified; 
    }

    /**
     * Determines if the confirmation3id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation3idInitialized() {
        return confirmation3id_is_initialized; 
    }

    /**
     * Getter method for contractsampleitemid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleitemid
     */
    public Long getContractsampleitemid()
    {
        return contractsampleitemid; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(Long newVal) {
        if ((newVal != null && this.contractsampleitemid != null && (newVal.compareTo(this.contractsampleitemid) == 0)) || 
            (newVal == null && this.contractsampleitemid == null && contractsampleitemid_is_initialized)) {
            return; 
        } 
        this.contractsampleitemid = newVal; 
        contractsampleitemid_is_modified = true; 
        contractsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(long newVal) {
        setContractsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleitemidModified() {
        return contractsampleitemid_is_modified; 
    }

    /**
     * Determines if the contractsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleitemidInitialized() {
        return contractsampleitemid_is_initialized; 
    }

    /**
     * Getter method for labtestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.labtestname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of labtestname
     */
    public String getLabtestname()
    {
        return labtestname; 
    }

    /**
     * Setter method for labtestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestname
     */
    public void setLabtestname(String newVal) {
        if ((newVal != null && this.labtestname != null && (newVal.compareTo(this.labtestname) == 0)) || 
            (newVal == null && this.labtestname == null && labtestname_is_initialized)) {
            return; 
        } 
        this.labtestname = newVal; 
        labtestname_is_modified = true; 
        labtestname_is_initialized = true; 
    }

    /**
     * Determines if the labtestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestnameModified() {
        return labtestname_is_modified; 
    }

    /**
     * Determines if the labtestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestnameInitialized() {
        return labtestname_is_initialized; 
    }

    /**
     * Getter method for sname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.sname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sname
     */
    public String getSname()
    {
        return sname; 
    }

    /**
     * Setter method for sname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sname
     */
    public void setSname(String newVal) {
        if ((newVal != null && this.sname != null && (newVal.compareTo(this.sname) == 0)) || 
            (newVal == null && this.sname == null && sname_is_initialized)) {
            return; 
        } 
        this.sname = newVal; 
        sname_is_modified = true; 
        sname_is_initialized = true; 
    }

    /**
     * Determines if the sname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSnameModified() {
        return sname_is_modified; 
    }

    /**
     * Determines if the sname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSnameInitialized() {
        return sname_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_answers.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return num_is_modified || 
		appealid_is_modified || 
		actid_is_modified || 
		contractid_is_modified || 
		sampletypeid_is_modified || 
		samplename_is_modified || 
		barcode_is_modified || 
		sampleitemreseachid_is_modified || 
		regdate_is_modified || 
		resultdate_is_modified || 
		plandate_is_modified || 
		note_is_modified || 
		confirmation1id_is_modified || 
		confirmation2id_is_modified || 
		confirmation3id_is_modified || 
		contractsampleitemid_is_modified || 
		labtestname_is_modified || 
		sname_is_modified || 
		institutionid_is_modified || 
		labtestid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        num_is_modified = false;
        appealid_is_modified = false;
        actid_is_modified = false;
        contractid_is_modified = false;
        sampletypeid_is_modified = false;
        samplename_is_modified = false;
        barcode_is_modified = false;
        sampleitemreseachid_is_modified = false;
        regdate_is_modified = false;
        resultdate_is_modified = false;
        plandate_is_modified = false;
        note_is_modified = false;
        confirmation1id_is_modified = false;
        confirmation2id_is_modified = false;
        confirmation3id_is_modified = false;
        contractsampleitemid_is_modified = false;
        labtestname_is_modified = false;
        sname_is_modified = false;
        institutionid_is_modified = false;
        labtestid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VAnswersBean bean) {
        setNum(bean.getNum());
        setAppealid(bean.getAppealid());
        setActid(bean.getActid());
        setContractid(bean.getContractid());
        setSampletypeid(bean.getSampletypeid());
        setSamplename(bean.getSamplename());
        setBarcode(bean.getBarcode());
        setSampleitemreseachid(bean.getSampleitemreseachid());
        setRegdate(bean.getRegdate());
        setResultdate(bean.getResultdate());
        setPlandate(bean.getPlandate());
        setNote(bean.getNote());
        setConfirmation1id(bean.getConfirmation1id());
        setConfirmation2id(bean.getConfirmation2id());
        setConfirmation3id(bean.getConfirmation3id());
        setContractsampleitemid(bean.getContractsampleitemid());
        setLabtestname(bean.getLabtestname());
        setSname(bean.getSname());
        setInstitutionid(bean.getInstitutionid());
        setLabtestid(bean.getLabtestid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_answers] "
                 + "\n - v_answers.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.appealid = " + (appealid_is_initialized ? ("[" + (appealid == null ? null : appealid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.actid = " + (actid_is_initialized ? ("[" + (actid == null ? null : actid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.samplename = " + (samplename_is_initialized ? ("[" + (samplename == null ? null : samplename.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.barcode = " + (barcode_is_initialized ? ("[" + (barcode == null ? null : barcode.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.sampleitemreseachid = " + (sampleitemreseachid_is_initialized ? ("[" + (sampleitemreseachid == null ? null : sampleitemreseachid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.resultdate = " + (resultdate_is_initialized ? ("[" + (resultdate == null ? null : resultdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.plandate = " + (plandate_is_initialized ? ("[" + (plandate == null ? null : plandate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.confirmation1id = " + (confirmation1id_is_initialized ? ("[" + (confirmation1id == null ? null : confirmation1id.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.confirmation2id = " + (confirmation2id_is_initialized ? ("[" + (confirmation2id == null ? null : confirmation2id.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.confirmation3id = " + (confirmation3id_is_initialized ? ("[" + (confirmation3id == null ? null : confirmation3id.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.contractsampleitemid = " + (contractsampleitemid_is_initialized ? ("[" + (contractsampleitemid == null ? null : contractsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.labtestname = " + (labtestname_is_initialized ? ("[" + (labtestname == null ? null : labtestname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.sname = " + (sname_is_initialized ? ("[" + (sname == null ? null : sname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_answers.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
