// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the InstitutionBean objects.
 */
public class InstitutionComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for InstitutionComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new InstitutionComparator(InstitutionManager.INSTITUTIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>InstitutionManager.ID_INSTITUTIONID
     *   <li>InstitutionManager.ID_NAME
     *   <li>InstitutionManager.ID_ADDRESS
     *   <li>InstitutionManager.ID_CODE
     *   <li>InstitutionManager.ID_HEADERLOGO
     *   <li>InstitutionManager.ID_ISO
     *   <li>InstitutionManager.ID_FULLNAME
     *   <li>InstitutionManager.ID_PHONE
     *   <li>InstitutionManager.ID_URL
     *   <li>InstitutionManager.ID_PARENTID
     *   <li>InstitutionManager.ID_COMPANYID
     * </ul>
     */
    public InstitutionComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for InstitutionComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new InstitutionComparator(InstitutionManager.INSTITUTIONID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>InstitutionManager.ID_INSTITUTIONID
     *   <li>InstitutionManager.ID_NAME
     *   <li>InstitutionManager.ID_ADDRESS
     *   <li>InstitutionManager.ID_CODE
     *   <li>InstitutionManager.ID_PROVIDER
     *   <li>InstitutionManager.ID_HEADERLOGO
     *   <li>InstitutionManager.ID_ISO
     *   <li>InstitutionManager.ID_FULLNAME
     *   <li>InstitutionManager.ID_PHONE
     *   <li>InstitutionManager.ID_URL
     *   <li>InstitutionManager.ID_PARENTID
     *   <li>InstitutionManager.ID_COMPANYID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public InstitutionComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        InstitutionBean b1 = (InstitutionBean)pObj1;
        InstitutionBean b2 = (InstitutionBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case InstitutionManager.ID_INSTITUTIONID:
                if (b1.getInstitutionid() == null && b2.getInstitutionid() != null) {
                    iReturn = -1;
                } else if (b1.getInstitutionid() == null && b2.getInstitutionid() == null) {
                    iReturn = 0;
                } else if (b1.getInstitutionid() != null && b2.getInstitutionid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInstitutionid().compareTo(b2.getInstitutionid());
                }
                break;
            case InstitutionManager.ID_NAME:
                if (b1.getName() == null && b2.getName() != null) {
                    iReturn = -1;
                } else if (b1.getName() == null && b2.getName() == null) {
                    iReturn = 0;
                } else if (b1.getName() != null && b2.getName() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getName().compareTo(b2.getName());
                }
                break;
            case InstitutionManager.ID_ADDRESS:
                if (b1.getAddress() == null && b2.getAddress() != null) {
                    iReturn = -1;
                } else if (b1.getAddress() == null && b2.getAddress() == null) {
                    iReturn = 0;
                } else if (b1.getAddress() != null && b2.getAddress() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAddress().compareTo(b2.getAddress());
                }
                break;
            case InstitutionManager.ID_CODE:
                if (b1.getCode() == null && b2.getCode() != null) {
                    iReturn = -1;
                } else if (b1.getCode() == null && b2.getCode() == null) {
                    iReturn = 0;
                } else if (b1.getCode() != null && b2.getCode() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCode().compareTo(b2.getCode());
                }
                break;
            case InstitutionManager.ID_HEADERLOGO:
                if (b1.getHeaderlogo() == null && b2.getHeaderlogo() != null) {
                    iReturn = -1;
                } else if (b1.getHeaderlogo() == null && b2.getHeaderlogo() == null) {
                    iReturn = 0;
                } else if (b1.getHeaderlogo() != null && b2.getHeaderlogo() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getHeaderlogo().compareTo(b2.getHeaderlogo());
                }
                break;
            case InstitutionManager.ID_ISO:
                if (b1.getIso() == null && b2.getIso() != null) {
                    iReturn = -1;
                } else if (b1.getIso() == null && b2.getIso() == null) {
                    iReturn = 0;
                } else if (b1.getIso() != null && b2.getIso() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getIso().compareTo(b2.getIso());
                }
                break;
            case InstitutionManager.ID_FULLNAME:
                if (b1.getFullname() == null && b2.getFullname() != null) {
                    iReturn = -1;
                } else if (b1.getFullname() == null && b2.getFullname() == null) {
                    iReturn = 0;
                } else if (b1.getFullname() != null && b2.getFullname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getFullname().compareTo(b2.getFullname());
                }
                break;
            case InstitutionManager.ID_PHONE:
                if (b1.getPhone() == null && b2.getPhone() != null) {
                    iReturn = -1;
                } else if (b1.getPhone() == null && b2.getPhone() == null) {
                    iReturn = 0;
                } else if (b1.getPhone() != null && b2.getPhone() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPhone().compareTo(b2.getPhone());
                }
                break;
            case InstitutionManager.ID_URL:
                if (b1.getUrl() == null && b2.getUrl() != null) {
                    iReturn = -1;
                } else if (b1.getUrl() == null && b2.getUrl() == null) {
                    iReturn = 0;
                } else if (b1.getUrl() != null && b2.getUrl() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getUrl().compareTo(b2.getUrl());
                }
                break;
            case InstitutionManager.ID_PARENTID:
                if (b1.getParentid() == null && b2.getParentid() != null) {
                    iReturn = -1;
                } else if (b1.getParentid() == null && b2.getParentid() == null) {
                    iReturn = 0;
                } else if (b1.getParentid() != null && b2.getParentid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getParentid().compareTo(b2.getParentid());
                }
                break;
            case InstitutionManager.ID_COMPANYID:
                if (b1.getCompanyid() == null && b2.getCompanyid() != null) {
                    iReturn = -1;
                } else if (b1.getCompanyid() == null && b2.getCompanyid() == null) {
                    iReturn = 0;
                } else if (b1.getCompanyid() != null && b2.getCompanyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getCompanyid().compareTo(b2.getCompanyid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
