// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ContractsampleitemBean
// extends+ 

// extends- 
{
    private Long contractsampleitemid;
    private boolean contractsampleitemid_is_modified = false;
    private boolean contractsampleitemid_is_initialized = false;
    
    private Long contractsampletypeid;
    private boolean contractsampletypeid_is_modified = false;
    private boolean contractsampletypeid_is_initialized = false;
    
    private String barcode;
    private boolean barcode_is_modified = false;
    private boolean barcode_is_initialized = false;
    
    private String num1;
    private boolean num1_is_modified = false;
    private boolean num1_is_initialized = false;
    
    private String num2;
    private boolean num2_is_modified = false;
    private boolean num2_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean disclaim;
    private boolean disclaim_is_modified = false;
    private boolean disclaim_is_initialized = false;
    
    private Integer status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private Long parentid;
    private boolean parentid_is_modified = false;
    private boolean parentid_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private String info;
    private boolean info_is_modified = false;
    private boolean info_is_initialized = false;
    
    private Integer derivatetypeid;
    private boolean derivatetypeid_is_modified = false;
    private boolean derivatetypeid_is_initialized = false;
    
    private Integer speciesid;
    private boolean speciesid_is_modified = false;
    private boolean speciesid_is_initialized = false;
    
    private Boolean src;
    private boolean src_is_modified = false;
    private boolean src_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ContractsampleitemBean()
    {
    }
    
    /**
     * Getter method for contractsampleitemid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleitemid
     */
    public Long getContractsampleitemid()
    {
        return contractsampleitemid; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(Long newVal) {
        if ((newVal != null && this.contractsampleitemid != null && (newVal.compareTo(this.contractsampleitemid) == 0)) || 
            (newVal == null && this.contractsampleitemid == null && contractsampleitemid_is_initialized)) {
            return; 
        } 
        this.contractsampleitemid = newVal; 
        contractsampleitemid_is_modified = true; 
        contractsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(long newVal) {
        setContractsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleitemidModified() {
        return contractsampleitemid_is_modified; 
    }

    /**
     * Determines if the contractsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleitemidInitialized() {
        return contractsampleitemid_is_initialized; 
    }

    /**
     * Getter method for contractsampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.contractsampletypeid
     * <li> foreign key: contractsampletype.contractsampletypeid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampletypeid
     */
    public Long getContractsampletypeid()
    {
        return contractsampletypeid; 
    }

    /**
     * Setter method for contractsampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampletypeid
     */
    public void setContractsampletypeid(Long newVal) {
        if ((newVal != null && this.contractsampletypeid != null && (newVal.compareTo(this.contractsampletypeid) == 0)) || 
            (newVal == null && this.contractsampletypeid == null && contractsampletypeid_is_initialized)) {
            return; 
        } 
        this.contractsampletypeid = newVal; 
        contractsampletypeid_is_modified = true; 
        contractsampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampletypeid
     */
    public void setContractsampletypeid(long newVal) {
        setContractsampletypeid(new Long(newVal));
    }

    /**
     * Determines if the contractsampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampletypeidModified() {
        return contractsampletypeid_is_modified; 
    }

    /**
     * Determines if the contractsampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampletypeidInitialized() {
        return contractsampletypeid_is_initialized; 
    }

    /**
     * Getter method for barcode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.barcode
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of barcode
     */
    public String getBarcode()
    {
        return barcode; 
    }

    /**
     * Setter method for barcode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to barcode
     */
    public void setBarcode(String newVal) {
        if ((newVal != null && this.barcode != null && (newVal.compareTo(this.barcode) == 0)) || 
            (newVal == null && this.barcode == null && barcode_is_initialized)) {
            return; 
        } 
        this.barcode = newVal; 
        barcode_is_modified = true; 
        barcode_is_initialized = true; 
    }

    /**
     * Determines if the barcode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBarcodeModified() {
        return barcode_is_modified; 
    }

    /**
     * Determines if the barcode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBarcodeInitialized() {
        return barcode_is_initialized; 
    }

    /**
     * Getter method for num1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.num1
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num1
     */
    public String getNum1()
    {
        return num1; 
    }

    /**
     * Setter method for num1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num1
     */
    public void setNum1(String newVal) {
        if ((newVal != null && this.num1 != null && (newVal.compareTo(this.num1) == 0)) || 
            (newVal == null && this.num1 == null && num1_is_initialized)) {
            return; 
        } 
        this.num1 = newVal; 
        num1_is_modified = true; 
        num1_is_initialized = true; 
    }

    /**
     * Determines if the num1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNum1Modified() {
        return num1_is_modified; 
    }

    /**
     * Determines if the num1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNum1Initialized() {
        return num1_is_initialized; 
    }

    /**
     * Getter method for num2.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.num2
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num2
     */
    public String getNum2()
    {
        return num2; 
    }

    /**
     * Setter method for num2.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num2
     */
    public void setNum2(String newVal) {
        if ((newVal != null && this.num2 != null && (newVal.compareTo(this.num2) == 0)) || 
            (newVal == null && this.num2 == null && num2_is_initialized)) {
            return; 
        } 
        this.num2 = newVal; 
        num2_is_modified = true; 
        num2_is_initialized = true; 
    }

    /**
     * Determines if the num2 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNum2Modified() {
        return num2_is_modified; 
    }

    /**
     * Determines if the num2 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNum2Initialized() {
        return num2_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for disclaim.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.disclaim
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of disclaim
     */
    public Boolean getDisclaim()
    {
        return disclaim; 
    }

    /**
     * Setter method for disclaim.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to disclaim
     */
    public void setDisclaim(Boolean newVal) {
        if ((newVal != null && this.disclaim != null && newVal.equals(this.disclaim)) || 
            (newVal == null && this.disclaim == null && disclaim_is_initialized)) {
            return; 
        } 
        this.disclaim = newVal; 
        disclaim_is_modified = true; 
        disclaim_is_initialized = true; 
    }

    /**
     * Setter method for disclaim.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to disclaim
     */
    public void setDisclaim(boolean newVal) {
        setDisclaim(new Boolean(newVal));
    }

    /**
     * Determines if the disclaim has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDisclaimModified() {
        return disclaim_is_modified; 
    }

    /**
     * Determines if the disclaim has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDisclaimInitialized() {
        return disclaim_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.status
     * <li>default value: 1
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of status
     */
    public Integer getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Integer newVal) {
        if ((newVal != null && this.status != null && (newVal.compareTo(this.status) == 0)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal) {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Getter method for parentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.parentid
     * <li> foreign key: contractsampleitem.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parentid
     */
    public Long getParentid()
    {
        return parentid; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(Long newVal) {
        if ((newVal != null && this.parentid != null && (newVal.compareTo(this.parentid) == 0)) || 
            (newVal == null && this.parentid == null && parentid_is_initialized)) {
            return; 
        } 
        this.parentid = newVal; 
        parentid_is_modified = true; 
        parentid_is_initialized = true; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(long newVal) {
        setParentid(new Long(newVal));
    }

    /**
     * Determines if the parentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParentidModified() {
        return parentid_is_modified; 
    }

    /**
     * Determines if the parentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParentidInitialized() {
        return parentid_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for info.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.info
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of info
     */
    public String getInfo()
    {
        return info; 
    }

    /**
     * Setter method for info.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to info
     */
    public void setInfo(String newVal) {
        if ((newVal != null && this.info != null && (newVal.compareTo(this.info) == 0)) || 
            (newVal == null && this.info == null && info_is_initialized)) {
            return; 
        } 
        this.info = newVal; 
        info_is_modified = true; 
        info_is_initialized = true; 
    }

    /**
     * Determines if the info has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInfoModified() {
        return info_is_modified; 
    }

    /**
     * Determines if the info has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInfoInitialized() {
        return info_is_initialized; 
    }

    /**
     * Getter method for derivatetypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.derivatetypeid
     * <li> foreign key: derivatetype.derivatetypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of derivatetypeid
     */
    public Integer getDerivatetypeid()
    {
        return derivatetypeid; 
    }

    /**
     * Setter method for derivatetypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to derivatetypeid
     */
    public void setDerivatetypeid(Integer newVal) {
        if ((newVal != null && this.derivatetypeid != null && (newVal.compareTo(this.derivatetypeid) == 0)) || 
            (newVal == null && this.derivatetypeid == null && derivatetypeid_is_initialized)) {
            return; 
        } 
        this.derivatetypeid = newVal; 
        derivatetypeid_is_modified = true; 
        derivatetypeid_is_initialized = true; 
    }

    /**
     * Setter method for derivatetypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to derivatetypeid
     */
    public void setDerivatetypeid(int newVal) {
        setDerivatetypeid(new Integer(newVal));
    }

    /**
     * Determines if the derivatetypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDerivatetypeidModified() {
        return derivatetypeid_is_modified; 
    }

    /**
     * Determines if the derivatetypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDerivatetypeidInitialized() {
        return derivatetypeid_is_initialized; 
    }

    /**
     * Getter method for speciesid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.speciesid
     * <li> foreign key: species.speciesid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of speciesid
     */
    public Integer getSpeciesid()
    {
        return speciesid; 
    }

    /**
     * Setter method for speciesid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to speciesid
     */
    public void setSpeciesid(Integer newVal) {
        if ((newVal != null && this.speciesid != null && (newVal.compareTo(this.speciesid) == 0)) || 
            (newVal == null && this.speciesid == null && speciesid_is_initialized)) {
            return; 
        } 
        this.speciesid = newVal; 
        speciesid_is_modified = true; 
        speciesid_is_initialized = true; 
    }

    /**
     * Setter method for speciesid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to speciesid
     */
    public void setSpeciesid(int newVal) {
        setSpeciesid(new Integer(newVal));
    }

    /**
     * Determines if the speciesid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSpeciesidModified() {
        return speciesid_is_modified; 
    }

    /**
     * Determines if the speciesid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSpeciesidInitialized() {
        return speciesid_is_initialized; 
    }

    /**
     * Getter method for src.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.src
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of src
     */
    public Boolean getSrc()
    {
        return src; 
    }

    /**
     * Setter method for src.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to src
     */
    public void setSrc(Boolean newVal) {
        if ((newVal != null && this.src != null && newVal.equals(this.src)) || 
            (newVal == null && this.src == null && src_is_initialized)) {
            return; 
        } 
        this.src = newVal; 
        src_is_modified = true; 
        src_is_initialized = true; 
    }

    /**
     * Setter method for src.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to src
     */
    public void setSrc(boolean newVal) {
        setSrc(new Boolean(newVal));
    }

    /**
     * Determines if the src has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSrcModified() {
        return src_is_modified; 
    }

    /**
     * Determines if the src has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSrcInitialized() {
        return src_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampleitem.institutionid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return contractsampleitemid_is_modified || 
		contractsampletypeid_is_modified || 
		barcode_is_modified || 
		num1_is_modified || 
		num2_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		disclaim_is_modified || 
		status_is_modified || 
		parentid_is_modified || 
		deleted_is_modified || 
		info_is_modified || 
		derivatetypeid_is_modified || 
		speciesid_is_modified || 
		src_is_modified || 
		institutionid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        contractsampleitemid_is_modified = false;
        contractsampletypeid_is_modified = false;
        barcode_is_modified = false;
        num1_is_modified = false;
        num2_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        disclaim_is_modified = false;
        status_is_modified = false;
        parentid_is_modified = false;
        deleted_is_modified = false;
        info_is_modified = false;
        derivatetypeid_is_modified = false;
        speciesid_is_modified = false;
        src_is_modified = false;
        institutionid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContractsampleitemBean bean) {
        setContractsampleitemid(bean.getContractsampleitemid());
        setContractsampletypeid(bean.getContractsampletypeid());
        setBarcode(bean.getBarcode());
        setNum1(bean.getNum1());
        setNum2(bean.getNum2());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDisclaim(bean.getDisclaim());
        setStatus(bean.getStatus());
        setParentid(bean.getParentid());
        setDeleted(bean.getDeleted());
        setInfo(bean.getInfo());
        setDerivatetypeid(bean.getDerivatetypeid());
        setSpeciesid(bean.getSpeciesid());
        setSrc(bean.getSrc());
        setInstitutionid(bean.getInstitutionid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[contractsampleitem] "
                 + "\n - contractsampleitem.contractsampleitemid = " + (contractsampleitemid_is_initialized ? ("[" + (contractsampleitemid == null ? null : contractsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.contractsampletypeid = " + (contractsampletypeid_is_initialized ? ("[" + (contractsampletypeid == null ? null : contractsampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.barcode = " + (barcode_is_initialized ? ("[" + (barcode == null ? null : barcode.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.num1 = " + (num1_is_initialized ? ("[" + (num1 == null ? null : num1.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.num2 = " + (num2_is_initialized ? ("[" + (num2 == null ? null : num2.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.disclaim = " + (disclaim_is_initialized ? ("[" + (disclaim == null ? null : disclaim.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.parentid = " + (parentid_is_initialized ? ("[" + (parentid == null ? null : parentid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.info = " + (info_is_initialized ? ("[" + (info == null ? null : info.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.derivatetypeid = " + (derivatetypeid_is_initialized ? ("[" + (derivatetypeid == null ? null : derivatetypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.speciesid = " + (speciesid_is_initialized ? ("[" + (speciesid == null ? null : speciesid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.src = " + (src_is_initialized ? ("[" + (src == null ? null : src.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampleitem.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
