// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class VInventoryBean
// extends+ 

// extends- 
{
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private Integer productgroupid;
    private boolean productgroupid_is_modified = false;
    private boolean productgroupid_is_initialized = false;
    
    private Long productid;
    private boolean productid_is_modified = false;
    private boolean productid_is_initialized = false;
    
    private String accountname;
    private boolean accountname_is_modified = false;
    private boolean accountname_is_initialized = false;
    
    private String code;
    private boolean code_is_modified = false;
    private boolean code_is_initialized = false;
    
    private Integer compnum;
    private boolean compnum_is_modified = false;
    private boolean compnum_is_initialized = false;
    
    private String invnumber;
    private boolean invnumber_is_modified = false;
    private boolean invnumber_is_initialized = false;
    
    private String productname;
    private boolean productname_is_modified = false;
    private boolean productname_is_initialized = false;
    
    private String unitname;
    private boolean unitname_is_modified = false;
    private boolean unitname_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private Double realamount;
    private boolean realamount_is_modified = false;
    private boolean realamount_is_initialized = false;
    
    private Double realprice;
    private boolean realprice_is_modified = false;
    private boolean realprice_is_initialized = false;
    
    private Double amount;
    private boolean amount_is_modified = false;
    private boolean amount_is_initialized = false;
    
    private Double accprice;
    private boolean accprice_is_modified = false;
    private boolean accprice_is_initialized = false;
    
    private Double lessamount;
    private boolean lessamount_is_modified = false;
    private boolean lessamount_is_initialized = false;
    
    private Double lessprice;
    private boolean lessprice_is_modified = false;
    private boolean lessprice_is_initialized = false;
    
    private Double moreamount;
    private boolean moreamount_is_modified = false;
    private boolean moreamount_is_initialized = false;
    
    private Double moreprice;
    private boolean moreprice_is_modified = false;
    private boolean moreprice_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private Integer inventoryid;
    private boolean inventoryid_is_modified = false;
    private boolean inventoryid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VInventoryBean()
    {
    }
    
    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for productgroupid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.productgroupid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of productgroupid
     */
    public Integer getProductgroupid()
    {
        return productgroupid; 
    }

    /**
     * Setter method for productgroupid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productgroupid
     */
    public void setProductgroupid(Integer newVal) {
        if ((newVal != null && this.productgroupid != null && (newVal.compareTo(this.productgroupid) == 0)) || 
            (newVal == null && this.productgroupid == null && productgroupid_is_initialized)) {
            return; 
        } 
        this.productgroupid = newVal; 
        productgroupid_is_modified = true; 
        productgroupid_is_initialized = true; 
    }

    /**
     * Setter method for productgroupid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to productgroupid
     */
    public void setProductgroupid(int newVal) {
        setProductgroupid(new Integer(newVal));
    }

    /**
     * Determines if the productgroupid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductgroupidModified() {
        return productgroupid_is_modified; 
    }

    /**
     * Determines if the productgroupid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductgroupidInitialized() {
        return productgroupid_is_initialized; 
    }

    /**
     * Getter method for productid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.productid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of productid
     */
    public Long getProductid()
    {
        return productid; 
    }

    /**
     * Setter method for productid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(Long newVal) {
        if ((newVal != null && this.productid != null && (newVal.compareTo(this.productid) == 0)) || 
            (newVal == null && this.productid == null && productid_is_initialized)) {
            return; 
        } 
        this.productid = newVal; 
        productid_is_modified = true; 
        productid_is_initialized = true; 
    }

    /**
     * Setter method for productid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(long newVal) {
        setProductid(new Long(newVal));
    }

    /**
     * Determines if the productid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductidModified() {
        return productid_is_modified; 
    }

    /**
     * Determines if the productid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductidInitialized() {
        return productid_is_initialized; 
    }

    /**
     * Getter method for accountname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.accountname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of accountname
     */
    public String getAccountname()
    {
        return accountname; 
    }

    /**
     * Setter method for accountname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to accountname
     */
    public void setAccountname(String newVal) {
        if ((newVal != null && this.accountname != null && (newVal.compareTo(this.accountname) == 0)) || 
            (newVal == null && this.accountname == null && accountname_is_initialized)) {
            return; 
        } 
        this.accountname = newVal; 
        accountname_is_modified = true; 
        accountname_is_initialized = true; 
    }

    /**
     * Determines if the accountname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAccountnameModified() {
        return accountname_is_modified; 
    }

    /**
     * Determines if the accountname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAccountnameInitialized() {
        return accountname_is_initialized; 
    }

    /**
     * Getter method for code.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.code
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of code
     */
    public String getCode()
    {
        return code; 
    }

    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    public void setCode(String newVal) {
        if ((newVal != null && this.code != null && (newVal.compareTo(this.code) == 0)) || 
            (newVal == null && this.code == null && code_is_initialized)) {
            return; 
        } 
        this.code = newVal; 
        code_is_modified = true; 
        code_is_initialized = true; 
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified() {
        return code_is_modified; 
    }

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized() {
        return code_is_initialized; 
    }

    /**
     * Getter method for compnum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.compnum
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of compnum
     */
    public Integer getCompnum()
    {
        return compnum; 
    }

    /**
     * Setter method for compnum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to compnum
     */
    public void setCompnum(Integer newVal) {
        if ((newVal != null && this.compnum != null && (newVal.compareTo(this.compnum) == 0)) || 
            (newVal == null && this.compnum == null && compnum_is_initialized)) {
            return; 
        } 
        this.compnum = newVal; 
        compnum_is_modified = true; 
        compnum_is_initialized = true; 
    }

    /**
     * Setter method for compnum.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to compnum
     */
    public void setCompnum(int newVal) {
        setCompnum(new Integer(newVal));
    }

    /**
     * Determines if the compnum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompnumModified() {
        return compnum_is_modified; 
    }

    /**
     * Determines if the compnum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompnumInitialized() {
        return compnum_is_initialized; 
    }

    /**
     * Getter method for invnumber.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.invnumber
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of invnumber
     */
    public String getInvnumber()
    {
        return invnumber; 
    }

    /**
     * Setter method for invnumber.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invnumber
     */
    public void setInvnumber(String newVal) {
        if ((newVal != null && this.invnumber != null && (newVal.compareTo(this.invnumber) == 0)) || 
            (newVal == null && this.invnumber == null && invnumber_is_initialized)) {
            return; 
        } 
        this.invnumber = newVal; 
        invnumber_is_modified = true; 
        invnumber_is_initialized = true; 
    }

    /**
     * Determines if the invnumber has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvnumberModified() {
        return invnumber_is_modified; 
    }

    /**
     * Determines if the invnumber has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvnumberInitialized() {
        return invnumber_is_initialized; 
    }

    /**
     * Getter method for productname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.productname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of productname
     */
    public String getProductname()
    {
        return productname; 
    }

    /**
     * Setter method for productname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productname
     */
    public void setProductname(String newVal) {
        if ((newVal != null && this.productname != null && (newVal.compareTo(this.productname) == 0)) || 
            (newVal == null && this.productname == null && productname_is_initialized)) {
            return; 
        } 
        this.productname = newVal; 
        productname_is_modified = true; 
        productname_is_initialized = true; 
    }

    /**
     * Determines if the productname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductnameModified() {
        return productname_is_modified; 
    }

    /**
     * Determines if the productname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductnameInitialized() {
        return productname_is_initialized; 
    }

    /**
     * Getter method for unitname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.unitname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of unitname
     */
    public String getUnitname()
    {
        return unitname; 
    }

    /**
     * Setter method for unitname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to unitname
     */
    public void setUnitname(String newVal) {
        if ((newVal != null && this.unitname != null && (newVal.compareTo(this.unitname) == 0)) || 
            (newVal == null && this.unitname == null && unitname_is_initialized)) {
            return; 
        } 
        this.unitname = newVal; 
        unitname_is_modified = true; 
        unitname_is_initialized = true; 
    }

    /**
     * Determines if the unitname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isUnitnameModified() {
        return unitname_is_modified; 
    }

    /**
     * Determines if the unitname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isUnitnameInitialized() {
        return unitname_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for realamount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.realamount
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of realamount
     */
    public Double getRealamount()
    {
        return realamount; 
    }

    /**
     * Setter method for realamount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to realamount
     */
    public void setRealamount(Double newVal) {
        if ((newVal != null && this.realamount != null && (newVal.compareTo(this.realamount) == 0)) || 
            (newVal == null && this.realamount == null && realamount_is_initialized)) {
            return; 
        } 
        this.realamount = newVal; 
        realamount_is_modified = true; 
        realamount_is_initialized = true; 
    }

    /**
     * Setter method for realamount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to realamount
     */
    public void setRealamount(double newVal) {
        setRealamount(new Double(newVal));
    }

    /**
     * Determines if the realamount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRealamountModified() {
        return realamount_is_modified; 
    }

    /**
     * Determines if the realamount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRealamountInitialized() {
        return realamount_is_initialized; 
    }

    /**
     * Getter method for realprice.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.realprice
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of realprice
     */
    public Double getRealprice()
    {
        return realprice; 
    }

    /**
     * Setter method for realprice.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to realprice
     */
    public void setRealprice(Double newVal) {
        if ((newVal != null && this.realprice != null && (newVal.compareTo(this.realprice) == 0)) || 
            (newVal == null && this.realprice == null && realprice_is_initialized)) {
            return; 
        } 
        this.realprice = newVal; 
        realprice_is_modified = true; 
        realprice_is_initialized = true; 
    }

    /**
     * Setter method for realprice.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to realprice
     */
    public void setRealprice(double newVal) {
        setRealprice(new Double(newVal));
    }

    /**
     * Determines if the realprice has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRealpriceModified() {
        return realprice_is_modified; 
    }

    /**
     * Determines if the realprice has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRealpriceInitialized() {
        return realprice_is_initialized; 
    }

    /**
     * Getter method for amount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.amount
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of amount
     */
    public Double getAmount()
    {
        return amount; 
    }

    /**
     * Setter method for amount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(Double newVal) {
        if ((newVal != null && this.amount != null && (newVal.compareTo(this.amount) == 0)) || 
            (newVal == null && this.amount == null && amount_is_initialized)) {
            return; 
        } 
        this.amount = newVal; 
        amount_is_modified = true; 
        amount_is_initialized = true; 
    }

    /**
     * Setter method for amount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(double newVal) {
        setAmount(new Double(newVal));
    }

    /**
     * Determines if the amount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAmountModified() {
        return amount_is_modified; 
    }

    /**
     * Determines if the amount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAmountInitialized() {
        return amount_is_initialized; 
    }

    /**
     * Getter method for accprice.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.accprice
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of accprice
     */
    public Double getAccprice()
    {
        return accprice; 
    }

    /**
     * Setter method for accprice.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to accprice
     */
    public void setAccprice(Double newVal) {
        if ((newVal != null && this.accprice != null && (newVal.compareTo(this.accprice) == 0)) || 
            (newVal == null && this.accprice == null && accprice_is_initialized)) {
            return; 
        } 
        this.accprice = newVal; 
        accprice_is_modified = true; 
        accprice_is_initialized = true; 
    }

    /**
     * Setter method for accprice.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to accprice
     */
    public void setAccprice(double newVal) {
        setAccprice(new Double(newVal));
    }

    /**
     * Determines if the accprice has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAccpriceModified() {
        return accprice_is_modified; 
    }

    /**
     * Determines if the accprice has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAccpriceInitialized() {
        return accprice_is_initialized; 
    }

    /**
     * Getter method for lessamount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.lessamount
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of lessamount
     */
    public Double getLessamount()
    {
        return lessamount; 
    }

    /**
     * Setter method for lessamount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lessamount
     */
    public void setLessamount(Double newVal) {
        if ((newVal != null && this.lessamount != null && (newVal.compareTo(this.lessamount) == 0)) || 
            (newVal == null && this.lessamount == null && lessamount_is_initialized)) {
            return; 
        } 
        this.lessamount = newVal; 
        lessamount_is_modified = true; 
        lessamount_is_initialized = true; 
    }

    /**
     * Setter method for lessamount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lessamount
     */
    public void setLessamount(double newVal) {
        setLessamount(new Double(newVal));
    }

    /**
     * Determines if the lessamount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLessamountModified() {
        return lessamount_is_modified; 
    }

    /**
     * Determines if the lessamount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLessamountInitialized() {
        return lessamount_is_initialized; 
    }

    /**
     * Getter method for lessprice.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.lessprice
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of lessprice
     */
    public Double getLessprice()
    {
        return lessprice; 
    }

    /**
     * Setter method for lessprice.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to lessprice
     */
    public void setLessprice(Double newVal) {
        if ((newVal != null && this.lessprice != null && (newVal.compareTo(this.lessprice) == 0)) || 
            (newVal == null && this.lessprice == null && lessprice_is_initialized)) {
            return; 
        } 
        this.lessprice = newVal; 
        lessprice_is_modified = true; 
        lessprice_is_initialized = true; 
    }

    /**
     * Setter method for lessprice.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to lessprice
     */
    public void setLessprice(double newVal) {
        setLessprice(new Double(newVal));
    }

    /**
     * Determines if the lessprice has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLesspriceModified() {
        return lessprice_is_modified; 
    }

    /**
     * Determines if the lessprice has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLesspriceInitialized() {
        return lessprice_is_initialized; 
    }

    /**
     * Getter method for moreamount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.moreamount
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of moreamount
     */
    public Double getMoreamount()
    {
        return moreamount; 
    }

    /**
     * Setter method for moreamount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to moreamount
     */
    public void setMoreamount(Double newVal) {
        if ((newVal != null && this.moreamount != null && (newVal.compareTo(this.moreamount) == 0)) || 
            (newVal == null && this.moreamount == null && moreamount_is_initialized)) {
            return; 
        } 
        this.moreamount = newVal; 
        moreamount_is_modified = true; 
        moreamount_is_initialized = true; 
    }

    /**
     * Setter method for moreamount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to moreamount
     */
    public void setMoreamount(double newVal) {
        setMoreamount(new Double(newVal));
    }

    /**
     * Determines if the moreamount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMoreamountModified() {
        return moreamount_is_modified; 
    }

    /**
     * Determines if the moreamount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMoreamountInitialized() {
        return moreamount_is_initialized; 
    }

    /**
     * Getter method for moreprice.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.moreprice
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of moreprice
     */
    public Double getMoreprice()
    {
        return moreprice; 
    }

    /**
     * Setter method for moreprice.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to moreprice
     */
    public void setMoreprice(Double newVal) {
        if ((newVal != null && this.moreprice != null && (newVal.compareTo(this.moreprice) == 0)) || 
            (newVal == null && this.moreprice == null && moreprice_is_initialized)) {
            return; 
        } 
        this.moreprice = newVal; 
        moreprice_is_modified = true; 
        moreprice_is_initialized = true; 
    }

    /**
     * Setter method for moreprice.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to moreprice
     */
    public void setMoreprice(double newVal) {
        setMoreprice(new Double(newVal));
    }

    /**
     * Determines if the moreprice has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMorepriceModified() {
        return moreprice_is_modified; 
    }

    /**
     * Determines if the moreprice has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMorepriceInitialized() {
        return moreprice_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.note
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for inventoryid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_inventory.inventoryid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of inventoryid
     */
    public Integer getInventoryid()
    {
        return inventoryid; 
    }

    /**
     * Setter method for inventoryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to inventoryid
     */
    public void setInventoryid(Integer newVal) {
        if ((newVal != null && this.inventoryid != null && (newVal.compareTo(this.inventoryid) == 0)) || 
            (newVal == null && this.inventoryid == null && inventoryid_is_initialized)) {
            return; 
        } 
        this.inventoryid = newVal; 
        inventoryid_is_modified = true; 
        inventoryid_is_initialized = true; 
    }

    /**
     * Setter method for inventoryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to inventoryid
     */
    public void setInventoryid(int newVal) {
        setInventoryid(new Integer(newVal));
    }

    /**
     * Determines if the inventoryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInventoryidModified() {
        return inventoryid_is_modified; 
    }

    /**
     * Determines if the inventoryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInventoryidInitialized() {
        return inventoryid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return institutionid_is_modified || 
		productgroupid_is_modified || 
		productid_is_modified || 
		accountname_is_modified || 
		code_is_modified || 
		compnum_is_modified || 
		invnumber_is_modified || 
		productname_is_modified || 
		unitname_is_modified || 
		price_is_modified || 
		realamount_is_modified || 
		realprice_is_modified || 
		amount_is_modified || 
		accprice_is_modified || 
		lessamount_is_modified || 
		lessprice_is_modified || 
		moreamount_is_modified || 
		moreprice_is_modified || 
		note_is_modified || 
		inventoryid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        institutionid_is_modified = false;
        productgroupid_is_modified = false;
        productid_is_modified = false;
        accountname_is_modified = false;
        code_is_modified = false;
        compnum_is_modified = false;
        invnumber_is_modified = false;
        productname_is_modified = false;
        unitname_is_modified = false;
        price_is_modified = false;
        realamount_is_modified = false;
        realprice_is_modified = false;
        amount_is_modified = false;
        accprice_is_modified = false;
        lessamount_is_modified = false;
        lessprice_is_modified = false;
        moreamount_is_modified = false;
        moreprice_is_modified = false;
        note_is_modified = false;
        inventoryid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VInventoryBean bean) {
        setInstitutionid(bean.getInstitutionid());
        setProductgroupid(bean.getProductgroupid());
        setProductid(bean.getProductid());
        setAccountname(bean.getAccountname());
        setCode(bean.getCode());
        setCompnum(bean.getCompnum());
        setInvnumber(bean.getInvnumber());
        setProductname(bean.getProductname());
        setUnitname(bean.getUnitname());
        setPrice(bean.getPrice());
        setRealamount(bean.getRealamount());
        setRealprice(bean.getRealprice());
        setAmount(bean.getAmount());
        setAccprice(bean.getAccprice());
        setLessamount(bean.getLessamount());
        setLessprice(bean.getLessprice());
        setMoreamount(bean.getMoreamount());
        setMoreprice(bean.getMoreprice());
        setNote(bean.getNote());
        setInventoryid(bean.getInventoryid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_inventory] "
                 + "\n - v_inventory.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.productgroupid = " + (productgroupid_is_initialized ? ("[" + (productgroupid == null ? null : productgroupid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.productid = " + (productid_is_initialized ? ("[" + (productid == null ? null : productid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.accountname = " + (accountname_is_initialized ? ("[" + (accountname == null ? null : accountname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.code = " + (code_is_initialized ? ("[" + (code == null ? null : code.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.compnum = " + (compnum_is_initialized ? ("[" + (compnum == null ? null : compnum.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.invnumber = " + (invnumber_is_initialized ? ("[" + (invnumber == null ? null : invnumber.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.productname = " + (productname_is_initialized ? ("[" + (productname == null ? null : productname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.unitname = " + (unitname_is_initialized ? ("[" + (unitname == null ? null : unitname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.realamount = " + (realamount_is_initialized ? ("[" + (realamount == null ? null : realamount.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.realprice = " + (realprice_is_initialized ? ("[" + (realprice == null ? null : realprice.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.amount = " + (amount_is_initialized ? ("[" + (amount == null ? null : amount.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.accprice = " + (accprice_is_initialized ? ("[" + (accprice == null ? null : accprice.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.lessamount = " + (lessamount_is_initialized ? ("[" + (lessamount == null ? null : lessamount.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.lessprice = " + (lessprice_is_initialized ? ("[" + (lessprice == null ? null : lessprice.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.moreamount = " + (moreamount_is_initialized ? ("[" + (moreamount == null ? null : moreamount.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.moreprice = " + (moreprice_is_initialized ? ("[" + (moreprice == null ? null : moreprice.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - v_inventory.inventoryid = " + (inventoryid_is_initialized ? ("[" + (inventoryid == null ? null : inventoryid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
