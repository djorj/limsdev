// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class VF0052016GBean
// extends+ 

// extends- 
{
    private Long sampleitemreseachid;
    private boolean sampleitemreseachid_is_modified = false;
    private boolean sampleitemreseachid_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private String labname;
    private boolean labname_is_modified = false;
    private boolean labname_is_initialized = false;
    
    private String sampletype;
    private boolean sampletype_is_modified = false;
    private boolean sampletype_is_initialized = false;
    
    private java.sql.Timestamp outdate;
    private boolean outdate_is_modified = false;
    private boolean outdate_is_initialized = false;
    
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private String regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Long sampleamount;
    private boolean sampleamount_is_modified = false;
    private boolean sampleamount_is_initialized = false;
    
    private String stamp;
    private boolean stamp_is_modified = false;
    private boolean stamp_is_initialized = false;
    
    private String testname;
    private boolean testname_is_modified = false;
    private boolean testname_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VF0052016GBean()
    {
    }
    
    /**
     * Getter method for sampleitemreseachid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.sampleitemreseachid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleitemreseachid
     */
    public Long getSampleitemreseachid()
    {
        return sampleitemreseachid; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(Long newVal) {
        if ((newVal != null && this.sampleitemreseachid != null && (newVal.compareTo(this.sampleitemreseachid) == 0)) || 
            (newVal == null && this.sampleitemreseachid == null && sampleitemreseachid_is_initialized)) {
            return; 
        } 
        this.sampleitemreseachid = newVal; 
        sampleitemreseachid_is_modified = true; 
        sampleitemreseachid_is_initialized = true; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(long newVal) {
        setSampleitemreseachid(new Long(newVal));
    }

    /**
     * Determines if the sampleitemreseachid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleitemreseachidModified() {
        return sampleitemreseachid_is_modified; 
    }

    /**
     * Determines if the sampleitemreseachid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleitemreseachidInitialized() {
        return sampleitemreseachid_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for labname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.labname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of labname
     */
    public String getLabname()
    {
        return labname; 
    }

    /**
     * Setter method for labname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labname
     */
    public void setLabname(String newVal) {
        if ((newVal != null && this.labname != null && (newVal.compareTo(this.labname) == 0)) || 
            (newVal == null && this.labname == null && labname_is_initialized)) {
            return; 
        } 
        this.labname = newVal; 
        labname_is_modified = true; 
        labname_is_initialized = true; 
    }

    /**
     * Determines if the labname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabnameModified() {
        return labname_is_modified; 
    }

    /**
     * Determines if the labname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabnameInitialized() {
        return labname_is_initialized; 
    }

    /**
     * Getter method for sampletype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.sampletype
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sampletype
     */
    public String getSampletype()
    {
        return sampletype; 
    }

    /**
     * Setter method for sampletype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletype
     */
    public void setSampletype(String newVal) {
        if ((newVal != null && this.sampletype != null && (newVal.compareTo(this.sampletype) == 0)) || 
            (newVal == null && this.sampletype == null && sampletype_is_initialized)) {
            return; 
        } 
        this.sampletype = newVal; 
        sampletype_is_modified = true; 
        sampletype_is_initialized = true; 
    }

    /**
     * Determines if the sampletype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeModified() {
        return sampletype_is_modified; 
    }

    /**
     * Determines if the sampletype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeInitialized() {
        return sampletype_is_initialized; 
    }

    /**
     * Getter method for outdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.outdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of outdate
     */
    public java.sql.Timestamp getOutdate()
    {
        return outdate; 
    }

    /**
     * Setter method for outdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to outdate
     */
    public void setOutdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.outdate != null && (newVal.compareTo(this.outdate) == 0)) || 
            (newVal == null && this.outdate == null && outdate_is_initialized)) {
            return; 
        } 
        this.outdate = newVal; 
        outdate_is_modified = true; 
        outdate_is_initialized = true; 
    }

    /**
     * Setter method for outdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to outdate
     */
    public void setOutdate(long newVal) {
        setOutdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the outdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOutdateModified() {
        return outdate_is_modified; 
    }

    /**
     * Determines if the outdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOutdateInitialized() {
        return outdate_is_initialized; 
    }

    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.num
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.regdate
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of regdate
     */
    public String getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(String newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for sampleamount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.sampleamount
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleamount
     */
    public Long getSampleamount()
    {
        return sampleamount; 
    }

    /**
     * Setter method for sampleamount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleamount
     */
    public void setSampleamount(Long newVal) {
        if ((newVal != null && this.sampleamount != null && (newVal.compareTo(this.sampleamount) == 0)) || 
            (newVal == null && this.sampleamount == null && sampleamount_is_initialized)) {
            return; 
        } 
        this.sampleamount = newVal; 
        sampleamount_is_modified = true; 
        sampleamount_is_initialized = true; 
    }

    /**
     * Setter method for sampleamount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleamount
     */
    public void setSampleamount(long newVal) {
        setSampleamount(new Long(newVal));
    }

    /**
     * Determines if the sampleamount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleamountModified() {
        return sampleamount_is_modified; 
    }

    /**
     * Determines if the sampleamount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleamountInitialized() {
        return sampleamount_is_initialized; 
    }

    /**
     * Getter method for stamp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.stamp
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of stamp
     */
    public String getStamp()
    {
        return stamp; 
    }

    /**
     * Setter method for stamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to stamp
     */
    public void setStamp(String newVal) {
        if ((newVal != null && this.stamp != null && (newVal.compareTo(this.stamp) == 0)) || 
            (newVal == null && this.stamp == null && stamp_is_initialized)) {
            return; 
        } 
        this.stamp = newVal; 
        stamp_is_modified = true; 
        stamp_is_initialized = true; 
    }

    /**
     * Determines if the stamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStampModified() {
        return stamp_is_modified; 
    }

    /**
     * Determines if the stamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStampInitialized() {
        return stamp_is_initialized; 
    }

    /**
     * Getter method for testname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_f_005_2016_g.testname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of testname
     */
    public String getTestname()
    {
        return testname; 
    }

    /**
     * Setter method for testname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to testname
     */
    public void setTestname(String newVal) {
        if ((newVal != null && this.testname != null && (newVal.compareTo(this.testname) == 0)) || 
            (newVal == null && this.testname == null && testname_is_initialized)) {
            return; 
        } 
        this.testname = newVal; 
        testname_is_modified = true; 
        testname_is_initialized = true; 
    }

    /**
     * Determines if the testname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTestnameModified() {
        return testname_is_modified; 
    }

    /**
     * Determines if the testname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTestnameInitialized() {
        return testname_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return sampleitemreseachid_is_modified || 
		institutionid_is_modified || 
		labname_is_modified || 
		sampletype_is_modified || 
		outdate_is_modified || 
		num_is_modified || 
		regdate_is_modified || 
		sampleamount_is_modified || 
		stamp_is_modified || 
		testname_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        sampleitemreseachid_is_modified = false;
        institutionid_is_modified = false;
        labname_is_modified = false;
        sampletype_is_modified = false;
        outdate_is_modified = false;
        num_is_modified = false;
        regdate_is_modified = false;
        sampleamount_is_modified = false;
        stamp_is_modified = false;
        testname_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VF0052016GBean bean) {
        setSampleitemreseachid(bean.getSampleitemreseachid());
        setInstitutionid(bean.getInstitutionid());
        setLabname(bean.getLabname());
        setSampletype(bean.getSampletype());
        setOutdate(bean.getOutdate());
        setNum(bean.getNum());
        setRegdate(bean.getRegdate());
        setSampleamount(bean.getSampleamount());
        setStamp(bean.getStamp());
        setTestname(bean.getTestname());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_f_005_2016_g] "
                 + "\n - v_f_005_2016_g.sampleitemreseachid = " + (sampleitemreseachid_is_initialized ? ("[" + (sampleitemreseachid == null ? null : sampleitemreseachid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.labname = " + (labname_is_initialized ? ("[" + (labname == null ? null : labname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.sampletype = " + (sampletype_is_initialized ? ("[" + (sampletype == null ? null : sampletype.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.outdate = " + (outdate_is_initialized ? ("[" + (outdate == null ? null : outdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.sampleamount = " + (sampleamount_is_initialized ? ("[" + (sampleamount == null ? null : sampleamount.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.stamp = " + (stamp_is_initialized ? ("[" + (stamp == null ? null : stamp.toString()) + "]") : "not initialized") + ""
                 + "\n - v_f_005_2016_g.testname = " + (testname_is_initialized ? ("[" + (testname == null ? null : testname.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
