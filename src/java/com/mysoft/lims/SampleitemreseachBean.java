// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class SampleitemreseachBean
// extends+ 

// extends- 
{
    private Long sampleitemreseachid;
    private boolean sampleitemreseachid_is_modified = false;
    private boolean sampleitemreseachid_is_initialized = false;
    
    private Long contractsampleitemid;
    private boolean contractsampleitemid_is_modified = false;
    private boolean contractsampleitemid_is_initialized = false;
    
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private Integer status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private Integer totalsubtest;
    private boolean totalsubtest_is_modified = false;
    private boolean totalsubtest_is_initialized = false;
    
    private Long parenttest;
    private boolean parenttest_is_modified = false;
    private boolean parenttest_is_initialized = false;
    
    private Long confirmation1id;
    private boolean confirmation1id_is_modified = false;
    private boolean confirmation1id_is_initialized = false;
    
    private Long confirmation2id;
    private boolean confirmation2id_is_modified = false;
    private boolean confirmation2id_is_initialized = false;
    
    private Long confirmation3id;
    private boolean confirmation3id_is_modified = false;
    private boolean confirmation3id_is_initialized = false;
    
    private Integer daynum;
    private boolean daynum_is_modified = false;
    private boolean daynum_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private Integer qualitycontrolPerson;
    private boolean qualitycontrolPerson_is_modified = false;
    private boolean qualitycontrolPerson_is_initialized = false;
    
    private java.sql.Timestamp qualitycontrolDatetime;
    private boolean qualitycontrolDatetime_is_modified = false;
    private boolean qualitycontrolDatetime_is_initialized = false;
    
    private String qualitycontrolAnswer;
    private boolean qualitycontrolAnswer_is_modified = false;
    private boolean qualitycontrolAnswer_is_initialized = false;
    
    private String result;
    private boolean result_is_modified = false;
    private boolean result_is_initialized = false;
    
    private java.sql.Timestamp resultDatetime;
    private boolean resultDatetime_is_modified = false;
    private boolean resultDatetime_is_initialized = false;
    
    private String resultNote;
    private boolean resultNote_is_modified = false;
    private boolean resultNote_is_initialized = false;
    
    private String resultInfo;
    private boolean resultInfo_is_modified = false;
    private boolean resultInfo_is_initialized = false;
    
    private Boolean resultNorm;
    private boolean resultNorm_is_modified = false;
    private boolean resultNorm_is_initialized = false;
    
    private java.sql.Timestamp confiramtion1date;
    private boolean confiramtion1date_is_modified = false;
    private boolean confiramtion1date_is_initialized = false;
    
    private java.sql.Timestamp confiramtion2date;
    private boolean confiramtion2date_is_modified = false;
    private boolean confiramtion2date_is_initialized = false;
    
    private java.sql.Timestamp confiramtion3date;
    private boolean confiramtion3date_is_modified = false;
    private boolean confiramtion3date_is_initialized = false;
    
    private Integer deviceid;
    private boolean deviceid_is_modified = false;
    private boolean deviceid_is_initialized = false;
    
    private String resultdescr;
    private boolean resultdescr_is_modified = false;
    private boolean resultdescr_is_initialized = false;
    
    private Integer speciesid;
    private boolean speciesid_is_modified = false;
    private boolean speciesid_is_initialized = false;
    
    private Integer standardid;
    private boolean standardid_is_modified = false;
    private boolean standardid_is_initialized = false;
    
    private String norm;
    private boolean norm_is_modified = false;
    private boolean norm_is_initialized = false;
    
    private Boolean bresult;
    private boolean bresult_is_modified = false;
    private boolean bresult_is_initialized = false;
    
    private Double nresult;
    private boolean nresult_is_modified = false;
    private boolean nresult_is_initialized = false;
    
    private String tresult;
    private boolean tresult_is_modified = false;
    private boolean tresult_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    SampleitemreseachBean()
    {
    }
    
    /**
     * Getter method for sampleitemreseachid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.sampleitemreseachid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleitemreseachid
     */
    public Long getSampleitemreseachid()
    {
        return sampleitemreseachid; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(Long newVal) {
        if ((newVal != null && this.sampleitemreseachid != null && (newVal.compareTo(this.sampleitemreseachid) == 0)) || 
            (newVal == null && this.sampleitemreseachid == null && sampleitemreseachid_is_initialized)) {
            return; 
        } 
        this.sampleitemreseachid = newVal; 
        sampleitemreseachid_is_modified = true; 
        sampleitemreseachid_is_initialized = true; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(long newVal) {
        setSampleitemreseachid(new Long(newVal));
    }

    /**
     * Determines if the sampleitemreseachid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleitemreseachidModified() {
        return sampleitemreseachid_is_modified; 
    }

    /**
     * Determines if the sampleitemreseachid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleitemreseachidInitialized() {
        return sampleitemreseachid_is_initialized; 
    }

    /**
     * Getter method for contractsampleitemid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.contractsampleitemid
     * <li> foreign key: contractsampleitem.contractsampleitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampleitemid
     */
    public Long getContractsampleitemid()
    {
        return contractsampleitemid; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(Long newVal) {
        if ((newVal != null && this.contractsampleitemid != null && (newVal.compareTo(this.contractsampleitemid) == 0)) || 
            (newVal == null && this.contractsampleitemid == null && contractsampleitemid_is_initialized)) {
            return; 
        } 
        this.contractsampleitemid = newVal; 
        contractsampleitemid_is_modified = true; 
        contractsampleitemid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampleitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampleitemid
     */
    public void setContractsampleitemid(long newVal) {
        setContractsampleitemid(new Long(newVal));
    }

    /**
     * Determines if the contractsampleitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampleitemidModified() {
        return contractsampleitemid_is_modified; 
    }

    /**
     * Determines if the contractsampleitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampleitemidInitialized() {
        return contractsampleitemid_is_initialized; 
    }

    /**
     * Getter method for contractid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.contractid
     * <li> foreign key: contract.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.labtestid
     * <li> foreign key: labtest.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.status
     * <li>default value: 1
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of status
     */
    public Integer getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Integer newVal) {
        if ((newVal != null && this.status != null && (newVal.compareTo(this.status) == 0)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal) {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Getter method for totalsubtest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.totalsubtest
     * <li>default value: 0
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of totalsubtest
     */
    public Integer getTotalsubtest()
    {
        return totalsubtest; 
    }

    /**
     * Setter method for totalsubtest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to totalsubtest
     */
    public void setTotalsubtest(Integer newVal) {
        if ((newVal != null && this.totalsubtest != null && (newVal.compareTo(this.totalsubtest) == 0)) || 
            (newVal == null && this.totalsubtest == null && totalsubtest_is_initialized)) {
            return; 
        } 
        this.totalsubtest = newVal; 
        totalsubtest_is_modified = true; 
        totalsubtest_is_initialized = true; 
    }

    /**
     * Setter method for totalsubtest.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to totalsubtest
     */
    public void setTotalsubtest(int newVal) {
        setTotalsubtest(new Integer(newVal));
    }

    /**
     * Determines if the totalsubtest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTotalsubtestModified() {
        return totalsubtest_is_modified; 
    }

    /**
     * Determines if the totalsubtest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTotalsubtestInitialized() {
        return totalsubtest_is_initialized; 
    }

    /**
     * Getter method for parenttest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.parenttest
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parenttest
     */
    public Long getParenttest()
    {
        return parenttest; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(Long newVal) {
        if ((newVal != null && this.parenttest != null && (newVal.compareTo(this.parenttest) == 0)) || 
            (newVal == null && this.parenttest == null && parenttest_is_initialized)) {
            return; 
        } 
        this.parenttest = newVal; 
        parenttest_is_modified = true; 
        parenttest_is_initialized = true; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(long newVal) {
        setParenttest(new Long(newVal));
    }

    /**
     * Determines if the parenttest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParenttestModified() {
        return parenttest_is_modified; 
    }

    /**
     * Determines if the parenttest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParenttestInitialized() {
        return parenttest_is_initialized; 
    }

    /**
     * Getter method for confirmation1id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.confirmation1id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation1id
     */
    public Long getConfirmation1id()
    {
        return confirmation1id; 
    }

    /**
     * Setter method for confirmation1id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation1id
     */
    public void setConfirmation1id(Long newVal) {
        if ((newVal != null && this.confirmation1id != null && (newVal.compareTo(this.confirmation1id) == 0)) || 
            (newVal == null && this.confirmation1id == null && confirmation1id_is_initialized)) {
            return; 
        } 
        this.confirmation1id = newVal; 
        confirmation1id_is_modified = true; 
        confirmation1id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation1id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation1id
     */
    public void setConfirmation1id(long newVal) {
        setConfirmation1id(new Long(newVal));
    }

    /**
     * Determines if the confirmation1id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation1idModified() {
        return confirmation1id_is_modified; 
    }

    /**
     * Determines if the confirmation1id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation1idInitialized() {
        return confirmation1id_is_initialized; 
    }

    /**
     * Getter method for confirmation2id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.confirmation2id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation2id
     */
    public Long getConfirmation2id()
    {
        return confirmation2id; 
    }

    /**
     * Setter method for confirmation2id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation2id
     */
    public void setConfirmation2id(Long newVal) {
        if ((newVal != null && this.confirmation2id != null && (newVal.compareTo(this.confirmation2id) == 0)) || 
            (newVal == null && this.confirmation2id == null && confirmation2id_is_initialized)) {
            return; 
        } 
        this.confirmation2id = newVal; 
        confirmation2id_is_modified = true; 
        confirmation2id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation2id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation2id
     */
    public void setConfirmation2id(long newVal) {
        setConfirmation2id(new Long(newVal));
    }

    /**
     * Determines if the confirmation2id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation2idModified() {
        return confirmation2id_is_modified; 
    }

    /**
     * Determines if the confirmation2id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation2idInitialized() {
        return confirmation2id_is_initialized; 
    }

    /**
     * Getter method for confirmation3id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.confirmation3id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation3id
     */
    public Long getConfirmation3id()
    {
        return confirmation3id; 
    }

    /**
     * Setter method for confirmation3id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation3id
     */
    public void setConfirmation3id(Long newVal) {
        if ((newVal != null && this.confirmation3id != null && (newVal.compareTo(this.confirmation3id) == 0)) || 
            (newVal == null && this.confirmation3id == null && confirmation3id_is_initialized)) {
            return; 
        } 
        this.confirmation3id = newVal; 
        confirmation3id_is_modified = true; 
        confirmation3id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation3id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation3id
     */
    public void setConfirmation3id(long newVal) {
        setConfirmation3id(new Long(newVal));
    }

    /**
     * Determines if the confirmation3id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation3idModified() {
        return confirmation3id_is_modified; 
    }

    /**
     * Determines if the confirmation3id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation3idInitialized() {
        return confirmation3id_is_initialized; 
    }

    /**
     * Getter method for daynum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.daynum
     * <li>default value: 2
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of daynum
     */
    public Integer getDaynum()
    {
        return daynum; 
    }

    /**
     * Setter method for daynum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to daynum
     */
    public void setDaynum(Integer newVal) {
        if ((newVal != null && this.daynum != null && (newVal.compareTo(this.daynum) == 0)) || 
            (newVal == null && this.daynum == null && daynum_is_initialized)) {
            return; 
        } 
        this.daynum = newVal; 
        daynum_is_modified = true; 
        daynum_is_initialized = true; 
    }

    /**
     * Setter method for daynum.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to daynum
     */
    public void setDaynum(int newVal) {
        setDaynum(new Integer(newVal));
    }

    /**
     * Determines if the daynum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDaynumModified() {
        return daynum_is_modified; 
    }

    /**
     * Determines if the daynum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDaynumInitialized() {
        return daynum_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for qualitycontrolPerson.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.qualitycontrol_person
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of qualitycontrolPerson
     */
    public Integer getQualitycontrolPerson()
    {
        return qualitycontrolPerson; 
    }

    /**
     * Setter method for qualitycontrolPerson.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qualitycontrolPerson
     */
    public void setQualitycontrolPerson(Integer newVal) {
        if ((newVal != null && this.qualitycontrolPerson != null && (newVal.compareTo(this.qualitycontrolPerson) == 0)) || 
            (newVal == null && this.qualitycontrolPerson == null && qualitycontrolPerson_is_initialized)) {
            return; 
        } 
        this.qualitycontrolPerson = newVal; 
        qualitycontrolPerson_is_modified = true; 
        qualitycontrolPerson_is_initialized = true; 
    }

    /**
     * Setter method for qualitycontrolPerson.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qualitycontrolPerson
     */
    public void setQualitycontrolPerson(int newVal) {
        setQualitycontrolPerson(new Integer(newVal));
    }

    /**
     * Determines if the qualitycontrolPerson has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQualitycontrolPersonModified() {
        return qualitycontrolPerson_is_modified; 
    }

    /**
     * Determines if the qualitycontrolPerson has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQualitycontrolPersonInitialized() {
        return qualitycontrolPerson_is_initialized; 
    }

    /**
     * Getter method for qualitycontrolDatetime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.qualitycontrol_datetime
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of qualitycontrolDatetime
     */
    public java.sql.Timestamp getQualitycontrolDatetime()
    {
        return qualitycontrolDatetime; 
    }

    /**
     * Setter method for qualitycontrolDatetime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qualitycontrolDatetime
     */
    public void setQualitycontrolDatetime(java.sql.Timestamp newVal) {
        if ((newVal != null && this.qualitycontrolDatetime != null && (newVal.compareTo(this.qualitycontrolDatetime) == 0)) || 
            (newVal == null && this.qualitycontrolDatetime == null && qualitycontrolDatetime_is_initialized)) {
            return; 
        } 
        this.qualitycontrolDatetime = newVal; 
        qualitycontrolDatetime_is_modified = true; 
        qualitycontrolDatetime_is_initialized = true; 
    }

    /**
     * Setter method for qualitycontrolDatetime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to qualitycontrolDatetime
     */
    public void setQualitycontrolDatetime(long newVal) {
        setQualitycontrolDatetime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the qualitycontrolDatetime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQualitycontrolDatetimeModified() {
        return qualitycontrolDatetime_is_modified; 
    }

    /**
     * Determines if the qualitycontrolDatetime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQualitycontrolDatetimeInitialized() {
        return qualitycontrolDatetime_is_initialized; 
    }

    /**
     * Getter method for qualitycontrolAnswer.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.qualitycontrol_answer
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of qualitycontrolAnswer
     */
    public String getQualitycontrolAnswer()
    {
        return qualitycontrolAnswer; 
    }

    /**
     * Setter method for qualitycontrolAnswer.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to qualitycontrolAnswer
     */
    public void setQualitycontrolAnswer(String newVal) {
        if ((newVal != null && this.qualitycontrolAnswer != null && (newVal.compareTo(this.qualitycontrolAnswer) == 0)) || 
            (newVal == null && this.qualitycontrolAnswer == null && qualitycontrolAnswer_is_initialized)) {
            return; 
        } 
        this.qualitycontrolAnswer = newVal; 
        qualitycontrolAnswer_is_modified = true; 
        qualitycontrolAnswer_is_initialized = true; 
    }

    /**
     * Determines if the qualitycontrolAnswer has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQualitycontrolAnswerModified() {
        return qualitycontrolAnswer_is_modified; 
    }

    /**
     * Determines if the qualitycontrolAnswer has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQualitycontrolAnswerInitialized() {
        return qualitycontrolAnswer_is_initialized; 
    }

    /**
     * Getter method for result.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.result
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of result
     */
    public String getResult()
    {
        return result; 
    }

    /**
     * Setter method for result.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to result
     */
    public void setResult(String newVal) {
        if ((newVal != null && this.result != null && (newVal.compareTo(this.result) == 0)) || 
            (newVal == null && this.result == null && result_is_initialized)) {
            return; 
        } 
        this.result = newVal; 
        result_is_modified = true; 
        result_is_initialized = true; 
    }

    /**
     * Determines if the result has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultModified() {
        return result_is_modified; 
    }

    /**
     * Determines if the result has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultInitialized() {
        return result_is_initialized; 
    }

    /**
     * Getter method for resultDatetime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.result_datetime
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of resultDatetime
     */
    public java.sql.Timestamp getResultDatetime()
    {
        return resultDatetime; 
    }

    /**
     * Setter method for resultDatetime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultDatetime
     */
    public void setResultDatetime(java.sql.Timestamp newVal) {
        if ((newVal != null && this.resultDatetime != null && (newVal.compareTo(this.resultDatetime) == 0)) || 
            (newVal == null && this.resultDatetime == null && resultDatetime_is_initialized)) {
            return; 
        } 
        this.resultDatetime = newVal; 
        resultDatetime_is_modified = true; 
        resultDatetime_is_initialized = true; 
    }

    /**
     * Setter method for resultDatetime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to resultDatetime
     */
    public void setResultDatetime(long newVal) {
        setResultDatetime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the resultDatetime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultDatetimeModified() {
        return resultDatetime_is_modified; 
    }

    /**
     * Determines if the resultDatetime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultDatetimeInitialized() {
        return resultDatetime_is_initialized; 
    }

    /**
     * Getter method for resultNote.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.result_note
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of resultNote
     */
    public String getResultNote()
    {
        return resultNote; 
    }

    /**
     * Setter method for resultNote.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultNote
     */
    public void setResultNote(String newVal) {
        if ((newVal != null && this.resultNote != null && (newVal.compareTo(this.resultNote) == 0)) || 
            (newVal == null && this.resultNote == null && resultNote_is_initialized)) {
            return; 
        } 
        this.resultNote = newVal; 
        resultNote_is_modified = true; 
        resultNote_is_initialized = true; 
    }

    /**
     * Determines if the resultNote has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultNoteModified() {
        return resultNote_is_modified; 
    }

    /**
     * Determines if the resultNote has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultNoteInitialized() {
        return resultNote_is_initialized; 
    }

    /**
     * Getter method for resultInfo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.result_info
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of resultInfo
     */
    public String getResultInfo()
    {
        return resultInfo; 
    }

    /**
     * Setter method for resultInfo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultInfo
     */
    public void setResultInfo(String newVal) {
        if ((newVal != null && this.resultInfo != null && (newVal.compareTo(this.resultInfo) == 0)) || 
            (newVal == null && this.resultInfo == null && resultInfo_is_initialized)) {
            return; 
        } 
        this.resultInfo = newVal; 
        resultInfo_is_modified = true; 
        resultInfo_is_initialized = true; 
    }

    /**
     * Determines if the resultInfo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultInfoModified() {
        return resultInfo_is_modified; 
    }

    /**
     * Determines if the resultInfo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultInfoInitialized() {
        return resultInfo_is_initialized; 
    }

    /**
     * Getter method for resultNorm.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.result_norm
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of resultNorm
     */
    public Boolean getResultNorm()
    {
        return resultNorm; 
    }

    /**
     * Setter method for resultNorm.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to resultNorm
     */
    public void setResultNorm(Boolean newVal) {
        if ((newVal != null && this.resultNorm != null && newVal.equals(this.resultNorm)) || 
            (newVal == null && this.resultNorm == null && resultNorm_is_initialized)) {
            return; 
        } 
        this.resultNorm = newVal; 
        resultNorm_is_modified = true; 
        resultNorm_is_initialized = true; 
    }

    /**
     * Setter method for resultNorm.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to resultNorm
     */
    public void setResultNorm(boolean newVal) {
        setResultNorm(new Boolean(newVal));
    }

    /**
     * Determines if the resultNorm has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultNormModified() {
        return resultNorm_is_modified; 
    }

    /**
     * Determines if the resultNorm has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultNormInitialized() {
        return resultNorm_is_initialized; 
    }

    /**
     * Getter method for confiramtion1date.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.confiramtion1date
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of confiramtion1date
     */
    public java.sql.Timestamp getConfiramtion1date()
    {
        return confiramtion1date; 
    }

    /**
     * Setter method for confiramtion1date.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confiramtion1date
     */
    public void setConfiramtion1date(java.sql.Timestamp newVal) {
        if ((newVal != null && this.confiramtion1date != null && (newVal.compareTo(this.confiramtion1date) == 0)) || 
            (newVal == null && this.confiramtion1date == null && confiramtion1date_is_initialized)) {
            return; 
        } 
        this.confiramtion1date = newVal; 
        confiramtion1date_is_modified = true; 
        confiramtion1date_is_initialized = true; 
    }

    /**
     * Setter method for confiramtion1date.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confiramtion1date
     */
    public void setConfiramtion1date(long newVal) {
        setConfiramtion1date(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the confiramtion1date has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfiramtion1dateModified() {
        return confiramtion1date_is_modified; 
    }

    /**
     * Determines if the confiramtion1date has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfiramtion1dateInitialized() {
        return confiramtion1date_is_initialized; 
    }

    /**
     * Getter method for confiramtion2date.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.confiramtion2date
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of confiramtion2date
     */
    public java.sql.Timestamp getConfiramtion2date()
    {
        return confiramtion2date; 
    }

    /**
     * Setter method for confiramtion2date.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confiramtion2date
     */
    public void setConfiramtion2date(java.sql.Timestamp newVal) {
        if ((newVal != null && this.confiramtion2date != null && (newVal.compareTo(this.confiramtion2date) == 0)) || 
            (newVal == null && this.confiramtion2date == null && confiramtion2date_is_initialized)) {
            return; 
        } 
        this.confiramtion2date = newVal; 
        confiramtion2date_is_modified = true; 
        confiramtion2date_is_initialized = true; 
    }

    /**
     * Setter method for confiramtion2date.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confiramtion2date
     */
    public void setConfiramtion2date(long newVal) {
        setConfiramtion2date(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the confiramtion2date has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfiramtion2dateModified() {
        return confiramtion2date_is_modified; 
    }

    /**
     * Determines if the confiramtion2date has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfiramtion2dateInitialized() {
        return confiramtion2date_is_initialized; 
    }

    /**
     * Getter method for confiramtion3date.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.confiramtion3date
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of confiramtion3date
     */
    public java.sql.Timestamp getConfiramtion3date()
    {
        return confiramtion3date; 
    }

    /**
     * Setter method for confiramtion3date.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confiramtion3date
     */
    public void setConfiramtion3date(java.sql.Timestamp newVal) {
        if ((newVal != null && this.confiramtion3date != null && (newVal.compareTo(this.confiramtion3date) == 0)) || 
            (newVal == null && this.confiramtion3date == null && confiramtion3date_is_initialized)) {
            return; 
        } 
        this.confiramtion3date = newVal; 
        confiramtion3date_is_modified = true; 
        confiramtion3date_is_initialized = true; 
    }

    /**
     * Setter method for confiramtion3date.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confiramtion3date
     */
    public void setConfiramtion3date(long newVal) {
        setConfiramtion3date(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the confiramtion3date has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfiramtion3dateModified() {
        return confiramtion3date_is_modified; 
    }

    /**
     * Determines if the confiramtion3date has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfiramtion3dateInitialized() {
        return confiramtion3date_is_initialized; 
    }

    /**
     * Getter method for deviceid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.deviceid
     * <li> foreign key: device.deviceid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of deviceid
     */
    public Integer getDeviceid()
    {
        return deviceid; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(Integer newVal) {
        if ((newVal != null && this.deviceid != null && (newVal.compareTo(this.deviceid) == 0)) || 
            (newVal == null && this.deviceid == null && deviceid_is_initialized)) {
            return; 
        } 
        this.deviceid = newVal; 
        deviceid_is_modified = true; 
        deviceid_is_initialized = true; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(int newVal) {
        setDeviceid(new Integer(newVal));
    }

    /**
     * Determines if the deviceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeviceidModified() {
        return deviceid_is_modified; 
    }

    /**
     * Determines if the deviceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeviceidInitialized() {
        return deviceid_is_initialized; 
    }

    /**
     * Getter method for resultdescr.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.resultdescr
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of resultdescr
     */
    public String getResultdescr()
    {
        return resultdescr; 
    }

    /**
     * Setter method for resultdescr.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultdescr
     */
    public void setResultdescr(String newVal) {
        if ((newVal != null && this.resultdescr != null && (newVal.compareTo(this.resultdescr) == 0)) || 
            (newVal == null && this.resultdescr == null && resultdescr_is_initialized)) {
            return; 
        } 
        this.resultdescr = newVal; 
        resultdescr_is_modified = true; 
        resultdescr_is_initialized = true; 
    }

    /**
     * Determines if the resultdescr has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultdescrModified() {
        return resultdescr_is_modified; 
    }

    /**
     * Determines if the resultdescr has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultdescrInitialized() {
        return resultdescr_is_initialized; 
    }

    /**
     * Getter method for speciesid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.speciesid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of speciesid
     */
    public Integer getSpeciesid()
    {
        return speciesid; 
    }

    /**
     * Setter method for speciesid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to speciesid
     */
    public void setSpeciesid(Integer newVal) {
        if ((newVal != null && this.speciesid != null && (newVal.compareTo(this.speciesid) == 0)) || 
            (newVal == null && this.speciesid == null && speciesid_is_initialized)) {
            return; 
        } 
        this.speciesid = newVal; 
        speciesid_is_modified = true; 
        speciesid_is_initialized = true; 
    }

    /**
     * Setter method for speciesid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to speciesid
     */
    public void setSpeciesid(int newVal) {
        setSpeciesid(new Integer(newVal));
    }

    /**
     * Determines if the speciesid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSpeciesidModified() {
        return speciesid_is_modified; 
    }

    /**
     * Determines if the speciesid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSpeciesidInitialized() {
        return speciesid_is_initialized; 
    }

    /**
     * Getter method for standardid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.standardid
     * <li> foreign key: standard.standardid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of standardid
     */
    public Integer getStandardid()
    {
        return standardid; 
    }

    /**
     * Setter method for standardid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to standardid
     */
    public void setStandardid(Integer newVal) {
        if ((newVal != null && this.standardid != null && (newVal.compareTo(this.standardid) == 0)) || 
            (newVal == null && this.standardid == null && standardid_is_initialized)) {
            return; 
        } 
        this.standardid = newVal; 
        standardid_is_modified = true; 
        standardid_is_initialized = true; 
    }

    /**
     * Setter method for standardid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to standardid
     */
    public void setStandardid(int newVal) {
        setStandardid(new Integer(newVal));
    }

    /**
     * Determines if the standardid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStandardidModified() {
        return standardid_is_modified; 
    }

    /**
     * Determines if the standardid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStandardidInitialized() {
        return standardid_is_initialized; 
    }

    /**
     * Getter method for norm.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.norm
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of norm
     */
    public String getNorm()
    {
        return norm; 
    }

    /**
     * Setter method for norm.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to norm
     */
    public void setNorm(String newVal) {
        if ((newVal != null && this.norm != null && (newVal.compareTo(this.norm) == 0)) || 
            (newVal == null && this.norm == null && norm_is_initialized)) {
            return; 
        } 
        this.norm = newVal; 
        norm_is_modified = true; 
        norm_is_initialized = true; 
    }

    /**
     * Determines if the norm has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNormModified() {
        return norm_is_modified; 
    }

    /**
     * Determines if the norm has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNormInitialized() {
        return norm_is_initialized; 
    }

    /**
     * Getter method for bresult.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.bresult
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of bresult
     */
    public Boolean getBresult()
    {
        return bresult; 
    }

    /**
     * Setter method for bresult.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to bresult
     */
    public void setBresult(Boolean newVal) {
        if ((newVal != null && this.bresult != null && newVal.equals(this.bresult)) || 
            (newVal == null && this.bresult == null && bresult_is_initialized)) {
            return; 
        } 
        this.bresult = newVal; 
        bresult_is_modified = true; 
        bresult_is_initialized = true; 
    }

    /**
     * Setter method for bresult.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to bresult
     */
    public void setBresult(boolean newVal) {
        setBresult(new Boolean(newVal));
    }

    /**
     * Determines if the bresult has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBresultModified() {
        return bresult_is_modified; 
    }

    /**
     * Determines if the bresult has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBresultInitialized() {
        return bresult_is_initialized; 
    }

    /**
     * Getter method for nresult.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.nresult
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of nresult
     */
    public Double getNresult()
    {
        return nresult; 
    }

    /**
     * Setter method for nresult.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nresult
     */
    public void setNresult(Double newVal) {
        if ((newVal != null && this.nresult != null && (newVal.compareTo(this.nresult) == 0)) || 
            (newVal == null && this.nresult == null && nresult_is_initialized)) {
            return; 
        } 
        this.nresult = newVal; 
        nresult_is_modified = true; 
        nresult_is_initialized = true; 
    }

    /**
     * Setter method for nresult.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nresult
     */
    public void setNresult(double newVal) {
        setNresult(new Double(newVal));
    }

    /**
     * Determines if the nresult has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNresultModified() {
        return nresult_is_modified; 
    }

    /**
     * Determines if the nresult has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNresultInitialized() {
        return nresult_is_initialized; 
    }

    /**
     * Getter method for tresult.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: sampleitemreseach.tresult
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of tresult
     */
    public String getTresult()
    {
        return tresult; 
    }

    /**
     * Setter method for tresult.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tresult
     */
    public void setTresult(String newVal) {
        if ((newVal != null && this.tresult != null && (newVal.compareTo(this.tresult) == 0)) || 
            (newVal == null && this.tresult == null && tresult_is_initialized)) {
            return; 
        } 
        this.tresult = newVal; 
        tresult_is_modified = true; 
        tresult_is_initialized = true; 
    }

    /**
     * Determines if the tresult has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTresultModified() {
        return tresult_is_modified; 
    }

    /**
     * Determines if the tresult has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTresultInitialized() {
        return tresult_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return sampleitemreseachid_is_modified || 
		contractsampleitemid_is_modified || 
		contractid_is_modified || 
		labtestid_is_modified || 
		price_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		deleted_is_modified || 
		status_is_modified || 
		totalsubtest_is_modified || 
		parenttest_is_modified || 
		confirmation1id_is_modified || 
		confirmation2id_is_modified || 
		confirmation3id_is_modified || 
		daynum_is_modified || 
		institutionid_is_modified || 
		qualitycontrolPerson_is_modified || 
		qualitycontrolDatetime_is_modified || 
		qualitycontrolAnswer_is_modified || 
		result_is_modified || 
		resultDatetime_is_modified || 
		resultNote_is_modified || 
		resultInfo_is_modified || 
		resultNorm_is_modified || 
		confiramtion1date_is_modified || 
		confiramtion2date_is_modified || 
		confiramtion3date_is_modified || 
		deviceid_is_modified || 
		resultdescr_is_modified || 
		speciesid_is_modified || 
		standardid_is_modified || 
		norm_is_modified || 
		bresult_is_modified || 
		nresult_is_modified || 
		tresult_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        sampleitemreseachid_is_modified = false;
        contractsampleitemid_is_modified = false;
        contractid_is_modified = false;
        labtestid_is_modified = false;
        price_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        deleted_is_modified = false;
        status_is_modified = false;
        totalsubtest_is_modified = false;
        parenttest_is_modified = false;
        confirmation1id_is_modified = false;
        confirmation2id_is_modified = false;
        confirmation3id_is_modified = false;
        daynum_is_modified = false;
        institutionid_is_modified = false;
        qualitycontrolPerson_is_modified = false;
        qualitycontrolDatetime_is_modified = false;
        qualitycontrolAnswer_is_modified = false;
        result_is_modified = false;
        resultDatetime_is_modified = false;
        resultNote_is_modified = false;
        resultInfo_is_modified = false;
        resultNorm_is_modified = false;
        confiramtion1date_is_modified = false;
        confiramtion2date_is_modified = false;
        confiramtion3date_is_modified = false;
        deviceid_is_modified = false;
        resultdescr_is_modified = false;
        speciesid_is_modified = false;
        standardid_is_modified = false;
        norm_is_modified = false;
        bresult_is_modified = false;
        nresult_is_modified = false;
        tresult_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SampleitemreseachBean bean) {
        setSampleitemreseachid(bean.getSampleitemreseachid());
        setContractsampleitemid(bean.getContractsampleitemid());
        setContractid(bean.getContractid());
        setLabtestid(bean.getLabtestid());
        setPrice(bean.getPrice());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDeleted(bean.getDeleted());
        setStatus(bean.getStatus());
        setTotalsubtest(bean.getTotalsubtest());
        setParenttest(bean.getParenttest());
        setConfirmation1id(bean.getConfirmation1id());
        setConfirmation2id(bean.getConfirmation2id());
        setConfirmation3id(bean.getConfirmation3id());
        setDaynum(bean.getDaynum());
        setInstitutionid(bean.getInstitutionid());
        setQualitycontrolPerson(bean.getQualitycontrolPerson());
        setQualitycontrolDatetime(bean.getQualitycontrolDatetime());
        setQualitycontrolAnswer(bean.getQualitycontrolAnswer());
        setResult(bean.getResult());
        setResultDatetime(bean.getResultDatetime());
        setResultNote(bean.getResultNote());
        setResultInfo(bean.getResultInfo());
        setResultNorm(bean.getResultNorm());
        setConfiramtion1date(bean.getConfiramtion1date());
        setConfiramtion2date(bean.getConfiramtion2date());
        setConfiramtion3date(bean.getConfiramtion3date());
        setDeviceid(bean.getDeviceid());
        setResultdescr(bean.getResultdescr());
        setSpeciesid(bean.getSpeciesid());
        setStandardid(bean.getStandardid());
        setNorm(bean.getNorm());
        setBresult(bean.getBresult());
        setNresult(bean.getNresult());
        setTresult(bean.getTresult());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[sampleitemreseach] "
                 + "\n - sampleitemreseach.sampleitemreseachid = " + (sampleitemreseachid_is_initialized ? ("[" + (sampleitemreseachid == null ? null : sampleitemreseachid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.contractsampleitemid = " + (contractsampleitemid_is_initialized ? ("[" + (contractsampleitemid == null ? null : contractsampleitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.totalsubtest = " + (totalsubtest_is_initialized ? ("[" + (totalsubtest == null ? null : totalsubtest.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.parenttest = " + (parenttest_is_initialized ? ("[" + (parenttest == null ? null : parenttest.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.confirmation1id = " + (confirmation1id_is_initialized ? ("[" + (confirmation1id == null ? null : confirmation1id.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.confirmation2id = " + (confirmation2id_is_initialized ? ("[" + (confirmation2id == null ? null : confirmation2id.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.confirmation3id = " + (confirmation3id_is_initialized ? ("[" + (confirmation3id == null ? null : confirmation3id.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.daynum = " + (daynum_is_initialized ? ("[" + (daynum == null ? null : daynum.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.qualitycontrol_person = " + (qualitycontrolPerson_is_initialized ? ("[" + (qualitycontrolPerson == null ? null : qualitycontrolPerson.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.qualitycontrol_datetime = " + (qualitycontrolDatetime_is_initialized ? ("[" + (qualitycontrolDatetime == null ? null : qualitycontrolDatetime.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.qualitycontrol_answer = " + (qualitycontrolAnswer_is_initialized ? ("[" + (qualitycontrolAnswer == null ? null : qualitycontrolAnswer.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.result = " + (result_is_initialized ? ("[" + (result == null ? null : result.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.result_datetime = " + (resultDatetime_is_initialized ? ("[" + (resultDatetime == null ? null : resultDatetime.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.result_note = " + (resultNote_is_initialized ? ("[" + (resultNote == null ? null : resultNote.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.result_info = " + (resultInfo_is_initialized ? ("[" + (resultInfo == null ? null : resultInfo.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.result_norm = " + (resultNorm_is_initialized ? ("[" + (resultNorm == null ? null : resultNorm.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.confiramtion1date = " + (confiramtion1date_is_initialized ? ("[" + (confiramtion1date == null ? null : confiramtion1date.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.confiramtion2date = " + (confiramtion2date_is_initialized ? ("[" + (confiramtion2date == null ? null : confiramtion2date.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.confiramtion3date = " + (confiramtion3date_is_initialized ? ("[" + (confiramtion3date == null ? null : confiramtion3date.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.deviceid = " + (deviceid_is_initialized ? ("[" + (deviceid == null ? null : deviceid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.resultdescr = " + (resultdescr_is_initialized ? ("[" + (resultdescr == null ? null : resultdescr.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.speciesid = " + (speciesid_is_initialized ? ("[" + (speciesid == null ? null : speciesid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.standardid = " + (standardid_is_initialized ? ("[" + (standardid == null ? null : standardid.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.norm = " + (norm_is_initialized ? ("[" + (norm == null ? null : norm.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.bresult = " + (bresult_is_initialized ? ("[" + (bresult == null ? null : bresult.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.nresult = " + (nresult_is_initialized ? ("[" + (nresult == null ? null : nresult.toString()) + "]") : "not initialized") + ""
                 + "\n - sampleitemreseach.tresult = " + (tresult_is_initialized ? ("[" + (tresult == null ? null : tresult.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
