// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ActBean
// extends+ 

// extends- 
{
    private Long actid;
    private boolean actid_is_modified = false;
    private boolean actid_is_initialized = false;
    
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private java.util.Date actdate;
    private boolean actdate_is_modified = false;
    private boolean actdate_is_initialized = false;
    
    private String content;
    private boolean content_is_modified = false;
    private boolean content_is_initialized = false;
    
    private Double sampleamount;
    private boolean sampleamount_is_modified = false;
    private boolean sampleamount_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private String docfile;
    private boolean docfile_is_modified = false;
    private boolean docfile_is_initialized = false;
    
    private Integer regionid;
    private boolean regionid_is_modified = false;
    private boolean regionid_is_initialized = false;
    
    private Integer raionid;
    private boolean raionid_is_modified = false;
    private boolean raionid_is_initialized = false;
    
    private Integer villageid;
    private boolean villageid_is_modified = false;
    private boolean villageid_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private String bringer;
    private boolean bringer_is_modified = false;
    private boolean bringer_is_initialized = false;
    
    private String stamp;
    private boolean stamp_is_modified = false;
    private boolean stamp_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ActBean()
    {
    }
    
    /**
     * Getter method for actid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.actid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of actid
     */
    public Long getActid()
    {
        return actid; 
    }

    /**
     * Setter method for actid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(Long newVal) {
        if ((newVal != null && this.actid != null && (newVal.compareTo(this.actid) == 0)) || 
            (newVal == null && this.actid == null && actid_is_initialized)) {
            return; 
        } 
        this.actid = newVal; 
        actid_is_modified = true; 
        actid_is_initialized = true; 
    }

    /**
     * Setter method for actid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(long newVal) {
        setActid(new Long(newVal));
    }

    /**
     * Determines if the actid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActidModified() {
        return actid_is_modified; 
    }

    /**
     * Determines if the actid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActidInitialized() {
        return actid_is_initialized; 
    }

    /**
     * Getter method for contractid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.contractid
     * <li> foreign key: contract.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.num
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for actdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.actdate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of actdate
     */
    public java.util.Date getActdate()
    {
        return actdate; 
    }

    /**
     * Setter method for actdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actdate
     */
    public void setActdate(java.util.Date newVal) {
        if ((newVal != null && this.actdate != null && (newVal.compareTo(this.actdate) == 0)) || 
            (newVal == null && this.actdate == null && actdate_is_initialized)) {
            return; 
        } 
        this.actdate = newVal; 
        actdate_is_modified = true; 
        actdate_is_initialized = true; 
    }

    /**
     * Setter method for actdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actdate
     */
    public void setActdate(long newVal) {
        setActdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the actdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActdateModified() {
        return actdate_is_modified; 
    }

    /**
     * Determines if the actdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActdateInitialized() {
        return actdate_is_initialized; 
    }

    /**
     * Getter method for content.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.content
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of content
     */
    public String getContent()
    {
        return content; 
    }

    /**
     * Setter method for content.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to content
     */
    public void setContent(String newVal) {
        if ((newVal != null && this.content != null && (newVal.compareTo(this.content) == 0)) || 
            (newVal == null && this.content == null && content_is_initialized)) {
            return; 
        } 
        this.content = newVal; 
        content_is_modified = true; 
        content_is_initialized = true; 
    }

    /**
     * Determines if the content has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContentModified() {
        return content_is_modified; 
    }

    /**
     * Determines if the content has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContentInitialized() {
        return content_is_initialized; 
    }

    /**
     * Getter method for sampleamount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.sampleamount
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of sampleamount
     */
    public Double getSampleamount()
    {
        return sampleamount; 
    }

    /**
     * Setter method for sampleamount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleamount
     */
    public void setSampleamount(Double newVal) {
        if ((newVal != null && this.sampleamount != null && (newVal.compareTo(this.sampleamount) == 0)) || 
            (newVal == null && this.sampleamount == null && sampleamount_is_initialized)) {
            return; 
        } 
        this.sampleamount = newVal; 
        sampleamount_is_modified = true; 
        sampleamount_is_initialized = true; 
    }

    /**
     * Setter method for sampleamount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleamount
     */
    public void setSampleamount(double newVal) {
        setSampleamount(new Double(newVal));
    }

    /**
     * Determines if the sampleamount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleamountModified() {
        return sampleamount_is_modified; 
    }

    /**
     * Determines if the sampleamount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleamountInitialized() {
        return sampleamount_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.regbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for docfile.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.docfile
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of docfile
     */
    public String getDocfile()
    {
        return docfile; 
    }

    /**
     * Setter method for docfile.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to docfile
     */
    public void setDocfile(String newVal) {
        if ((newVal != null && this.docfile != null && (newVal.compareTo(this.docfile) == 0)) || 
            (newVal == null && this.docfile == null && docfile_is_initialized)) {
            return; 
        } 
        this.docfile = newVal; 
        docfile_is_modified = true; 
        docfile_is_initialized = true; 
    }

    /**
     * Determines if the docfile has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDocfileModified() {
        return docfile_is_modified; 
    }

    /**
     * Determines if the docfile has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDocfileInitialized() {
        return docfile_is_initialized; 
    }

    /**
     * Getter method for regionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.regionid
     * <li> foreign key: tunit.tunitid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regionid
     */
    public Integer getRegionid()
    {
        return regionid; 
    }

    /**
     * Setter method for regionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regionid
     */
    public void setRegionid(Integer newVal) {
        if ((newVal != null && this.regionid != null && (newVal.compareTo(this.regionid) == 0)) || 
            (newVal == null && this.regionid == null && regionid_is_initialized)) {
            return; 
        } 
        this.regionid = newVal; 
        regionid_is_modified = true; 
        regionid_is_initialized = true; 
    }

    /**
     * Setter method for regionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regionid
     */
    public void setRegionid(int newVal) {
        setRegionid(new Integer(newVal));
    }

    /**
     * Determines if the regionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegionidModified() {
        return regionid_is_modified; 
    }

    /**
     * Determines if the regionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegionidInitialized() {
        return regionid_is_initialized; 
    }

    /**
     * Getter method for raionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.raionid
     * <li> foreign key: tunit.tunitid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of raionid
     */
    public Integer getRaionid()
    {
        return raionid; 
    }

    /**
     * Setter method for raionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to raionid
     */
    public void setRaionid(Integer newVal) {
        if ((newVal != null && this.raionid != null && (newVal.compareTo(this.raionid) == 0)) || 
            (newVal == null && this.raionid == null && raionid_is_initialized)) {
            return; 
        } 
        this.raionid = newVal; 
        raionid_is_modified = true; 
        raionid_is_initialized = true; 
    }

    /**
     * Setter method for raionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to raionid
     */
    public void setRaionid(int newVal) {
        setRaionid(new Integer(newVal));
    }

    /**
     * Determines if the raionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRaionidModified() {
        return raionid_is_modified; 
    }

    /**
     * Determines if the raionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRaionidInitialized() {
        return raionid_is_initialized; 
    }

    /**
     * Getter method for villageid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.villageid
     * <li> foreign key: tunit.tunitid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of villageid
     */
    public Integer getVillageid()
    {
        return villageid; 
    }

    /**
     * Setter method for villageid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to villageid
     */
    public void setVillageid(Integer newVal) {
        if ((newVal != null && this.villageid != null && (newVal.compareTo(this.villageid) == 0)) || 
            (newVal == null && this.villageid == null && villageid_is_initialized)) {
            return; 
        } 
        this.villageid = newVal; 
        villageid_is_modified = true; 
        villageid_is_initialized = true; 
    }

    /**
     * Setter method for villageid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to villageid
     */
    public void setVillageid(int newVal) {
        setVillageid(new Integer(newVal));
    }

    /**
     * Determines if the villageid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVillageidModified() {
        return villageid_is_modified; 
    }

    /**
     * Determines if the villageid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVillageidInitialized() {
        return villageid_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for bringer.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.bringer
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of bringer
     */
    public String getBringer()
    {
        return bringer; 
    }

    /**
     * Setter method for bringer.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to bringer
     */
    public void setBringer(String newVal) {
        if ((newVal != null && this.bringer != null && (newVal.compareTo(this.bringer) == 0)) || 
            (newVal == null && this.bringer == null && bringer_is_initialized)) {
            return; 
        } 
        this.bringer = newVal; 
        bringer_is_modified = true; 
        bringer_is_initialized = true; 
    }

    /**
     * Determines if the bringer has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBringerModified() {
        return bringer_is_modified; 
    }

    /**
     * Determines if the bringer has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBringerInitialized() {
        return bringer_is_initialized; 
    }

    /**
     * Getter method for stamp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: act.stamp
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of stamp
     */
    public String getStamp()
    {
        return stamp; 
    }

    /**
     * Setter method for stamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to stamp
     */
    public void setStamp(String newVal) {
        if ((newVal != null && this.stamp != null && (newVal.compareTo(this.stamp) == 0)) || 
            (newVal == null && this.stamp == null && stamp_is_initialized)) {
            return; 
        } 
        this.stamp = newVal; 
        stamp_is_modified = true; 
        stamp_is_initialized = true; 
    }

    /**
     * Determines if the stamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStampModified() {
        return stamp_is_modified; 
    }

    /**
     * Determines if the stamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStampInitialized() {
        return stamp_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return actid_is_modified || 
		contractid_is_modified || 
		num_is_modified || 
		actdate_is_modified || 
		content_is_modified || 
		sampleamount_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		docfile_is_modified || 
		regionid_is_modified || 
		raionid_is_modified || 
		villageid_is_modified || 
		deleted_is_modified || 
		bringer_is_modified || 
		stamp_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        actid_is_modified = false;
        contractid_is_modified = false;
        num_is_modified = false;
        actdate_is_modified = false;
        content_is_modified = false;
        sampleamount_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        docfile_is_modified = false;
        regionid_is_modified = false;
        raionid_is_modified = false;
        villageid_is_modified = false;
        deleted_is_modified = false;
        bringer_is_modified = false;
        stamp_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ActBean bean) {
        setActid(bean.getActid());
        setContractid(bean.getContractid());
        setNum(bean.getNum());
        setActdate(bean.getActdate());
        setContent(bean.getContent());
        setSampleamount(bean.getSampleamount());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDocfile(bean.getDocfile());
        setRegionid(bean.getRegionid());
        setRaionid(bean.getRaionid());
        setVillageid(bean.getVillageid());
        setDeleted(bean.getDeleted());
        setBringer(bean.getBringer());
        setStamp(bean.getStamp());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[act] "
                 + "\n - act.actid = " + (actid_is_initialized ? ("[" + (actid == null ? null : actid.toString()) + "]") : "not initialized") + ""
                 + "\n - act.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - act.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - act.actdate = " + (actdate_is_initialized ? ("[" + (actdate == null ? null : actdate.toString()) + "]") : "not initialized") + ""
                 + "\n - act.content = " + (content_is_initialized ? ("[" + (content == null ? null : content.toString()) + "]") : "not initialized") + ""
                 + "\n - act.sampleamount = " + (sampleamount_is_initialized ? ("[" + (sampleamount == null ? null : sampleamount.toString()) + "]") : "not initialized") + ""
                 + "\n - act.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - act.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - act.docfile = " + (docfile_is_initialized ? ("[" + (docfile == null ? null : docfile.toString()) + "]") : "not initialized") + ""
                 + "\n - act.regionid = " + (regionid_is_initialized ? ("[" + (regionid == null ? null : regionid.toString()) + "]") : "not initialized") + ""
                 + "\n - act.raionid = " + (raionid_is_initialized ? ("[" + (raionid == null ? null : raionid.toString()) + "]") : "not initialized") + ""
                 + "\n - act.villageid = " + (villageid_is_initialized ? ("[" + (villageid == null ? null : villageid.toString()) + "]") : "not initialized") + ""
                 + "\n - act.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - act.bringer = " + (bringer_is_initialized ? ("[" + (bringer == null ? null : bringer.toString()) + "]") : "not initialized") + ""
                 + "\n - act.stamp = " + (stamp_is_initialized ? ("[" + (stamp == null ? null : stamp.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
