// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the labtest table.
 */
public class LabtestManager
// extends+ 

// extends- 
{

    /**
     * Column labtestid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LABTESTID = 0;
    public static final int TYPE_LABTESTID = Types.INTEGER;
    public static final String NAME_LABTESTID = "labtestid";

    /**
     * Column code of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CODE = 1;
    public static final int TYPE_CODE = Types.VARCHAR;
    public static final String NAME_CODE = "code";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 2;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column abbreviation of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ABBREVIATION = 3;
    public static final int TYPE_ABBREVIATION = Types.VARCHAR;
    public static final String NAME_ABBREVIATION = "abbreviation";

    /**
     * Column grp of type Types.BIT mapped to Boolean.
     */
    public static final int ID_GRP = 4;
    public static final int TYPE_GRP = Types.BIT;
    public static final String NAME_GRP = "grp";

    /**
     * Column ctr of type Types.BIT mapped to Boolean.
     */
    public static final int ID_CTR = 5;
    public static final int TYPE_CTR = Types.BIT;
    public static final String NAME_CTR = "ctr";

    /**
     * Column restypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RESTYPEID = 6;
    public static final int TYPE_RESTYPEID = Types.INTEGER;
    public static final String NAME_RESTYPEID = "restypeid";

    /**
     * Column unitsid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_UNITSID = 7;
    public static final int TYPE_UNITSID = Types.INTEGER;
    public static final String NAME_UNITSID = "unitsid";

    /**
     * Column testcategoryid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TESTCATEGORYID = 8;
    public static final int TYPE_TESTCATEGORYID = Types.INTEGER;
    public static final String NAME_TESTCATEGORYID = "testcategoryid";

    /**
     * Column description of type Types.VARCHAR mapped to String.
     */
    public static final int ID_DESCRIPTION = 9;
    public static final int TYPE_DESCRIPTION = Types.VARCHAR;
    public static final String NAME_DESCRIPTION = "description";

    /**
     * Column companyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMPANYID = 10;
    public static final int TYPE_COMPANYID = Types.INTEGER;
    public static final String NAME_COMPANYID = "companyid";

    /**
     * Column normmin of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_NORMMIN = 11;
    public static final int TYPE_NORMMIN = Types.DOUBLE;
    public static final String NAME_NORMMIN = "normmin";

    /**
     * Column normmax of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_NORMMAX = 12;
    public static final int TYPE_NORMMAX = Types.DOUBLE;
    public static final String NAME_NORMMAX = "normmax";

    /**
     * Column tnorm of type Types.VARCHAR mapped to String.
     */
    public static final int ID_TNORM = 13;
    public static final int TYPE_TNORM = Types.VARCHAR;
    public static final String NAME_TNORM = "tnorm";

    /**
     * Column bnormval1 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BNORMVAL1 = 14;
    public static final int TYPE_BNORMVAL1 = Types.VARCHAR;
    public static final String NAME_BNORMVAL1 = "bnormval1";

    /**
     * Column bnormval2 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BNORMVAL2 = 15;
    public static final int TYPE_BNORMVAL2 = Types.VARCHAR;
    public static final String NAME_BNORMVAL2 = "bnormval2";

    /**
     * Column controlprocedure of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CONTROLPROCEDURE = 16;
    public static final int TYPE_CONTROLPROCEDURE = Types.VARCHAR;
    public static final String NAME_CONTROLPROCEDURE = "controlprocedure";

    /**
     * Column pos of type Types.VARCHAR mapped to String.
     */
    public static final int ID_POS = 17;
    public static final int TYPE_POS = Types.VARCHAR;
    public static final String NAME_POS = "pos";

    /**
     * Column neg of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NEG = 18;
    public static final int TYPE_NEG = Types.VARCHAR;
    public static final String NAME_NEG = "neg";

    /**
     * Column anslist of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ANSLIST = 19;
    public static final int TYPE_ANSLIST = Types.VARCHAR;
    public static final String NAME_ANSLIST = "anslist";


    private static final String TABLE_NAME = "labtest";

    /**
     * Create an array of type string containing all the fields of the labtest table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "labtest.labtestid"
        ,"labtest.code"
        ,"labtest.name"
        ,"labtest.abbreviation"
        ,"labtest.grp"
        ,"labtest.ctr"
        ,"labtest.restypeid"
        ,"labtest.unitsid"
        ,"labtest.testcategoryid"
        ,"labtest.description"
        ,"labtest.companyid"
        ,"labtest.normmin"
        ,"labtest.normmax"
        ,"labtest.tnorm"
        ,"labtest.bnormval1"
        ,"labtest.bnormval2"
        ,"labtest.controlprocedure"
        ,"labtest.pos"
        ,"labtest.neg"
        ,"labtest.anslist"
    };

    /**
     * Field that contains the comma separated fields of the labtest table.
     */
    private static final String ALL_FIELDS = "labtest.labtestid"
                            + ",labtest.code"
                            + ",labtest.name"
                            + ",labtest.abbreviation"
                            + ",labtest.grp"
                            + ",labtest.ctr"
                            + ",labtest.restypeid"
                            + ",labtest.unitsid"
                            + ",labtest.testcategoryid"
                            + ",labtest.description"
                            + ",labtest.companyid"
                            + ",labtest.normmin"
                            + ",labtest.normmax"
                            + ",labtest.tnorm"
                            + ",labtest.bnormval1"
                            + ",labtest.bnormval2"
                            + ",labtest.controlprocedure"
                            + ",labtest.pos"
                            + ",labtest.neg"
                            + ",labtest.anslist";

    private static LabtestManager singleton = new LabtestManager();

    /**
     * Get the LabtestManager singleton.
     *
     * @return LabtestManager 
     */
    synchronized public static LabtestManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own LabtestManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(LabtestManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new LabtestBean instance.
     *
     * @return the new LabtestBean 
     */
    public LabtestBean createLabtestBean()
    {
        return new LabtestBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a LabtestBean from the labtest using its key fields.
     *
     * @return a unique LabtestBean 
     */
    //12
    public LabtestBean loadByPrimaryKey(Integer labtestid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtest WHERE labtest.labtestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, labtestid);
            LabtestBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer labtestid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from labtest WHERE labtest.labtestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, labtestid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads LabtestBean array from the labtest table using its companyid field.
     *
     * @return an array of LabtestBean 
     */
    // LOAD BY IMPORTED KEY
    public LabtestBean[] loadByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtest WHERE companyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the labtest table by companyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM labtest WHERE companyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads LabtestBean array from the labtest table using its restypeid field.
     *
     * @return an array of LabtestBean 
     */
    // LOAD BY IMPORTED KEY
    public LabtestBean[] loadByRestypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtest WHERE restypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the labtest table by restypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRestypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM labtest WHERE restypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads LabtestBean array from the labtest table using its testcategoryid field.
     *
     * @return an array of LabtestBean 
     */
    // LOAD BY IMPORTED KEY
    public LabtestBean[] loadByTestcategoryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtest WHERE testcategoryid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the labtest table by testcategoryid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByTestcategoryid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM labtest WHERE testcategoryid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads LabtestBean array from the labtest table using its unitsid field.
     *
     * @return an array of LabtestBean 
     */
    // LOAD BY IMPORTED KEY
    public LabtestBean[] loadByUnitsid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtest WHERE unitsid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the labtest table by unitsid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByUnitsid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM labtest WHERE unitsid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CompanyBean object from the labtest.companyid field.
     *
     * @param pObject the LabtestBean 
     * @return the associated CompanyBean pObject
     */
    // GET IMPORTED
    public CompanyBean getCompanyBean(LabtestBean pObject) throws SQLException
    {
        CompanyBean other = CompanyManager.getInstance().createCompanyBean();
        other.setCompanyid(pObject.getCompanyid());
        return CompanyManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the LabtestBean object to the CompanyBean object.
     *
     * @param pObject the LabtestBean object to use
     * @param pObjectToBeSet the CompanyBean object to associate to the LabtestBean 
     * @return the associated CompanyBean pObject
     */
    // SET IMPORTED
    public LabtestBean setCompanyBean(LabtestBean pObject,CompanyBean pObjectToBeSet)
    {
        pObject.setCompanyid(pObjectToBeSet.getCompanyid());
        return pObject;
    }

    /**
     * Retrieves the RestypeBean object from the labtest.restypeid field.
     *
     * @param pObject the LabtestBean 
     * @return the associated RestypeBean pObject
     */
    // GET IMPORTED
    public RestypeBean getRestypeBean(LabtestBean pObject) throws SQLException
    {
        RestypeBean other = RestypeManager.getInstance().createRestypeBean();
        other.setRestypeid(pObject.getRestypeid());
        return RestypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the LabtestBean object to the RestypeBean object.
     *
     * @param pObject the LabtestBean object to use
     * @param pObjectToBeSet the RestypeBean object to associate to the LabtestBean 
     * @return the associated RestypeBean pObject
     */
    // SET IMPORTED
    public LabtestBean setRestypeBean(LabtestBean pObject,RestypeBean pObjectToBeSet)
    {
        pObject.setRestypeid(pObjectToBeSet.getRestypeid());
        return pObject;
    }

    /**
     * Retrieves the TestcategoryBean object from the labtest.testcategoryid field.
     *
     * @param pObject the LabtestBean 
     * @return the associated TestcategoryBean pObject
     */
    // GET IMPORTED
    public TestcategoryBean getTestcategoryBean(LabtestBean pObject) throws SQLException
    {
        TestcategoryBean other = TestcategoryManager.getInstance().createTestcategoryBean();
        other.setTestcategoryid(pObject.getTestcategoryid());
        return TestcategoryManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the LabtestBean object to the TestcategoryBean object.
     *
     * @param pObject the LabtestBean object to use
     * @param pObjectToBeSet the TestcategoryBean object to associate to the LabtestBean 
     * @return the associated TestcategoryBean pObject
     */
    // SET IMPORTED
    public LabtestBean setTestcategoryBean(LabtestBean pObject,TestcategoryBean pObjectToBeSet)
    {
        pObject.setTestcategoryid(pObjectToBeSet.getTestcategoryid());
        return pObject;
    }

    /**
     * Retrieves the UnitsBean object from the labtest.unitsid field.
     *
     * @param pObject the LabtestBean 
     * @return the associated UnitsBean pObject
     */
    // GET IMPORTED
    public UnitsBean getUnitsBean(LabtestBean pObject) throws SQLException
    {
        UnitsBean other = UnitsManager.getInstance().createUnitsBean();
        other.setUnitsid(pObject.getUnitsid());
        return UnitsManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the LabtestBean object to the UnitsBean object.
     *
     * @param pObject the LabtestBean object to use
     * @param pObjectToBeSet the UnitsBean object to associate to the LabtestBean 
     * @return the associated UnitsBean pObject
     */
    // SET IMPORTED
    public LabtestBean setUnitsBean(LabtestBean pObject,UnitsBean pObjectToBeSet)
    {
        pObject.setUnitsid(pObjectToBeSet.getUnitsid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from labtest.
     *
     * @return an array of LabtestManager pObject
     */
    //38
    public LabtestBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM labtest",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of LabtestBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting LabtestBean table 
     */
    //49
    public LabtestBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of LabtestBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting LabtestBean table 
     */
    //51
    public LabtestBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from labtest " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from labtest ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (LabtestBean[])v.toArray(new LabtestBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from labtest table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the labtest table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM labtest " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the LabtestBean pObject into the database.
     *
     * @param pObject the LabtestBean pObject to be saved
     */
    //100
    public LabtestBean save(LabtestBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isLabtestidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('labtestid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setLabtestid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into labtest (");
    
                if (pObject.isLabtestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestid");
                    _dirtyCount++;
                }

                if (pObject.isCodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("code");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isAbbreviationModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("abbreviation");
                    _dirtyCount++;
                }

                if (pObject.isGrpModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("grp");
                    _dirtyCount++;
                }

                if (pObject.isCtrModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ctr");
                    _dirtyCount++;
                }

                if (pObject.isRestypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("restypeid");
                    _dirtyCount++;
                }

                if (pObject.isUnitsidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("unitsid");
                    _dirtyCount++;
                }

                if (pObject.isTestcategoryidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("testcategoryid");
                    _dirtyCount++;
                }

                if (pObject.isDescriptionModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("description");
                    _dirtyCount++;
                }

                if (pObject.isCompanyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyid");
                    _dirtyCount++;
                }

                if (pObject.isNormminModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("normmin");
                    _dirtyCount++;
                }

                if (pObject.isNormmaxModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("normmax");
                    _dirtyCount++;
                }

                if (pObject.isTnormModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tnorm");
                    _dirtyCount++;
                }

                if (pObject.isBnormval1Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bnormval1");
                    _dirtyCount++;
                }

                if (pObject.isBnormval2Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bnormval2");
                    _dirtyCount++;
                }

                if (pObject.isControlprocedureModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("controlprocedure");
                    _dirtyCount++;
                }

                if (pObject.isPosModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("pos");
                    _dirtyCount++;
                }

                if (pObject.isNegModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("neg");
                    _dirtyCount++;
                }

                if (pObject.isAnslistModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("anslist");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAbbreviationModified()) {
                    ps.setString(++_dirtyCount, pObject.getAbbreviation());
                }
    
                if (pObject.isGrpModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGrp());
                }
    
                if (pObject.isCtrModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCtr());
                }
    
                if (pObject.isRestypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRestypeid());
                }
    
                if (pObject.isUnitsidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getUnitsid());
                }
    
                if (pObject.isTestcategoryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTestcategoryid());
                }
    
                if (pObject.isDescriptionModified()) {
                    ps.setString(++_dirtyCount, pObject.getDescription());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isNormminModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmin());
                }
    
                if (pObject.isNormmaxModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmax());
                }
    
                if (pObject.isTnormModified()) {
                    ps.setString(++_dirtyCount, pObject.getTnorm());
                }
    
                if (pObject.isBnormval1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getBnormval1());
                }
    
                if (pObject.isBnormval2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getBnormval2());
                }
    
                if (pObject.isControlprocedureModified()) {
                    ps.setString(++_dirtyCount, pObject.getControlprocedure());
                }
    
                if (pObject.isPosModified()) {
                    ps.setString(++_dirtyCount, pObject.getPos());
                }
    
                if (pObject.isNegModified()) {
                    ps.setString(++_dirtyCount, pObject.getNeg());
                }
    
                if (pObject.isAnslistModified()) {
                    ps.setString(++_dirtyCount, pObject.getAnslist());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE labtest SET ");
                boolean useComma=false;

                if (pObject.isLabtestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestid").append("=?");
                }

                if (pObject.isCodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("code").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isAbbreviationModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("abbreviation").append("=?");
                }

                if (pObject.isGrpModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("grp").append("=?");
                }

                if (pObject.isCtrModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ctr").append("=?");
                }

                if (pObject.isRestypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("restypeid").append("=?");
                }

                if (pObject.isUnitsidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("unitsid").append("=?");
                }

                if (pObject.isTestcategoryidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("testcategoryid").append("=?");
                }

                if (pObject.isDescriptionModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("description").append("=?");
                }

                if (pObject.isCompanyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyid").append("=?");
                }

                if (pObject.isNormminModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("normmin").append("=?");
                }

                if (pObject.isNormmaxModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("normmax").append("=?");
                }

                if (pObject.isTnormModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tnorm").append("=?");
                }

                if (pObject.isBnormval1Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bnormval1").append("=?");
                }

                if (pObject.isBnormval2Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bnormval2").append("=?");
                }

                if (pObject.isControlprocedureModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("controlprocedure").append("=?");
                }

                if (pObject.isPosModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("pos").append("=?");
                }

                if (pObject.isNegModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("neg").append("=?");
                }

                if (pObject.isAnslistModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("anslist").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("labtest.labtestid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isLabtestidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }

                if (pObject.isCodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getCode());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isAbbreviationModified()) {
                      ps.setString(++_dirtyCount, pObject.getAbbreviation());
                }

                if (pObject.isGrpModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getGrp());
                }

                if (pObject.isCtrModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getCtr());
                }

                if (pObject.isRestypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRestypeid());
                }

                if (pObject.isUnitsidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getUnitsid());
                }

                if (pObject.isTestcategoryidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTestcategoryid());
                }

                if (pObject.isDescriptionModified()) {
                      ps.setString(++_dirtyCount, pObject.getDescription());
                }

                if (pObject.isCompanyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }

                if (pObject.isNormminModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmin());
                }

                if (pObject.isNormmaxModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmax());
                }

                if (pObject.isTnormModified()) {
                      ps.setString(++_dirtyCount, pObject.getTnorm());
                }

                if (pObject.isBnormval1Modified()) {
                      ps.setString(++_dirtyCount, pObject.getBnormval1());
                }

                if (pObject.isBnormval2Modified()) {
                      ps.setString(++_dirtyCount, pObject.getBnormval2());
                }

                if (pObject.isControlprocedureModified()) {
                      ps.setString(++_dirtyCount, pObject.getControlprocedure());
                }

                if (pObject.isPosModified()) {
                      ps.setString(++_dirtyCount, pObject.getPos());
                }

                if (pObject.isNegModified()) {
                      ps.setString(++_dirtyCount, pObject.getNeg());
                }

                if (pObject.isAnslistModified()) {
                      ps.setString(++_dirtyCount, pObject.getAnslist());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of LabtestBean pObjects into the database.
     *
     * @param pObjects the LabtestBean pObject table to be saved
     * @return the saved LabtestBean array.
     */
    //65
    public LabtestBean[] save(LabtestBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique LabtestBean pObject from a template one giving a c
     *
     * @param pObject the LabtestBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public LabtestBean loadUniqueUsingTemplate(LabtestBean pObject) throws SQLException
    {
         LabtestBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of LabtestBean from a template one.
     *
     * @param pObject the LabtestBean template to look for
     * @return all the LabtestBean matching the template
     */
    //88
    public LabtestBean[] loadUsingTemplate(LabtestBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from labtest WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isLabtestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
             }
    
             if (pObject.isCodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isAbbreviationModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("abbreviation= ?");
             }
    
             if (pObject.isGrpModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("grp= ?");
             }
    
             if (pObject.isCtrModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ctr= ?");
             }
    
             if (pObject.isRestypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("restypeid= ?");
             }
    
             if (pObject.isUnitsidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("unitsid= ?");
             }
    
             if (pObject.isTestcategoryidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testcategoryid= ?");
             }
    
             if (pObject.isDescriptionModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("description= ?");
             }
    
             if (pObject.isCompanyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
             }
    
             if (pObject.isNormminModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("normmin= ?");
             }
    
             if (pObject.isNormmaxModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("normmax= ?");
             }
    
             if (pObject.isTnormModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tnorm= ?");
             }
    
             if (pObject.isBnormval1Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bnormval1= ?");
             }
    
             if (pObject.isBnormval2Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bnormval2= ?");
             }
    
             if (pObject.isControlprocedureModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("controlprocedure= ?");
             }
    
             if (pObject.isPosModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("pos= ?");
             }
    
             if (pObject.isNegModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("neg= ?");
             }
    
             if (pObject.isAnslistModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("anslist= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isLabtestidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
             }
    
             if (pObject.isCodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getCode());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isAbbreviationModified()) {
                 ps.setString(++_dirtyCount, pObject.getAbbreviation());
             }
    
             if (pObject.isGrpModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getGrp());
             }
    
             if (pObject.isCtrModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getCtr());
             }
    
             if (pObject.isRestypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRestypeid());
             }
    
             if (pObject.isUnitsidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getUnitsid());
             }
    
             if (pObject.isTestcategoryidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTestcategoryid());
             }
    
             if (pObject.isDescriptionModified()) {
                 ps.setString(++_dirtyCount, pObject.getDescription());
             }
    
             if (pObject.isCompanyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
             }
    
             if (pObject.isNormminModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmin());
             }
    
             if (pObject.isNormmaxModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmax());
             }
    
             if (pObject.isTnormModified()) {
                 ps.setString(++_dirtyCount, pObject.getTnorm());
             }
    
             if (pObject.isBnormval1Modified()) {
                 ps.setString(++_dirtyCount, pObject.getBnormval1());
             }
    
             if (pObject.isBnormval2Modified()) {
                 ps.setString(++_dirtyCount, pObject.getBnormval2());
             }
    
             if (pObject.isControlprocedureModified()) {
                 ps.setString(++_dirtyCount, pObject.getControlprocedure());
             }
    
             if (pObject.isPosModified()) {
                 ps.setString(++_dirtyCount, pObject.getPos());
             }
    
             if (pObject.isNegModified()) {
                 ps.setString(++_dirtyCount, pObject.getNeg());
             }
    
             if (pObject.isAnslistModified()) {
                 ps.setString(++_dirtyCount, pObject.getAnslist());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a LabtestBean template.
     *
     * @param pObject the LabtestBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(LabtestBean pObject) throws SQLException
    {
        if (pObject.isLabtestidInitialized())
            return deleteByPrimaryKey(pObject.getLabtestid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM labtest WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isLabtestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("code").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAbbreviationInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("abbreviation").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isGrpInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("grp").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCtrInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ctr").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRestypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("restypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isUnitsidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("unitsid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTestcategoryidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("testcategoryid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDescriptionInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("description").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNormminInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("normmin").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNormmaxInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("normmax").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTnormInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tnorm").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBnormval1Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bnormval1").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBnormval2Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bnormval2").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isControlprocedureInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("controlprocedure").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPosInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("pos").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNegInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("neg").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAnslistInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("anslist").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isLabtestidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
            }
    
            if (pObject.isCodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCode());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isAbbreviationInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAbbreviation());
            }
    
            if (pObject.isGrpInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getGrp());
            }
    
            if (pObject.isCtrInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getCtr());
            }
    
            if (pObject.isRestypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRestypeid());
            }
    
            if (pObject.isUnitsidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getUnitsid());
            }
    
            if (pObject.isTestcategoryidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTestcategoryid());
            }
    
            if (pObject.isDescriptionInitialized()) {
                ps.setString(++_dirtyCount, pObject.getDescription());
            }
    
            if (pObject.isCompanyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
            }
    
            if (pObject.isNormminInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmin());
            }
    
            if (pObject.isNormmaxInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmax());
            }
    
            if (pObject.isTnormInitialized()) {
                ps.setString(++_dirtyCount, pObject.getTnorm());
            }
    
            if (pObject.isBnormval1Initialized()) {
                ps.setString(++_dirtyCount, pObject.getBnormval1());
            }
    
            if (pObject.isBnormval2Initialized()) {
                ps.setString(++_dirtyCount, pObject.getBnormval2());
            }
    
            if (pObject.isControlprocedureInitialized()) {
                ps.setString(++_dirtyCount, pObject.getControlprocedure());
            }
    
            if (pObject.isPosInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPos());
            }
    
            if (pObject.isNegInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNeg());
            }
    
            if (pObject.isAnslistInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAnslist());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ContractBean using the relation table Contractanalysis given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaContractanalysis(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.labtestid = ?"
                         + " AND contractanalysis.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Contractanalysis given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaContractanalysis(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.labtestid = ?"
                         + " AND contractanalysis.institutionid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Contractanalysis given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaContractanalysis(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.labtestid = ?"
                         + " AND contractanalysis.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DeviceBean using the relation table Devicelabtest given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of DeviceBean 
     */
    // MANY TO MANY
    public DeviceBean[] loadDeviceViaDevicelabtest(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        device,devicelabtest"
                         + " WHERE "    
                         + "     devicelabtest.labtestid = ?"
                         + " AND devicelabtest.deviceid = device.deviceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return DeviceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RestypeBean using the relation table Extraparam given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of RestypeBean 
     */
    // MANY TO MANY
    public RestypeBean[] loadRestypeViaExtraparam(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        restype,extraparam"
                         + " WHERE "    
                         + "     extraparam.labtestid = ?"
                         + " AND extraparam.restypeid = restype.restypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return RestypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Extraparam given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaExtraparam(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,extraparam"
                         + " WHERE "    
                         + "     extraparam.labtestid = ?"
                         + " AND extraparam.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DocumentBean using the relation table Labtestcontroldocument given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of DocumentBean 
     */
    // MANY TO MANY
    public DocumentBean[] loadDocumentViaLabtestcontroldocument(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        document,labtestcontroldocument"
                         + " WHERE "    
                         + "     labtestcontroldocument.labtestid = ?"
                         + " AND labtestcontroldocument.documentid = document.documentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return DocumentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ReportformBean using the relation table Labtestform given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of ReportformBean 
     */
    // MANY TO MANY
    public ReportformBean[] loadReportformViaLabtestform(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        reportform,labtestform"
                         + " WHERE "    
                         + "     labtestform.labtestid = ?"
                         + " AND labtestform.reportformid = reportform.reportformid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return ReportformManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Labtestinstitution given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaLabtestinstitution(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,labtestinstitution"
                         + " WHERE "    
                         + "     labtestinstitution.labtestid = ?"
                         + " AND labtestinstitution.institutionid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Labtestparams given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaLabtestparams(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,labtestparams"
                         + " WHERE "    
                         + "     labtestparams.labtestid = ?"
                         + " AND labtestparams.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StandardBean using the relation table Labtestparams given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of StandardBean 
     */
    // MANY TO MANY
    public StandardBean[] loadStandardViaLabtestparams(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        standard,labtestparams"
                         + " WHERE "    
                         + "     labtestparams.labtestid = ?"
                         + " AND labtestparams.standardid = standard.standardid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return StandardManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ProductBean using the relation table Labtestprod given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of ProductBean 
     */
    // MANY TO MANY
    public ProductBean[] loadProductViaLabtestprod(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        product,labtestprod"
                         + " WHERE "    
                         + "     labtestprod.labtestid = ?"
                         + " AND labtestprod.productid = product.productid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return ProductManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Labtestsampletype given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaLabtestsampletype(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,labtestsampletype"
                         + " WHERE "    
                         + "     labtestsampletype.labtestid = ?"
                         + " AND labtestsampletype.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StandardBean using the relation table Labteststandard given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of StandardBean 
     */
    // MANY TO MANY
    public StandardBean[] loadStandardViaLabteststandard(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        standard,labteststandard"
                         + " WHERE "    
                         + "     labteststandard.labtestid = ?"
                         + " AND labteststandard.standardid = standard.standardid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return StandardManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampletypeBean using the relation table Sampleboxreseach given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of ContractsampletypeBean 
     */
    // MANY TO MANY
    public ContractsampletypeBean[] loadContractsampletypeViaSampleboxreseach(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampletype,sampleboxreseach"
                         + " WHERE "    
                         + "     sampleboxreseach.labtestid = ?"
                         + " AND sampleboxreseach.contractsampletypeid = contractsampletype.contractsampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return ContractsampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Sampleitemreseach given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaSampleitemreseach(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.labtestid = ?"
                         + " AND sampleitemreseach.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampleitemBean using the relation table Sampleitemreseach given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of ContractsampleitemBean 
     */
    // MANY TO MANY
    public ContractsampleitemBean[] loadContractsampleitemViaSampleitemreseach(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampleitem,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.labtestid = ?"
                         + " AND sampleitemreseach.contractsampleitemid = contractsampleitem.contractsampleitemid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return ContractsampleitemManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DeviceBean using the relation table Sampleitemreseach given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of DeviceBean 
     */
    // MANY TO MANY
    public DeviceBean[] loadDeviceViaSampleitemreseach(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        device,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.labtestid = ?"
                         + " AND sampleitemreseach.deviceid = device.deviceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return DeviceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StandardBean using the relation table Sampleitemreseach given a LabtestBean object.
     *
     * @param pObject the LabtestBean pObject to be used
     * @return an array of StandardBean 
     */
    // MANY TO MANY
    public StandardBean[] loadStandardViaSampleitemreseach(LabtestBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        standard,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.labtestid = ?"
                         + " AND sampleitemreseach.standardid = standard.standardid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getLabtestid());
             return StandardManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table labtest.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table labtest with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from labtest " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table labtest with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific LabtestBean pObject given a c
     *
     * @param pObject the LabtestBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(LabtestBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from labtest WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isLabtestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
                }
    
                if (pObject.isCodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isAbbreviationModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("abbreviation= ?");
                }
    
                if (pObject.isGrpModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("grp= ?");
                }
    
                if (pObject.isCtrModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ctr= ?");
                }
    
                if (pObject.isRestypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("restypeid= ?");
                }
    
                if (pObject.isUnitsidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("unitsid= ?");
                }
    
                if (pObject.isTestcategoryidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("testcategoryid= ?");
                }
    
                if (pObject.isDescriptionModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("description= ?");
                }
    
                if (pObject.isCompanyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
                }
    
                if (pObject.isNormminModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("normmin= ?");
                }
    
                if (pObject.isNormmaxModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("normmax= ?");
                }
    
                if (pObject.isTnormModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tnorm= ?");
                }
    
                if (pObject.isBnormval1Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bnormval1= ?");
                }
    
                if (pObject.isBnormval2Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bnormval2= ?");
                }
    
                if (pObject.isControlprocedureModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("controlprocedure= ?");
                }
    
                if (pObject.isPosModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("pos= ?");
                }
    
                if (pObject.isNegModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("neg= ?");
                }
    
                if (pObject.isAnslistModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("anslist= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isAbbreviationModified()) {
                    ps.setString(++_dirtyCount, pObject.getAbbreviation());
                }
    
                if (pObject.isGrpModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getGrp());
                }
    
                if (pObject.isCtrModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getCtr());
                }
    
                if (pObject.isRestypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRestypeid());
                }
    
                if (pObject.isUnitsidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getUnitsid());
                }
    
                if (pObject.isTestcategoryidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTestcategoryid());
                }
    
                if (pObject.isDescriptionModified()) {
                    ps.setString(++_dirtyCount, pObject.getDescription());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isNormminModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmin());
                }
    
                if (pObject.isNormmaxModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getNormmax());
                }
    
                if (pObject.isTnormModified()) {
                    ps.setString(++_dirtyCount, pObject.getTnorm());
                }
    
                if (pObject.isBnormval1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getBnormval1());
                }
    
                if (pObject.isBnormval2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getBnormval2());
                }
    
                if (pObject.isControlprocedureModified()) {
                    ps.setString(++_dirtyCount, pObject.getControlprocedure());
                }
    
                if (pObject.isPosModified()) {
                    ps.setString(++_dirtyCount, pObject.getPos());
                }
    
                if (pObject.isNegModified()) {
                    ps.setString(++_dirtyCount, pObject.getNeg());
                }
    
                if (pObject.isAnslistModified()) {
                    ps.setString(++_dirtyCount, pObject.getAnslist());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the labtest on a LabtestBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting LabtestBean pObject
     */
    //72
    public LabtestBean decodeRow(ResultSet rs) throws SQLException
    {
        LabtestBean pObject = createLabtestBean();
        pObject.setLabtestid(Manager.getInteger(rs, 1));
        pObject.setCode(rs.getString(2));
        pObject.setName(rs.getString(3));
        pObject.setAbbreviation(rs.getString(4));
        pObject.setGrp(Manager.getBoolean(rs, 5));
        pObject.setCtr(Manager.getBoolean(rs, 6));
        pObject.setRestypeid(Manager.getInteger(rs, 7));
        pObject.setUnitsid(Manager.getInteger(rs, 8));
        pObject.setTestcategoryid(Manager.getInteger(rs, 9));
        pObject.setDescription(rs.getString(10));
        pObject.setCompanyid(Manager.getInteger(rs, 11));
        pObject.setNormmin(Manager.getDouble(rs, 12));
        pObject.setNormmax(Manager.getDouble(rs, 13));
        pObject.setTnorm(rs.getString(14));
        pObject.setBnormval1(rs.getString(15));
        pObject.setBnormval2(rs.getString(16));
        pObject.setControlprocedure(rs.getString(17));
        pObject.setPos(rs.getString(18));
        pObject.setNeg(rs.getString(19));
        pObject.setAnslist(rs.getString(20));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the labtest table on a LabtestBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting LabtestBean pObject
     */
    //73
    public LabtestBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        LabtestBean pObject = createLabtestBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_LABTESTID:
                    ++pos;
                    pObject.setLabtestid(Manager.getInteger(rs, pos));
                    break;
                case ID_CODE:
                    ++pos;
                    pObject.setCode(rs.getString(pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_ABBREVIATION:
                    ++pos;
                    pObject.setAbbreviation(rs.getString(pos));
                    break;
                case ID_GRP:
                    ++pos;
                    pObject.setGrp(Manager.getBoolean(rs, pos));
                    break;
                case ID_CTR:
                    ++pos;
                    pObject.setCtr(Manager.getBoolean(rs, pos));
                    break;
                case ID_RESTYPEID:
                    ++pos;
                    pObject.setRestypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_UNITSID:
                    ++pos;
                    pObject.setUnitsid(Manager.getInteger(rs, pos));
                    break;
                case ID_TESTCATEGORYID:
                    ++pos;
                    pObject.setTestcategoryid(Manager.getInteger(rs, pos));
                    break;
                case ID_DESCRIPTION:
                    ++pos;
                    pObject.setDescription(rs.getString(pos));
                    break;
                case ID_COMPANYID:
                    ++pos;
                    pObject.setCompanyid(Manager.getInteger(rs, pos));
                    break;
                case ID_NORMMIN:
                    ++pos;
                    pObject.setNormmin(Manager.getDouble(rs, pos));
                    break;
                case ID_NORMMAX:
                    ++pos;
                    pObject.setNormmax(Manager.getDouble(rs, pos));
                    break;
                case ID_TNORM:
                    ++pos;
                    pObject.setTnorm(rs.getString(pos));
                    break;
                case ID_BNORMVAL1:
                    ++pos;
                    pObject.setBnormval1(rs.getString(pos));
                    break;
                case ID_BNORMVAL2:
                    ++pos;
                    pObject.setBnormval2(rs.getString(pos));
                    break;
                case ID_CONTROLPROCEDURE:
                    ++pos;
                    pObject.setControlprocedure(rs.getString(pos));
                    break;
                case ID_POS:
                    ++pos;
                    pObject.setPos(rs.getString(pos));
                    break;
                case ID_NEG:
                    ++pos;
                    pObject.setNeg(rs.getString(pos));
                    break;
                case ID_ANSLIST:
                    ++pos;
                    pObject.setAnslist(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of LabtestBean 
     */
    //41
    public LabtestBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of LabtestBean 
     */
    public LabtestBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (LabtestBean[])v.toArray(new LabtestBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private LabtestListener listener = null;

    /**
     * Registers a unique LabtestListener listener.
     */
    //66.5
    public void registerListener(LabtestListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the LabtestBean pObject.
     *
     * @param pObject the LabtestBean pObject to be saved
     */
    //67
    void beforeInsert(LabtestBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the LabtestBean pObject.
     *
     * @param pObject the LabtestBean pObject to be saved
     */
    //68
    void afterInsert(LabtestBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the LabtestBean pObject.
     *
     * @param pObject the LabtestBean pObject to be updated
     */
    //69
    void beforeUpdate(LabtestBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the LabtestBean pObject.
     *
     * @param pObject the LabtestBean pObject to be updated
     */
    //70
    void afterUpdate(LabtestBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
