// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the VF0052016GBean objects.
 */
public class VF0052016GComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for VF0052016GComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VF0052016GComparator(VF0052016GManager.SAMPLEITEMRESEACHID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VF0052016GManager.ID_SAMPLEITEMRESEACHID
     *   <li>VF0052016GManager.ID_INSTITUTIONID
     *   <li>VF0052016GManager.ID_LABNAME
     *   <li>VF0052016GManager.ID_SAMPLETYPE
     *   <li>VF0052016GManager.ID_OUTDATE
     *   <li>VF0052016GManager.ID_NUM
     *   <li>VF0052016GManager.ID_REGDATE
     *   <li>VF0052016GManager.ID_SAMPLEAMOUNT
     *   <li>VF0052016GManager.ID_STAMP
     *   <li>VF0052016GManager.ID_TESTNAME
     * </ul>
     */
    public VF0052016GComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for VF0052016GComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new VF0052016GComparator(VF0052016GManager.SAMPLEITEMRESEACHID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>VF0052016GManager.ID_SAMPLEITEMRESEACHID
     *   <li>VF0052016GManager.ID_INSTITUTIONID
     *   <li>VF0052016GManager.ID_LABNAME
     *   <li>VF0052016GManager.ID_SAMPLETYPE
     *   <li>VF0052016GManager.ID_OUTDATE
     *   <li>VF0052016GManager.ID_NUM
     *   <li>VF0052016GManager.ID_REGDATE
     *   <li>VF0052016GManager.ID_SAMPLEAMOUNT
     *   <li>VF0052016GManager.ID_STAMP
     *   <li>VF0052016GManager.ID_TESTNAME
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public VF0052016GComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        VF0052016GBean b1 = (VF0052016GBean)pObj1;
        VF0052016GBean b2 = (VF0052016GBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case VF0052016GManager.ID_SAMPLEITEMRESEACHID:
                if (b1.getSampleitemreseachid() == null && b2.getSampleitemreseachid() != null) {
                    iReturn = -1;
                } else if (b1.getSampleitemreseachid() == null && b2.getSampleitemreseachid() == null) {
                    iReturn = 0;
                } else if (b1.getSampleitemreseachid() != null && b2.getSampleitemreseachid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSampleitemreseachid().compareTo(b2.getSampleitemreseachid());
                }
                break;
            case VF0052016GManager.ID_INSTITUTIONID:
                if (b1.getInstitutionid() == null && b2.getInstitutionid() != null) {
                    iReturn = -1;
                } else if (b1.getInstitutionid() == null && b2.getInstitutionid() == null) {
                    iReturn = 0;
                } else if (b1.getInstitutionid() != null && b2.getInstitutionid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInstitutionid().compareTo(b2.getInstitutionid());
                }
                break;
            case VF0052016GManager.ID_LABNAME:
                if (b1.getLabname() == null && b2.getLabname() != null) {
                    iReturn = -1;
                } else if (b1.getLabname() == null && b2.getLabname() == null) {
                    iReturn = 0;
                } else if (b1.getLabname() != null && b2.getLabname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getLabname().compareTo(b2.getLabname());
                }
                break;
            case VF0052016GManager.ID_SAMPLETYPE:
                if (b1.getSampletype() == null && b2.getSampletype() != null) {
                    iReturn = -1;
                } else if (b1.getSampletype() == null && b2.getSampletype() == null) {
                    iReturn = 0;
                } else if (b1.getSampletype() != null && b2.getSampletype() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSampletype().compareTo(b2.getSampletype());
                }
                break;
            case VF0052016GManager.ID_OUTDATE:
                if (b1.getOutdate() == null && b2.getOutdate() != null) {
                    iReturn = -1;
                } else if (b1.getOutdate() == null && b2.getOutdate() == null) {
                    iReturn = 0;
                } else if (b1.getOutdate() != null && b2.getOutdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getOutdate().compareTo(b2.getOutdate());
                }
                break;
            case VF0052016GManager.ID_NUM:
                if (b1.getNum() == null && b2.getNum() != null) {
                    iReturn = -1;
                } else if (b1.getNum() == null && b2.getNum() == null) {
                    iReturn = 0;
                } else if (b1.getNum() != null && b2.getNum() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getNum().compareTo(b2.getNum());
                }
                break;
            case VF0052016GManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case VF0052016GManager.ID_SAMPLEAMOUNT:
                if (b1.getSampleamount() == null && b2.getSampleamount() != null) {
                    iReturn = -1;
                } else if (b1.getSampleamount() == null && b2.getSampleamount() == null) {
                    iReturn = 0;
                } else if (b1.getSampleamount() != null && b2.getSampleamount() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getSampleamount().compareTo(b2.getSampleamount());
                }
                break;
            case VF0052016GManager.ID_STAMP:
                if (b1.getStamp() == null && b2.getStamp() != null) {
                    iReturn = -1;
                } else if (b1.getStamp() == null && b2.getStamp() == null) {
                    iReturn = 0;
                } else if (b1.getStamp() != null && b2.getStamp() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getStamp().compareTo(b2.getStamp());
                }
                break;
            case VF0052016GManager.ID_TESTNAME:
                if (b1.getTestname() == null && b2.getTestname() != null) {
                    iReturn = -1;
                } else if (b1.getTestname() == null && b2.getTestname() == null) {
                    iReturn = 0;
                } else if (b1.getTestname() != null && b2.getTestname() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTestname().compareTo(b2.getTestname());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
