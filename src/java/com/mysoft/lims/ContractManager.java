// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the contract table.
 */
public class ContractManager
// extends+ 

// extends- 
{

    /**
     * Column contractid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTID = 0;
    public static final int TYPE_CONTRACTID = Types.BIGINT;
    public static final String NAME_CONTRACTID = "contractid";

    /**
     * Column companyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMPANYID = 1;
    public static final int TYPE_COMPANYID = Types.INTEGER;
    public static final String NAME_COMPANYID = "companyid";

    /**
     * Column contragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRAGENTID = 2;
    public static final int TYPE_CONTRAGENTID = Types.BIGINT;
    public static final String NAME_CONTRAGENTID = "contragentid";

    /**
     * Column num of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NUM = 3;
    public static final int TYPE_NUM = Types.VARCHAR;
    public static final String NAME_NUM = "num";

    /**
     * Column startdate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_STARTDATE = 4;
    public static final int TYPE_STARTDATE = Types.DATE;
    public static final String NAME_STARTDATE = "startdate";

    /**
     * Column enddate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_ENDDATE = 5;
    public static final int TYPE_ENDDATE = Types.DATE;
    public static final String NAME_ENDDATE = "enddate";

    /**
     * Column price of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_PRICE = 6;
    public static final int TYPE_PRICE = Types.DOUBLE;
    public static final String NAME_PRICE = "price";

    /**
     * Column sampletypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SAMPLETYPEID = 7;
    public static final int TYPE_SAMPLETYPEID = Types.INTEGER;
    public static final String NAME_SAMPLETYPEID = "sampletypeid";

    /**
     * Column contracttype of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_CONTRACTTYPE = 8;
    public static final int TYPE_CONTRACTTYPE = Types.INTEGER;
    public static final String NAME_CONTRACTTYPE = "contracttype";

    /**
     * Column path of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PATH = 9;
    public static final int TYPE_PATH = Types.VARCHAR;
    public static final String NAME_PATH = "path";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 10;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 11;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column ownerid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_OWNERID = 12;
    public static final int TYPE_OWNERID = Types.BIGINT;
    public static final String NAME_OWNERID = "ownerid";

    /**
     * Column info of type Types.VARCHAR mapped to String.
     */
    public static final int ID_INFO = 13;
    public static final int TYPE_INFO = Types.VARCHAR;
    public static final String NAME_INFO = "info";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 14;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 15;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";

    /**
     * Column contractownerid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTOWNERID = 16;
    public static final int TYPE_CONTRACTOWNERID = Types.BIGINT;
    public static final String NAME_CONTRACTOWNERID = "contractownerid";

    /**
     * Column reminddate of type Types.DATE mapped to java.util.Date.
     */
    public static final int ID_REMINDDATE = 17;
    public static final int TYPE_REMINDDATE = Types.DATE;
    public static final String NAME_REMINDDATE = "reminddate";

    /**
     * Column remindtime of type Types.TIME mapped to java.util.Date.
     */
    public static final int ID_REMINDTIME = 18;
    public static final int TYPE_REMINDTIME = Types.TIME;
    public static final String NAME_REMINDTIME = "remindtime";

    /**
     * Column remindpid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REMINDPID = 19;
    public static final int TYPE_REMINDPID = Types.INTEGER;
    public static final String NAME_REMINDPID = "remindpid";

    /**
     * Column transfer of type Types.BIT mapped to Boolean.
     */
    public static final int ID_TRANSFER = 20;
    public static final int TYPE_TRANSFER = Types.BIT;
    public static final String NAME_TRANSFER = "transfer";

    /**
     * Column stamp of type Types.VARCHAR mapped to String.
     */
    public static final int ID_STAMP = 21;
    public static final int TYPE_STAMP = Types.VARCHAR;
    public static final String NAME_STAMP = "stamp";


    private static final String TABLE_NAME = "contract";

    /**
     * Create an array of type string containing all the fields of the contract table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "contract.contractid"
        ,"contract.companyid"
        ,"contract.contragentid"
        ,"contract.num"
        ,"contract.startdate"
        ,"contract.enddate"
        ,"contract.price"
        ,"contract.sampletypeid"
        ,"contract.contracttype"
        ,"contract.path"
        ,"contract.regbyid"
        ,"contract.regdate"
        ,"contract.ownerid"
        ,"contract.info"
        ,"contract.deleted"
        ,"contract.status"
        ,"contract.contractownerid"
        ,"contract.reminddate"
        ,"contract.remindtime"
        ,"contract.remindpid"
        ,"contract.transfer"
        ,"contract.stamp"
    };

    /**
     * Field that contains the comma separated fields of the contract table.
     */
    private static final String ALL_FIELDS = "contract.contractid"
                            + ",contract.companyid"
                            + ",contract.contragentid"
                            + ",contract.num"
                            + ",contract.startdate"
                            + ",contract.enddate"
                            + ",contract.price"
                            + ",contract.sampletypeid"
                            + ",contract.contracttype"
                            + ",contract.path"
                            + ",contract.regbyid"
                            + ",contract.regdate"
                            + ",contract.ownerid"
                            + ",contract.info"
                            + ",contract.deleted"
                            + ",contract.status"
                            + ",contract.contractownerid"
                            + ",contract.reminddate"
                            + ",contract.remindtime"
                            + ",contract.remindpid"
                            + ",contract.transfer"
                            + ",contract.stamp";

    private static ContractManager singleton = new ContractManager();

    /**
     * Get the ContractManager singleton.
     *
     * @return ContractManager 
     */
    synchronized public static ContractManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ContractManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ContractManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ContractBean instance.
     *
     * @return the new ContractBean 
     */
    public ContractBean createContractBean()
    {
        return new ContractBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ContractBean from the contract using its key fields.
     *
     * @return a unique ContractBean 
     */
    //12
    public ContractBean loadByPrimaryKey(Long contractid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contract WHERE contract.contractid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractid);
            ContractBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long contractid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from contract WHERE contract.contractid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ContractBean array from the contract table using its companyid field.
     *
     * @return an array of ContractBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractBean[] loadByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contract WHERE companyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contract table by companyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contract WHERE companyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractBean array from the contract table using its contragentid field.
     *
     * @return an array of ContractBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractBean[] loadByContragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contract WHERE contragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contract table by contragentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContragentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contract WHERE contragentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractBean array from the contract table using its ownerid field.
     *
     * @return an array of ContractBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractBean[] loadByOwnerid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contract WHERE ownerid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contract table by ownerid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByOwnerid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contract WHERE ownerid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractBean array from the contract table using its regbyid field.
     *
     * @return an array of ContractBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractBean[] loadByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contract WHERE regbyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contract table by regbyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegbyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contract WHERE regbyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractBean array from the contract table using its sampletypeid field.
     *
     * @return an array of ContractBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractBean[] loadBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contract WHERE sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contract table by sampletypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySampletypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contract WHERE sampletypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CompanyBean object from the contract.companyid field.
     *
     * @param pObject the ContractBean 
     * @return the associated CompanyBean pObject
     */
    // GET IMPORTED
    public CompanyBean getCompanyBean(ContractBean pObject) throws SQLException
    {
        CompanyBean other = CompanyManager.getInstance().createCompanyBean();
        other.setCompanyid(pObject.getCompanyid());
        return CompanyManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractBean object to the CompanyBean object.
     *
     * @param pObject the ContractBean object to use
     * @param pObjectToBeSet the CompanyBean object to associate to the ContractBean 
     * @return the associated CompanyBean pObject
     */
    // SET IMPORTED
    public ContractBean setCompanyBean(ContractBean pObject,CompanyBean pObjectToBeSet)
    {
        pObject.setCompanyid(pObjectToBeSet.getCompanyid());
        return pObject;
    }

    /**
     * Retrieves the ContragentBean object from the contract.contragentid field.
     *
     * @param pObject the ContractBean 
     * @return the associated ContragentBean pObject
     */
    // GET IMPORTED
    public ContragentBean getContragentBean(ContractBean pObject) throws SQLException
    {
        ContragentBean other = ContragentManager.getInstance().createContragentBean();
        other.setContragentid(pObject.getContragentid());
        return ContragentManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractBean object to the ContragentBean object.
     *
     * @param pObject the ContractBean object to use
     * @param pObjectToBeSet the ContragentBean object to associate to the ContractBean 
     * @return the associated ContragentBean pObject
     */
    // SET IMPORTED
    public ContractBean setContragentBean(ContractBean pObject,ContragentBean pObjectToBeSet)
    {
        pObject.setContragentid(pObjectToBeSet.getContragentid());
        return pObject;
    }

    /**
     * Retrieves the PersonellBean object from the contract.personellid field.
     *
     * @param pObject the ContractBean 
     * @return the associated PersonellBean pObject
     */
    // GET IMPORTED
    public PersonellBean getPersonellBean(ContractBean pObject) throws SQLException
    {
        PersonellBean other = PersonellManager.getInstance().createPersonellBean();
        other.setPersonellid(pObject.getRegbyid());
        return PersonellManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractBean object to the PersonellBean object.
     *
     * @param pObject the ContractBean object to use
     * @param pObjectToBeSet the PersonellBean object to associate to the ContractBean 
     * @return the associated PersonellBean pObject
     */
    // SET IMPORTED
    public ContractBean setPersonellBean(ContractBean pObject,PersonellBean pObjectToBeSet)
    {
        pObject.setRegbyid(pObjectToBeSet.getPersonellid());
        return pObject;
    }

    /**
     * Retrieves the SampletypeBean object from the contract.sampletypeid field.
     *
     * @param pObject the ContractBean 
     * @return the associated SampletypeBean pObject
     */
    // GET IMPORTED
    public SampletypeBean getSampletypeBean(ContractBean pObject) throws SQLException
    {
        SampletypeBean other = SampletypeManager.getInstance().createSampletypeBean();
        other.setSampletypeid(pObject.getSampletypeid());
        return SampletypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractBean object to the SampletypeBean object.
     *
     * @param pObject the ContractBean object to use
     * @param pObjectToBeSet the SampletypeBean object to associate to the ContractBean 
     * @return the associated SampletypeBean pObject
     */
    // SET IMPORTED
    public ContractBean setSampletypeBean(ContractBean pObject,SampletypeBean pObjectToBeSet)
    {
        pObject.setSampletypeid(pObjectToBeSet.getSampletypeid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from contract.
     *
     * @return an array of ContractManager pObject
     */
    //38
    public ContractBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contract",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ContractBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ContractBean table 
     */
    //49
    public ContractBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ContractBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ContractBean table 
     */
    //51
    public ContractBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from contract " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from contract ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ContractBean[])v.toArray(new ContractBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from contract table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the contract table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM contract " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ContractBean pObject into the database.
     *
     * @param pObject the ContractBean pObject to be saved
     */
    //100
    public ContractBean save(ContractBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isContractidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('contractid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setContractid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into contract (");
    
                if (pObject.isContractidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractid");
                    _dirtyCount++;
                }

                if (pObject.isCompanyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyid");
                    _dirtyCount++;
                }

                if (pObject.isContragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contragentid");
                    _dirtyCount++;
                }

                if (pObject.isNumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("num");
                    _dirtyCount++;
                }

                if (pObject.isStartdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("startdate");
                    _dirtyCount++;
                }

                if (pObject.isEnddateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("enddate");
                    _dirtyCount++;
                }

                if (pObject.isPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("price");
                    _dirtyCount++;
                }

                if (pObject.isSampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampletypeid");
                    _dirtyCount++;
                }

                if (pObject.isContracttypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contracttype");
                    _dirtyCount++;
                }

                if (pObject.isPathModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("path");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isOwneridModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("ownerid");
                    _dirtyCount++;
                }

                if (pObject.isInfoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("info");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                if (pObject.isContractowneridModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractownerid");
                    _dirtyCount++;
                }

                if (pObject.isReminddateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reminddate");
                    _dirtyCount++;
                }

                if (pObject.isRemindtimeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("remindtime");
                    _dirtyCount++;
                }

                if (pObject.isRemindpidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("remindpid");
                    _dirtyCount++;
                }

                if (pObject.isTransferModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("transfer");
                    _dirtyCount++;
                }

                if (pObject.isStampModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("stamp");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isStartdateModified()) {
                    if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
                }
    
                if (pObject.isEnddateModified()) {
                    if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isContracttypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getContracttype());
                }
    
                if (pObject.isPathModified()) {
                    ps.setString(++_dirtyCount, pObject.getPath());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isOwneridModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getOwnerid());
                }
    
                if (pObject.isInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getInfo());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isContractowneridModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractownerid());
                }
    
                if (pObject.isReminddateModified()) {
                    if (pObject.getReminddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getReminddate().getTime()));
                }
    
                if (pObject.isRemindtimeModified()) {
                    if (pObject.getRemindtime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getRemindtime().getTime()));
                }
    
                if (pObject.isRemindpidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRemindpid());
                }
    
                if (pObject.isTransferModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTransfer());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE contract SET ");
                boolean useComma=false;

                if (pObject.isContractidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractid").append("=?");
                }

                if (pObject.isCompanyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyid").append("=?");
                }

                if (pObject.isContragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contragentid").append("=?");
                }

                if (pObject.isNumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("num").append("=?");
                }

                if (pObject.isStartdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("startdate").append("=?");
                }

                if (pObject.isEnddateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("enddate").append("=?");
                }

                if (pObject.isPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("price").append("=?");
                }

                if (pObject.isSampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampletypeid").append("=?");
                }

                if (pObject.isContracttypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contracttype").append("=?");
                }

                if (pObject.isPathModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("path").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isOwneridModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("ownerid").append("=?");
                }

                if (pObject.isInfoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("info").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }

                if (pObject.isContractowneridModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractownerid").append("=?");
                }

                if (pObject.isReminddateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reminddate").append("=?");
                }

                if (pObject.isRemindtimeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("remindtime").append("=?");
                }

                if (pObject.isRemindpidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("remindpid").append("=?");
                }

                if (pObject.isTransferModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("transfer").append("=?");
                }

                if (pObject.isStampModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("stamp").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("contract.contractid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isContractidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }

                if (pObject.isCompanyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }

                if (pObject.isContragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }

                if (pObject.isNumModified()) {
                      ps.setString(++_dirtyCount, pObject.getNum());
                }

                if (pObject.isStartdateModified()) {
                      if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
                }

                if (pObject.isEnddateModified()) {
                      if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
                }

                if (pObject.isPriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }

                if (pObject.isSampletypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }

                if (pObject.isContracttypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getContracttype());
                }

                if (pObject.isPathModified()) {
                      ps.setString(++_dirtyCount, pObject.getPath());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isOwneridModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getOwnerid());
                }

                if (pObject.isInfoModified()) {
                      ps.setString(++_dirtyCount, pObject.getInfo());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }

                if (pObject.isContractowneridModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractownerid());
                }

                if (pObject.isReminddateModified()) {
                      if (pObject.getReminddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getReminddate().getTime()));
                }

                if (pObject.isRemindtimeModified()) {
                      if (pObject.getRemindtime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getRemindtime().getTime()));
                }

                if (pObject.isRemindpidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRemindpid());
                }

                if (pObject.isTransferModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getTransfer());
                }

                if (pObject.isStampModified()) {
                      ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ContractBean pObjects into the database.
     *
     * @param pObjects the ContractBean pObject table to be saved
     * @return the saved ContractBean array.
     */
    //65
    public ContractBean[] save(ContractBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ContractBean pObject from a template one giving a c
     *
     * @param pObject the ContractBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ContractBean loadUniqueUsingTemplate(ContractBean pObject) throws SQLException
    {
         ContractBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ContractBean from a template one.
     *
     * @param pObject the ContractBean template to look for
     * @return all the ContractBean matching the template
     */
    //88
    public ContractBean[] loadUsingTemplate(ContractBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from contract WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isContractidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
             }
    
             if (pObject.isCompanyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
             }
    
             if (pObject.isContragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
             }
    
             if (pObject.isNumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
             }
    
             if (pObject.isStartdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("startdate= ?");
             }
    
             if (pObject.isEnddateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("enddate= ?");
             }
    
             if (pObject.isPriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
             }
    
             if (pObject.isSampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
             }
    
             if (pObject.isContracttypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contracttype= ?");
             }
    
             if (pObject.isPathModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("path= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isOwneridModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ownerid= ?");
             }
    
             if (pObject.isInfoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("info= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (pObject.isContractowneridModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractownerid= ?");
             }
    
             if (pObject.isReminddateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reminddate= ?");
             }
    
             if (pObject.isRemindtimeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("remindtime= ?");
             }
    
             if (pObject.isRemindpidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("remindpid= ?");
             }
    
             if (pObject.isTransferModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transfer= ?");
             }
    
             if (pObject.isStampModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isContractidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
             }
    
             if (pObject.isCompanyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
             }
    
             if (pObject.isContragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
             }
    
             if (pObject.isNumModified()) {
                 ps.setString(++_dirtyCount, pObject.getNum());
             }
    
             if (pObject.isStartdateModified()) {
                 if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
             }
    
             if (pObject.isEnddateModified()) {
                 if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
             }
    
             if (pObject.isPriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
             }
    
             if (pObject.isSampletypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
             }
    
             if (pObject.isContracttypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getContracttype());
             }
    
             if (pObject.isPathModified()) {
                 ps.setString(++_dirtyCount, pObject.getPath());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isOwneridModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getOwnerid());
             }
    
             if (pObject.isInfoModified()) {
                 ps.setString(++_dirtyCount, pObject.getInfo());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             if (pObject.isContractowneridModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractownerid());
             }
    
             if (pObject.isReminddateModified()) {
                 if (pObject.getReminddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getReminddate().getTime()));
             }
    
             if (pObject.isRemindtimeModified()) {
                 if (pObject.getRemindtime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getRemindtime().getTime()));
             }
    
             if (pObject.isRemindpidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRemindpid());
             }
    
             if (pObject.isTransferModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getTransfer());
             }
    
             if (pObject.isStampModified()) {
                 ps.setString(++_dirtyCount, pObject.getStamp());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ContractBean template.
     *
     * @param pObject the ContractBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ContractBean pObject) throws SQLException
    {
        if (pObject.isContractidInitialized())
            return deleteByPrimaryKey(pObject.getContractid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM contract WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isContractidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("num").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStartdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("startdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEnddateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("enddate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("price").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContracttypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contracttype").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPathInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("path").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isOwneridInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("ownerid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInfoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("info").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractowneridInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractownerid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReminddateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reminddate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRemindtimeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("remindtime").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRemindpidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("remindpid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTransferInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("transfer").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStampInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("stamp").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isContractidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
            }
    
            if (pObject.isCompanyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
            }
    
            if (pObject.isContragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
            }
    
            if (pObject.isNumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNum());
            }
    
            if (pObject.isStartdateInitialized()) {
                if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
            }
    
            if (pObject.isEnddateInitialized()) {
                if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
            }
    
            if (pObject.isPriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
            }
    
            if (pObject.isSampletypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
            }
    
            if (pObject.isContracttypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getContracttype());
            }
    
            if (pObject.isPathInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPath());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isOwneridInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getOwnerid());
            }
    
            if (pObject.isInfoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getInfo());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            if (pObject.isContractowneridInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractownerid());
            }
    
            if (pObject.isReminddateInitialized()) {
                if (pObject.getReminddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getReminddate().getTime()));
            }
    
            if (pObject.isRemindtimeInitialized()) {
                if (pObject.getRemindtime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getRemindtime().getTime()));
            }
    
            if (pObject.isRemindpidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRemindpid());
            }
    
            if (pObject.isTransferInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getTransfer());
            }
    
            if (pObject.isStampInitialized()) {
                ps.setString(++_dirtyCount, pObject.getStamp());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of PersonellBean using the relation table Act given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaAct(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,act"
                         + " WHERE "    
                         + "     act.contractid = ?"
                         + " AND act.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of TunitBean using the relation table Act given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of TunitBean 
     */
    // MANY TO MANY
    public TunitBean[] loadTunitViaAct(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        tunit,act"
                         + " WHERE "    
                         + "     act.contractid = ?"
                         + " AND act.raionid = tunit.tunitid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return TunitManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Appeal given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaAppeal(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,appeal"
                         + " WHERE "    
                         + "     appeal.contractid = ?"
                         + " AND appeal.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of TunitBean using the relation table Appeal given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of TunitBean 
     */
    // MANY TO MANY
    public TunitBean[] loadTunitViaAppeal(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        tunit,appeal"
                         + " WHERE "    
                         + "     appeal.contractid = ?"
                         + " AND appeal.raionid = tunit.tunitid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return TunitManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Bill given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaBill(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,bill"
                         + " WHERE "    
                         + "     bill.contractid = ?"
                         + " AND bill.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Contractanalysis given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaContractanalysis(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.contractid = ?"
                         + " AND contractanalysis.institutionid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Contractanalysis given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaContractanalysis(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.contractid = ?"
                         + " AND contractanalysis.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Contractanalysis given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaContractanalysis(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.contractid = ?"
                         + " AND contractanalysis.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ActBean using the relation table Contractclosing given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of ActBean 
     */
    // MANY TO MANY
    public ActBean[] loadActViaContractclosing(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        act,contractclosing"
                         + " WHERE "    
                         + "     contractclosing.contractid = ?"
                         + " AND contractclosing.actid = act.actid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return ActManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of AppealBean using the relation table Contractclosing given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaContractclosing(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,contractclosing"
                         + " WHERE "    
                         + "     contractclosing.contractid = ?"
                         + " AND contractclosing.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ActBean using the relation table Contractsampletype given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of ActBean 
     */
    // MANY TO MANY
    public ActBean[] loadActViaContractsampletype(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        act,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.contractid = ?"
                         + " AND contractsampletype.actid = act.actid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return ActManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of AppealBean using the relation table Contractsampletype given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaContractsampletype(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.contractid = ?"
                         + " AND contractsampletype.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampletypeBean using the relation table Contractsampletype given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of ContractsampletypeBean 
     */
    // MANY TO MANY
    public ContractsampletypeBean[] loadContractsampletypeViaContractsampletype(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampletype,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.contractid = ?"
                         + " AND contractsampletype.parentid = contractsampletype.contractsampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return ContractsampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Contractsampletype given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaContractsampletype(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.contractid = ?"
                         + " AND contractsampletype.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SpeciesBean using the relation table Contractsampletype given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of SpeciesBean 
     */
    // MANY TO MANY
    public SpeciesBean[] loadSpeciesViaContractsampletype(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        species,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.contractid = ?"
                         + " AND contractsampletype.speciesid = species.speciesid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return SpeciesManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DoctypeBean using the relation table Docs given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of DoctypeBean 
     */
    // MANY TO MANY
    public DoctypeBean[] loadDoctypeViaDocs(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        doctype,docs"
                         + " WHERE "    
                         + "     docs.contractid = ?"
                         + " AND docs.doctypeid = doctype.doctypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return DoctypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Docs given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaDocs(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,docs"
                         + " WHERE "    
                         + "     docs.contractid = ?"
                         + " AND docs.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampleitemBean using the relation table Sampleitemreseach given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of ContractsampleitemBean 
     */
    // MANY TO MANY
    public ContractsampleitemBean[] loadContractsampleitemViaSampleitemreseach(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampleitem,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractid = ?"
                         + " AND sampleitemreseach.contractsampleitemid = contractsampleitem.contractsampleitemid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return ContractsampleitemManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DeviceBean using the relation table Sampleitemreseach given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of DeviceBean 
     */
    // MANY TO MANY
    public DeviceBean[] loadDeviceViaSampleitemreseach(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        device,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractid = ?"
                         + " AND sampleitemreseach.deviceid = device.deviceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return DeviceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Sampleitemreseach given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaSampleitemreseach(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractid = ?"
                         + " AND sampleitemreseach.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StandardBean using the relation table Sampleitemreseach given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of StandardBean 
     */
    // MANY TO MANY
    public StandardBean[] loadStandardViaSampleitemreseach(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        standard,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractid = ?"
                         + " AND sampleitemreseach.standardid = standard.standardid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return StandardManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ActBean using the relation table Transitact given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of ActBean 
     */
    // MANY TO MANY
    public ActBean[] loadActViaTransitact(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        act,transitact"
                         + " WHERE "    
                         + "     transitact.contractid = ?"
                         + " AND transitact.actid = act.actid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return ActManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of AppealBean using the relation table Transitact given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaTransitact(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,transitact"
                         + " WHERE "    
                         + "     transitact.contractid = ?"
                         + " AND transitact.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Transitact given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaTransitact(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,transitact"
                         + " WHERE "    
                         + "     transitact.contractid = ?"
                         + " AND transitact.fromlocationid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Transitact given a ContractBean object.
     *
     * @param pObject the ContractBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaTransitact(ContractBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,transitact"
                         + " WHERE "    
                         + "     transitact.contractid = ?"
                         + " AND transitact.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table contract.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table contract with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from contract " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table contract with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ContractBean pObject given a c
     *
     * @param pObject the ContractBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ContractBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from contract WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isContractidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
                }
    
                if (pObject.isCompanyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
                }
    
                if (pObject.isContragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
                }
    
                if (pObject.isNumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num= ?");
                }
    
                if (pObject.isStartdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("startdate= ?");
                }
    
                if (pObject.isEnddateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("enddate= ?");
                }
    
                if (pObject.isPriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
                }
    
                if (pObject.isSampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
                }
    
                if (pObject.isContracttypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contracttype= ?");
                }
    
                if (pObject.isPathModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("path= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isOwneridModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("ownerid= ?");
                }
    
                if (pObject.isInfoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("info= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (pObject.isContractowneridModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractownerid= ?");
                }
    
                if (pObject.isReminddateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reminddate= ?");
                }
    
                if (pObject.isRemindtimeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("remindtime= ?");
                }
    
                if (pObject.isRemindpidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("remindpid= ?");
                }
    
                if (pObject.isTransferModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("transfer= ?");
                }
    
                if (pObject.isStampModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("stamp= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isNumModified()) {
                    ps.setString(++_dirtyCount, pObject.getNum());
                }
    
                if (pObject.isStartdateModified()) {
                    if (pObject.getStartdate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getStartdate().getTime()));
                }
    
                if (pObject.isEnddateModified()) {
                    if (pObject.getEnddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getEnddate().getTime()));
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isContracttypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getContracttype());
                }
    
                if (pObject.isPathModified()) {
                    ps.setString(++_dirtyCount, pObject.getPath());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isOwneridModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getOwnerid());
                }
    
                if (pObject.isInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getInfo());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isContractowneridModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractownerid());
                }
    
                if (pObject.isReminddateModified()) {
                    if (pObject.getReminddate() == null) ps.setNull(++_dirtyCount, Types.DATE); else ps.setDate(++_dirtyCount, new java.sql.Date(pObject.getReminddate().getTime()));
                }
    
                if (pObject.isRemindtimeModified()) {
                    if (pObject.getRemindtime() == null) ps.setNull(++_dirtyCount, Types.TIME); else ps.setTime(++_dirtyCount, new java.sql.Time(pObject.getRemindtime().getTime()));
                }
    
                if (pObject.isRemindpidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRemindpid());
                }
    
                if (pObject.isTransferModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getTransfer());
                }
    
                if (pObject.isStampModified()) {
                    ps.setString(++_dirtyCount, pObject.getStamp());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the contract on a ContractBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ContractBean pObject
     */
    //72
    public ContractBean decodeRow(ResultSet rs) throws SQLException
    {
        ContractBean pObject = createContractBean();
        pObject.setContractid(Manager.getLong(rs, 1));
        pObject.setCompanyid(Manager.getInteger(rs, 2));
        pObject.setContragentid(Manager.getLong(rs, 3));
        pObject.setNum(rs.getString(4));
        pObject.setStartdate(rs.getDate(5));
        pObject.setEnddate(rs.getDate(6));
        pObject.setPrice(Manager.getDouble(rs, 7));
        pObject.setSampletypeid(Manager.getInteger(rs, 8));
        pObject.setContracttype(Manager.getInteger(rs, 9));
        pObject.setPath(rs.getString(10));
        pObject.setRegbyid(Manager.getInteger(rs, 11));
        pObject.setRegdate(rs.getTimestamp(12));
        pObject.setOwnerid(Manager.getLong(rs, 13));
        pObject.setInfo(rs.getString(14));
        pObject.setDeleted(Manager.getBoolean(rs, 15));
        pObject.setStatus(Manager.getInteger(rs, 16));
        pObject.setContractownerid(Manager.getLong(rs, 17));
        pObject.setReminddate(rs.getDate(18));
        pObject.setRemindtime(rs.getTime(19));
        pObject.setRemindpid(Manager.getInteger(rs, 20));
        pObject.setTransfer(Manager.getBoolean(rs, 21));
        pObject.setStamp(rs.getString(22));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the contract table on a ContractBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ContractBean pObject
     */
    //73
    public ContractBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ContractBean pObject = createContractBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_CONTRACTID:
                    ++pos;
                    pObject.setContractid(Manager.getLong(rs, pos));
                    break;
                case ID_COMPANYID:
                    ++pos;
                    pObject.setCompanyid(Manager.getInteger(rs, pos));
                    break;
                case ID_CONTRAGENTID:
                    ++pos;
                    pObject.setContragentid(Manager.getLong(rs, pos));
                    break;
                case ID_NUM:
                    ++pos;
                    pObject.setNum(rs.getString(pos));
                    break;
                case ID_STARTDATE:
                    ++pos;
                    pObject.setStartdate(rs.getDate(pos));
                    break;
                case ID_ENDDATE:
                    ++pos;
                    pObject.setEnddate(rs.getDate(pos));
                    break;
                case ID_PRICE:
                    ++pos;
                    pObject.setPrice(Manager.getDouble(rs, pos));
                    break;
                case ID_SAMPLETYPEID:
                    ++pos;
                    pObject.setSampletypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_CONTRACTTYPE:
                    ++pos;
                    pObject.setContracttype(Manager.getInteger(rs, pos));
                    break;
                case ID_PATH:
                    ++pos;
                    pObject.setPath(rs.getString(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_OWNERID:
                    ++pos;
                    pObject.setOwnerid(Manager.getLong(rs, pos));
                    break;
                case ID_INFO:
                    ++pos;
                    pObject.setInfo(rs.getString(pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
                case ID_CONTRACTOWNERID:
                    ++pos;
                    pObject.setContractownerid(Manager.getLong(rs, pos));
                    break;
                case ID_REMINDDATE:
                    ++pos;
                    pObject.setReminddate(rs.getDate(pos));
                    break;
                case ID_REMINDTIME:
                    ++pos;
                    pObject.setRemindtime(rs.getTime(pos));
                    break;
                case ID_REMINDPID:
                    ++pos;
                    pObject.setRemindpid(Manager.getInteger(rs, pos));
                    break;
                case ID_TRANSFER:
                    ++pos;
                    pObject.setTransfer(Manager.getBoolean(rs, pos));
                    break;
                case ID_STAMP:
                    ++pos;
                    pObject.setStamp(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ContractBean 
     */
    //41
    public ContractBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ContractBean 
     */
    public ContractBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ContractBean[])v.toArray(new ContractBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ContractListener listener = null;

    /**
     * Registers a unique ContractListener listener.
     */
    //66.5
    public void registerListener(ContractListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ContractBean pObject.
     *
     * @param pObject the ContractBean pObject to be saved
     */
    //67
    void beforeInsert(ContractBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ContractBean pObject.
     *
     * @param pObject the ContractBean pObject to be saved
     */
    //68
    void afterInsert(ContractBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ContractBean pObject.
     *
     * @param pObject the ContractBean pObject to be updated
     */
    //69
    void beforeUpdate(ContractBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ContractBean pObject.
     *
     * @param pObject the ContractBean pObject to be updated
     */
    //70
    void afterUpdate(ContractBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
