// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the contractsampleitem table.
 */
public class ContractsampleitemManager
// extends+ 

// extends- 
{

    /**
     * Column contractsampleitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTSAMPLEITEMID = 0;
    public static final int TYPE_CONTRACTSAMPLEITEMID = Types.BIGINT;
    public static final String NAME_CONTRACTSAMPLEITEMID = "contractsampleitemid";

    /**
     * Column contractsampletypeid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTSAMPLETYPEID = 1;
    public static final int TYPE_CONTRACTSAMPLETYPEID = Types.BIGINT;
    public static final String NAME_CONTRACTSAMPLETYPEID = "contractsampletypeid";

    /**
     * Column barcode of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BARCODE = 2;
    public static final int TYPE_BARCODE = Types.VARCHAR;
    public static final String NAME_BARCODE = "barcode";

    /**
     * Column num1 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NUM1 = 3;
    public static final int TYPE_NUM1 = Types.VARCHAR;
    public static final String NAME_NUM1 = "num1";

    /**
     * Column num2 of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NUM2 = 4;
    public static final int TYPE_NUM2 = Types.VARCHAR;
    public static final String NAME_NUM2 = "num2";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 5;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 6;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column disclaim of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DISCLAIM = 7;
    public static final int TYPE_DISCLAIM = Types.BIT;
    public static final String NAME_DISCLAIM = "disclaim";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 8;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";

    /**
     * Column parentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PARENTID = 9;
    public static final int TYPE_PARENTID = Types.BIGINT;
    public static final String NAME_PARENTID = "parentid";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 10;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column info of type Types.VARCHAR mapped to String.
     */
    public static final int ID_INFO = 11;
    public static final int TYPE_INFO = Types.VARCHAR;
    public static final String NAME_INFO = "info";

    /**
     * Column derivatetypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DERIVATETYPEID = 12;
    public static final int TYPE_DERIVATETYPEID = Types.INTEGER;
    public static final String NAME_DERIVATETYPEID = "derivatetypeid";

    /**
     * Column speciesid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SPECIESID = 13;
    public static final int TYPE_SPECIESID = Types.INTEGER;
    public static final String NAME_SPECIESID = "speciesid";

    /**
     * Column src of type Types.BIT mapped to Boolean.
     */
    public static final int ID_SRC = 14;
    public static final int TYPE_SRC = Types.BIT;
    public static final String NAME_SRC = "src";

    /**
     * Column institutionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INSTITUTIONID = 15;
    public static final int TYPE_INSTITUTIONID = Types.INTEGER;
    public static final String NAME_INSTITUTIONID = "institutionid";


    private static final String TABLE_NAME = "contractsampleitem";

    /**
     * Create an array of type string containing all the fields of the contractsampleitem table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "contractsampleitem.contractsampleitemid"
        ,"contractsampleitem.contractsampletypeid"
        ,"contractsampleitem.barcode"
        ,"contractsampleitem.num1"
        ,"contractsampleitem.num2"
        ,"contractsampleitem.regbyid"
        ,"contractsampleitem.regdate"
        ,"contractsampleitem.disclaim"
        ,"contractsampleitem.status"
        ,"contractsampleitem.parentid"
        ,"contractsampleitem.deleted"
        ,"contractsampleitem.info"
        ,"contractsampleitem.derivatetypeid"
        ,"contractsampleitem.speciesid"
        ,"contractsampleitem.src"
        ,"contractsampleitem.institutionid"
    };

    /**
     * Field that contains the comma separated fields of the contractsampleitem table.
     */
    private static final String ALL_FIELDS = "contractsampleitem.contractsampleitemid"
                            + ",contractsampleitem.contractsampletypeid"
                            + ",contractsampleitem.barcode"
                            + ",contractsampleitem.num1"
                            + ",contractsampleitem.num2"
                            + ",contractsampleitem.regbyid"
                            + ",contractsampleitem.regdate"
                            + ",contractsampleitem.disclaim"
                            + ",contractsampleitem.status"
                            + ",contractsampleitem.parentid"
                            + ",contractsampleitem.deleted"
                            + ",contractsampleitem.info"
                            + ",contractsampleitem.derivatetypeid"
                            + ",contractsampleitem.speciesid"
                            + ",contractsampleitem.src"
                            + ",contractsampleitem.institutionid";

    private static ContractsampleitemManager singleton = new ContractsampleitemManager();

    /**
     * Get the ContractsampleitemManager singleton.
     *
     * @return ContractsampleitemManager 
     */
    synchronized public static ContractsampleitemManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ContractsampleitemManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ContractsampleitemManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ContractsampleitemBean instance.
     *
     * @return the new ContractsampleitemBean 
     */
    public ContractsampleitemBean createContractsampleitemBean()
    {
        return new ContractsampleitemBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ContractsampleitemBean from the contractsampleitem using its key fields.
     *
     * @return a unique ContractsampleitemBean 
     */
    //12
    public ContractsampleitemBean loadByPrimaryKey(Long contractsampleitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampleitem WHERE contractsampleitem.contractsampleitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractsampleitemid);
            ContractsampleitemBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long contractsampleitemid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from contractsampleitem WHERE contractsampleitem.contractsampleitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contractsampleitemid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ContractsampleitemBean array from the contractsampleitem table using its parentid field.
     *
     * @return an array of ContractsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampleitemBean[] loadByParentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampleitem WHERE parentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampleitem table by parentid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByParentid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampleitem WHERE parentid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampleitemBean array from the contractsampleitem table using its contractsampletypeid field.
     *
     * @return an array of ContractsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampleitemBean[] loadByContractsampletypeid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampleitem WHERE contractsampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampleitem table by contractsampletypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractsampletypeid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampleitem WHERE contractsampletypeid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampleitemBean array from the contractsampleitem table using its derivatetypeid field.
     *
     * @return an array of ContractsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampleitemBean[] loadByDerivatetypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampleitem WHERE derivatetypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampleitem table by derivatetypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByDerivatetypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampleitem WHERE derivatetypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampleitemBean array from the contractsampleitem table using its institutionid field.
     *
     * @return an array of ContractsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampleitemBean[] loadByInstitutionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampleitem WHERE institutionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampleitem table by institutionid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByInstitutionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampleitem WHERE institutionid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContractsampleitemBean array from the contractsampleitem table using its speciesid field.
     *
     * @return an array of ContractsampleitemBean 
     */
    // LOAD BY IMPORTED KEY
    public ContractsampleitemBean[] loadBySpeciesid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampleitem WHERE speciesid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contractsampleitem table by speciesid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySpeciesid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contractsampleitem WHERE speciesid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ContractsampleitemBean object from the contractsampleitem.contractsampleitemid field.
     *
     * @param pObject the ContractsampleitemBean 
     * @return the associated ContractsampleitemBean pObject
     */
    // GET IMPORTED
    public ContractsampleitemBean getContractsampleitemBean(ContractsampleitemBean pObject) throws SQLException
    {
        ContractsampleitemBean other = ContractsampleitemManager.getInstance().createContractsampleitemBean();
        other.setContractsampleitemid(pObject.getParentid());
        return ContractsampleitemManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampleitemBean object to the ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean object to use
     * @param pObjectToBeSet the ContractsampleitemBean object to associate to the ContractsampleitemBean 
     * @return the associated ContractsampleitemBean pObject
     */
    // SET IMPORTED
    public ContractsampleitemBean setContractsampleitemBean(ContractsampleitemBean pObject,ContractsampleitemBean pObjectToBeSet)
    {
        pObject.setParentid(pObjectToBeSet.getContractsampleitemid());
        return pObject;
    }

    /**
     * Retrieves the ContractsampletypeBean object from the contractsampleitem.contractsampletypeid field.
     *
     * @param pObject the ContractsampleitemBean 
     * @return the associated ContractsampletypeBean pObject
     */
    // GET IMPORTED
    public ContractsampletypeBean getContractsampletypeBean(ContractsampleitemBean pObject) throws SQLException
    {
        ContractsampletypeBean other = ContractsampletypeManager.getInstance().createContractsampletypeBean();
        other.setContractsampletypeid(pObject.getContractsampletypeid());
        return ContractsampletypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampleitemBean object to the ContractsampletypeBean object.
     *
     * @param pObject the ContractsampleitemBean object to use
     * @param pObjectToBeSet the ContractsampletypeBean object to associate to the ContractsampleitemBean 
     * @return the associated ContractsampletypeBean pObject
     */
    // SET IMPORTED
    public ContractsampleitemBean setContractsampletypeBean(ContractsampleitemBean pObject,ContractsampletypeBean pObjectToBeSet)
    {
        pObject.setContractsampletypeid(pObjectToBeSet.getContractsampletypeid());
        return pObject;
    }

    /**
     * Retrieves the DerivatetypeBean object from the contractsampleitem.derivatetypeid field.
     *
     * @param pObject the ContractsampleitemBean 
     * @return the associated DerivatetypeBean pObject
     */
    // GET IMPORTED
    public DerivatetypeBean getDerivatetypeBean(ContractsampleitemBean pObject) throws SQLException
    {
        DerivatetypeBean other = DerivatetypeManager.getInstance().createDerivatetypeBean();
        other.setDerivatetypeid(pObject.getDerivatetypeid());
        return DerivatetypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampleitemBean object to the DerivatetypeBean object.
     *
     * @param pObject the ContractsampleitemBean object to use
     * @param pObjectToBeSet the DerivatetypeBean object to associate to the ContractsampleitemBean 
     * @return the associated DerivatetypeBean pObject
     */
    // SET IMPORTED
    public ContractsampleitemBean setDerivatetypeBean(ContractsampleitemBean pObject,DerivatetypeBean pObjectToBeSet)
    {
        pObject.setDerivatetypeid(pObjectToBeSet.getDerivatetypeid());
        return pObject;
    }

    /**
     * Retrieves the InstitutionBean object from the contractsampleitem.institutionid field.
     *
     * @param pObject the ContractsampleitemBean 
     * @return the associated InstitutionBean pObject
     */
    // GET IMPORTED
    public InstitutionBean getInstitutionBean(ContractsampleitemBean pObject) throws SQLException
    {
        InstitutionBean other = InstitutionManager.getInstance().createInstitutionBean();
        other.setInstitutionid(pObject.getInstitutionid());
        return InstitutionManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampleitemBean object to the InstitutionBean object.
     *
     * @param pObject the ContractsampleitemBean object to use
     * @param pObjectToBeSet the InstitutionBean object to associate to the ContractsampleitemBean 
     * @return the associated InstitutionBean pObject
     */
    // SET IMPORTED
    public ContractsampleitemBean setInstitutionBean(ContractsampleitemBean pObject,InstitutionBean pObjectToBeSet)
    {
        pObject.setInstitutionid(pObjectToBeSet.getInstitutionid());
        return pObject;
    }

    /**
     * Retrieves the SpeciesBean object from the contractsampleitem.speciesid field.
     *
     * @param pObject the ContractsampleitemBean 
     * @return the associated SpeciesBean pObject
     */
    // GET IMPORTED
    public SpeciesBean getSpeciesBean(ContractsampleitemBean pObject) throws SQLException
    {
        SpeciesBean other = SpeciesManager.getInstance().createSpeciesBean();
        other.setSpeciesid(pObject.getSpeciesid());
        return SpeciesManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContractsampleitemBean object to the SpeciesBean object.
     *
     * @param pObject the ContractsampleitemBean object to use
     * @param pObjectToBeSet the SpeciesBean object to associate to the ContractsampleitemBean 
     * @return the associated SpeciesBean pObject
     */
    // SET IMPORTED
    public ContractsampleitemBean setSpeciesBean(ContractsampleitemBean pObject,SpeciesBean pObjectToBeSet)
    {
        pObject.setSpeciesid(pObjectToBeSet.getSpeciesid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from contractsampleitem.
     *
     * @return an array of ContractsampleitemManager pObject
     */
    //38
    public ContractsampleitemBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contractsampleitem",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ContractsampleitemBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ContractsampleitemBean table 
     */
    //49
    public ContractsampleitemBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ContractsampleitemBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ContractsampleitemBean table 
     */
    //51
    public ContractsampleitemBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from contractsampleitem " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from contractsampleitem ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ContractsampleitemBean[])v.toArray(new ContractsampleitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from contractsampleitem table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the contractsampleitem table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM contractsampleitem " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ContractsampleitemBean pObject into the database.
     *
     * @param pObject the ContractsampleitemBean pObject to be saved
     */
    //100
    public ContractsampleitemBean save(ContractsampleitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isContractsampleitemidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('contractsampleitemid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setContractsampleitemid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into contractsampleitem (");
    
                if (pObject.isContractsampleitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractsampleitemid");
                    _dirtyCount++;
                }

                if (pObject.isContractsampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractsampletypeid");
                    _dirtyCount++;
                }

                if (pObject.isBarcodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("barcode");
                    _dirtyCount++;
                }

                if (pObject.isNum1Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("num1");
                    _dirtyCount++;
                }

                if (pObject.isNum2Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("num2");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isDisclaimModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("disclaim");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                if (pObject.isParentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("parentid");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isInfoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("info");
                    _dirtyCount++;
                }

                if (pObject.isDerivatetypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("derivatetypeid");
                    _dirtyCount++;
                }

                if (pObject.isSpeciesidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("speciesid");
                    _dirtyCount++;
                }

                if (pObject.isSrcModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("src");
                    _dirtyCount++;
                }

                if (pObject.isInstitutionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("institutionid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isContractsampletypeidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
                }
    
                if (pObject.isBarcodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getBarcode());
                }
    
                if (pObject.isNum1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getNum1());
                }
    
                if (pObject.isNum2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getNum2());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDisclaimModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDisclaim());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getInfo());
                }
    
                if (pObject.isDerivatetypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDerivatetypeid());
                }
    
                if (pObject.isSpeciesidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }
    
                if (pObject.isSrcModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getSrc());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE contractsampleitem SET ");
                boolean useComma=false;

                if (pObject.isContractsampleitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractsampleitemid").append("=?");
                }

                if (pObject.isContractsampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractsampletypeid").append("=?");
                }

                if (pObject.isBarcodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("barcode").append("=?");
                }

                if (pObject.isNum1Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("num1").append("=?");
                }

                if (pObject.isNum2Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("num2").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isDisclaimModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("disclaim").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }

                if (pObject.isParentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("parentid").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isInfoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("info").append("=?");
                }

                if (pObject.isDerivatetypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("derivatetypeid").append("=?");
                }

                if (pObject.isSpeciesidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("speciesid").append("=?");
                }

                if (pObject.isSrcModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("src").append("=?");
                }

                if (pObject.isInstitutionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("institutionid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("contractsampleitem.contractsampleitemid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isContractsampleitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }

                if (pObject.isContractsampletypeidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
                }

                if (pObject.isBarcodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getBarcode());
                }

                if (pObject.isNum1Modified()) {
                      ps.setString(++_dirtyCount, pObject.getNum1());
                }

                if (pObject.isNum2Modified()) {
                      ps.setString(++_dirtyCount, pObject.getNum2());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isDisclaimModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDisclaim());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }

                if (pObject.isParentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isInfoModified()) {
                      ps.setString(++_dirtyCount, pObject.getInfo());
                }

                if (pObject.isDerivatetypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDerivatetypeid());
                }

                if (pObject.isSpeciesidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }

                if (pObject.isSrcModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getSrc());
                }

                if (pObject.isInstitutionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ContractsampleitemBean pObjects into the database.
     *
     * @param pObjects the ContractsampleitemBean pObject table to be saved
     * @return the saved ContractsampleitemBean array.
     */
    //65
    public ContractsampleitemBean[] save(ContractsampleitemBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ContractsampleitemBean pObject from a template one giving a c
     *
     * @param pObject the ContractsampleitemBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ContractsampleitemBean loadUniqueUsingTemplate(ContractsampleitemBean pObject) throws SQLException
    {
         ContractsampleitemBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ContractsampleitemBean from a template one.
     *
     * @param pObject the ContractsampleitemBean template to look for
     * @return all the ContractsampleitemBean matching the template
     */
    //88
    public ContractsampleitemBean[] loadUsingTemplate(ContractsampleitemBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from contractsampleitem WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isContractsampleitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
             }
    
             if (pObject.isContractsampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampletypeid= ?");
             }
    
             if (pObject.isBarcodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("barcode= ?");
             }
    
             if (pObject.isNum1Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num1= ?");
             }
    
             if (pObject.isNum2Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num2= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isDisclaimModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("disclaim= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (pObject.isParentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isInfoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("info= ?");
             }
    
             if (pObject.isDerivatetypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("derivatetypeid= ?");
             }
    
             if (pObject.isSpeciesidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("speciesid= ?");
             }
    
             if (pObject.isSrcModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("src= ?");
             }
    
             if (pObject.isInstitutionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isContractsampleitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
             }
    
             if (pObject.isContractsampletypeidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
             }
    
             if (pObject.isBarcodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getBarcode());
             }
    
             if (pObject.isNum1Modified()) {
                 ps.setString(++_dirtyCount, pObject.getNum1());
             }
    
             if (pObject.isNum2Modified()) {
                 ps.setString(++_dirtyCount, pObject.getNum2());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isDisclaimModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDisclaim());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             if (pObject.isParentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isInfoModified()) {
                 ps.setString(++_dirtyCount, pObject.getInfo());
             }
    
             if (pObject.isDerivatetypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDerivatetypeid());
             }
    
             if (pObject.isSpeciesidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
             }
    
             if (pObject.isSrcModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getSrc());
             }
    
             if (pObject.isInstitutionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ContractsampleitemBean template.
     *
     * @param pObject the ContractsampleitemBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ContractsampleitemBean pObject) throws SQLException
    {
        if (pObject.isContractsampleitemidInitialized())
            return deleteByPrimaryKey(pObject.getContractsampleitemid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM contractsampleitem WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isContractsampleitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractsampleitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractsampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractsampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBarcodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("barcode").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNum1Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("num1").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNum2Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("num2").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDisclaimInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("disclaim").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isParentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("parentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInfoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("info").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDerivatetypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("derivatetypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSpeciesidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("speciesid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSrcInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("src").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInstitutionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("institutionid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isContractsampleitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
            }
    
            if (pObject.isContractsampletypeidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
            }
    
            if (pObject.isBarcodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getBarcode());
            }
    
            if (pObject.isNum1Initialized()) {
                ps.setString(++_dirtyCount, pObject.getNum1());
            }
    
            if (pObject.isNum2Initialized()) {
                ps.setString(++_dirtyCount, pObject.getNum2());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isDisclaimInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDisclaim());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            if (pObject.isParentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isInfoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getInfo());
            }
    
            if (pObject.isDerivatetypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDerivatetypeid());
            }
    
            if (pObject.isSpeciesidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
            }
    
            if (pObject.isSrcInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getSrc());
            }
    
            if (pObject.isInstitutionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of ExtraparamBean using the relation table Extraval given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of ExtraparamBean 
     */
    // MANY TO MANY
    public ExtraparamBean[] loadExtraparamViaExtraval(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        extraparam,extraval"
                         + " WHERE "    
                         + "     extraval.contractsampleid = ?"
                         + " AND extraval.extraparamid = extraparam.extraparamid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return ExtraparamManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Sampleitemreseach given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaSampleitemreseach(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractsampleitemid = ?"
                         + " AND sampleitemreseach.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DeviceBean using the relation table Sampleitemreseach given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of DeviceBean 
     */
    // MANY TO MANY
    public DeviceBean[] loadDeviceViaSampleitemreseach(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        device,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractsampleitemid = ?"
                         + " AND sampleitemreseach.deviceid = device.deviceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return DeviceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Sampleitemreseach given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaSampleitemreseach(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractsampleitemid = ?"
                         + " AND sampleitemreseach.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StandardBean using the relation table Sampleitemreseach given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of StandardBean 
     */
    // MANY TO MANY
    public StandardBean[] loadStandardViaSampleitemreseach(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        standard,sampleitemreseach"
                         + " WHERE "    
                         + "     sampleitemreseach.contractsampleitemid = ?"
                         + " AND sampleitemreseach.standardid = standard.standardid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return StandardManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Transitsampleitem given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaTransitsampleitem(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.contractsampleitemid = ?"
                         + " AND transitsampleitem.fromlocationid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Transitsampleitem given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaTransitsampleitem(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.contractsampleitemid = ?"
                         + " AND transitsampleitem.getbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of TransitactBean using the relation table Transitsampleitem given a ContractsampleitemBean object.
     *
     * @param pObject the ContractsampleitemBean pObject to be used
     * @return an array of TransitactBean 
     */
    // MANY TO MANY
    public TransitactBean[] loadTransitactViaTransitsampleitem(ContractsampleitemBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        transitact,transitsampleitem"
                         + " WHERE "    
                         + "     transitsampleitem.contractsampleitemid = ?"
                         + " AND transitsampleitem.transitactid = transitact.transitactid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContractsampleitemid());
             return TransitactManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table contractsampleitem.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table contractsampleitem with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from contractsampleitem " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table contractsampleitem with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ContractsampleitemBean pObject given a c
     *
     * @param pObject the ContractsampleitemBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ContractsampleitemBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from contractsampleitem WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isContractsampleitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
                }
    
                if (pObject.isContractsampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampletypeid= ?");
                }
    
                if (pObject.isBarcodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("barcode= ?");
                }
    
                if (pObject.isNum1Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num1= ?");
                }
    
                if (pObject.isNum2Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("num2= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isDisclaimModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("disclaim= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (pObject.isParentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parentid= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isInfoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("info= ?");
                }
    
                if (pObject.isDerivatetypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("derivatetypeid= ?");
                }
    
                if (pObject.isSpeciesidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("speciesid= ?");
                }
    
                if (pObject.isSrcModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("src= ?");
                }
    
                if (pObject.isInstitutionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isContractsampletypeidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampletypeid());
                }
    
                if (pObject.isBarcodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getBarcode());
                }
    
                if (pObject.isNum1Modified()) {
                    ps.setString(++_dirtyCount, pObject.getNum1());
                }
    
                if (pObject.isNum2Modified()) {
                    ps.setString(++_dirtyCount, pObject.getNum2());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDisclaimModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDisclaim());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isParentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParentid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getInfo());
                }
    
                if (pObject.isDerivatetypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDerivatetypeid());
                }
    
                if (pObject.isSpeciesidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }
    
                if (pObject.isSrcModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getSrc());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the contractsampleitem on a ContractsampleitemBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ContractsampleitemBean pObject
     */
    //72
    public ContractsampleitemBean decodeRow(ResultSet rs) throws SQLException
    {
        ContractsampleitemBean pObject = createContractsampleitemBean();
        pObject.setContractsampleitemid(Manager.getLong(rs, 1));
        pObject.setContractsampletypeid(Manager.getLong(rs, 2));
        pObject.setBarcode(rs.getString(3));
        pObject.setNum1(rs.getString(4));
        pObject.setNum2(rs.getString(5));
        pObject.setRegbyid(Manager.getInteger(rs, 6));
        pObject.setRegdate(rs.getTimestamp(7));
        pObject.setDisclaim(Manager.getBoolean(rs, 8));
        pObject.setStatus(Manager.getInteger(rs, 9));
        pObject.setParentid(Manager.getLong(rs, 10));
        pObject.setDeleted(Manager.getBoolean(rs, 11));
        pObject.setInfo(rs.getString(12));
        pObject.setDerivatetypeid(Manager.getInteger(rs, 13));
        pObject.setSpeciesid(Manager.getInteger(rs, 14));
        pObject.setSrc(Manager.getBoolean(rs, 15));
        pObject.setInstitutionid(Manager.getInteger(rs, 16));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the contractsampleitem table on a ContractsampleitemBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ContractsampleitemBean pObject
     */
    //73
    public ContractsampleitemBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ContractsampleitemBean pObject = createContractsampleitemBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_CONTRACTSAMPLEITEMID:
                    ++pos;
                    pObject.setContractsampleitemid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTSAMPLETYPEID:
                    ++pos;
                    pObject.setContractsampletypeid(Manager.getLong(rs, pos));
                    break;
                case ID_BARCODE:
                    ++pos;
                    pObject.setBarcode(rs.getString(pos));
                    break;
                case ID_NUM1:
                    ++pos;
                    pObject.setNum1(rs.getString(pos));
                    break;
                case ID_NUM2:
                    ++pos;
                    pObject.setNum2(rs.getString(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_DISCLAIM:
                    ++pos;
                    pObject.setDisclaim(Manager.getBoolean(rs, pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
                case ID_PARENTID:
                    ++pos;
                    pObject.setParentid(Manager.getLong(rs, pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_INFO:
                    ++pos;
                    pObject.setInfo(rs.getString(pos));
                    break;
                case ID_DERIVATETYPEID:
                    ++pos;
                    pObject.setDerivatetypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_SPECIESID:
                    ++pos;
                    pObject.setSpeciesid(Manager.getInteger(rs, pos));
                    break;
                case ID_SRC:
                    ++pos;
                    pObject.setSrc(Manager.getBoolean(rs, pos));
                    break;
                case ID_INSTITUTIONID:
                    ++pos;
                    pObject.setInstitutionid(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ContractsampleitemBean 
     */
    //41
    public ContractsampleitemBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ContractsampleitemBean 
     */
    public ContractsampleitemBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ContractsampleitemBean[])v.toArray(new ContractsampleitemBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ContractsampleitemListener listener = null;

    /**
     * Registers a unique ContractsampleitemListener listener.
     */
    //66.5
    public void registerListener(ContractsampleitemListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ContractsampleitemBean pObject.
     *
     * @param pObject the ContractsampleitemBean pObject to be saved
     */
    //67
    void beforeInsert(ContractsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ContractsampleitemBean pObject.
     *
     * @param pObject the ContractsampleitemBean pObject to be saved
     */
    //68
    void afterInsert(ContractsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ContractsampleitemBean pObject.
     *
     * @param pObject the ContractsampleitemBean pObject to be updated
     */
    //69
    void beforeUpdate(ContractsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ContractsampleitemBean pObject.
     *
     * @param pObject the ContractsampleitemBean pObject to be updated
     */
    //70
    void afterUpdate(ContractsampleitemBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
