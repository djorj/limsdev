// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ContractsampletypeBean
// extends+ 

// extends- 
{
    private Long contractsampletypeid;
    private boolean contractsampletypeid_is_modified = false;
    private boolean contractsampletypeid_is_initialized = false;
    
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private String boxnum;
    private boolean boxnum_is_modified = false;
    private boolean boxnum_is_initialized = false;
    
    private Long quantity;
    private boolean quantity_is_modified = false;
    private boolean quantity_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Boolean isbox;
    private boolean isbox_is_modified = false;
    private boolean isbox_is_initialized = false;
    
    private Long parentid;
    private boolean parentid_is_modified = false;
    private boolean parentid_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private String info;
    private boolean info_is_modified = false;
    private boolean info_is_initialized = false;
    
    private Integer speciesid;
    private boolean speciesid_is_modified = false;
    private boolean speciesid_is_initialized = false;
    
    private String stamp;
    private boolean stamp_is_modified = false;
    private boolean stamp_is_initialized = false;
    
    private Long appealid;
    private boolean appealid_is_modified = false;
    private boolean appealid_is_initialized = false;
    
    private Long actid;
    private boolean actid_is_modified = false;
    private boolean actid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ContractsampletypeBean()
    {
    }
    
    /**
     * Getter method for contractsampletypeid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.contractsampletypeid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractsampletypeid
     */
    public Long getContractsampletypeid()
    {
        return contractsampletypeid; 
    }

    /**
     * Setter method for contractsampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractsampletypeid
     */
    public void setContractsampletypeid(Long newVal) {
        if ((newVal != null && this.contractsampletypeid != null && (newVal.compareTo(this.contractsampletypeid) == 0)) || 
            (newVal == null && this.contractsampletypeid == null && contractsampletypeid_is_initialized)) {
            return; 
        } 
        this.contractsampletypeid = newVal; 
        contractsampletypeid_is_modified = true; 
        contractsampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for contractsampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractsampletypeid
     */
    public void setContractsampletypeid(long newVal) {
        setContractsampletypeid(new Long(newVal));
    }

    /**
     * Determines if the contractsampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractsampletypeidModified() {
        return contractsampletypeid_is_modified; 
    }

    /**
     * Determines if the contractsampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractsampletypeidInitialized() {
        return contractsampletypeid_is_initialized; 
    }

    /**
     * Getter method for contractid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.contractid
     * <li> foreign key: contract.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.sampletypeid
     * <li> foreign key: sampletype.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Getter method for boxnum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.boxnum
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of boxnum
     */
    public String getBoxnum()
    {
        return boxnum; 
    }

    /**
     * Setter method for boxnum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to boxnum
     */
    public void setBoxnum(String newVal) {
        if ((newVal != null && this.boxnum != null && (newVal.compareTo(this.boxnum) == 0)) || 
            (newVal == null && this.boxnum == null && boxnum_is_initialized)) {
            return; 
        } 
        this.boxnum = newVal; 
        boxnum_is_modified = true; 
        boxnum_is_initialized = true; 
    }

    /**
     * Determines if the boxnum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBoxnumModified() {
        return boxnum_is_modified; 
    }

    /**
     * Determines if the boxnum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBoxnumInitialized() {
        return boxnum_is_initialized; 
    }

    /**
     * Getter method for quantity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.quantity
     * <li>default value: 0
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of quantity
     */
    public Long getQuantity()
    {
        return quantity; 
    }

    /**
     * Setter method for quantity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to quantity
     */
    public void setQuantity(Long newVal) {
        if ((newVal != null && this.quantity != null && (newVal.compareTo(this.quantity) == 0)) || 
            (newVal == null && this.quantity == null && quantity_is_initialized)) {
            return; 
        } 
        this.quantity = newVal; 
        quantity_is_modified = true; 
        quantity_is_initialized = true; 
    }

    /**
     * Setter method for quantity.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to quantity
     */
    public void setQuantity(long newVal) {
        setQuantity(new Long(newVal));
    }

    /**
     * Determines if the quantity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isQuantityModified() {
        return quantity_is_modified; 
    }

    /**
     * Determines if the quantity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isQuantityInitialized() {
        return quantity_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for isbox.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.isbox
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of isbox
     */
    public Boolean getIsbox()
    {
        return isbox; 
    }

    /**
     * Setter method for isbox.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to isbox
     */
    public void setIsbox(Boolean newVal) {
        if ((newVal != null && this.isbox != null && newVal.equals(this.isbox)) || 
            (newVal == null && this.isbox == null && isbox_is_initialized)) {
            return; 
        } 
        this.isbox = newVal; 
        isbox_is_modified = true; 
        isbox_is_initialized = true; 
    }

    /**
     * Setter method for isbox.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to isbox
     */
    public void setIsbox(boolean newVal) {
        setIsbox(new Boolean(newVal));
    }

    /**
     * Determines if the isbox has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isIsboxModified() {
        return isbox_is_modified; 
    }

    /**
     * Determines if the isbox has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isIsboxInitialized() {
        return isbox_is_initialized; 
    }

    /**
     * Getter method for parentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.parentid
     * <li> foreign key: contractsampletype.contractsampletypeid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parentid
     */
    public Long getParentid()
    {
        return parentid; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(Long newVal) {
        if ((newVal != null && this.parentid != null && (newVal.compareTo(this.parentid) == 0)) || 
            (newVal == null && this.parentid == null && parentid_is_initialized)) {
            return; 
        } 
        this.parentid = newVal; 
        parentid_is_modified = true; 
        parentid_is_initialized = true; 
    }

    /**
     * Setter method for parentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parentid
     */
    public void setParentid(long newVal) {
        setParentid(new Long(newVal));
    }

    /**
     * Determines if the parentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParentidModified() {
        return parentid_is_modified; 
    }

    /**
     * Determines if the parentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParentidInitialized() {
        return parentid_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for info.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.info
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of info
     */
    public String getInfo()
    {
        return info; 
    }

    /**
     * Setter method for info.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to info
     */
    public void setInfo(String newVal) {
        if ((newVal != null && this.info != null && (newVal.compareTo(this.info) == 0)) || 
            (newVal == null && this.info == null && info_is_initialized)) {
            return; 
        } 
        this.info = newVal; 
        info_is_modified = true; 
        info_is_initialized = true; 
    }

    /**
     * Determines if the info has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInfoModified() {
        return info_is_modified; 
    }

    /**
     * Determines if the info has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInfoInitialized() {
        return info_is_initialized; 
    }

    /**
     * Getter method for speciesid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.speciesid
     * <li> foreign key: species.speciesid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of speciesid
     */
    public Integer getSpeciesid()
    {
        return speciesid; 
    }

    /**
     * Setter method for speciesid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to speciesid
     */
    public void setSpeciesid(Integer newVal) {
        if ((newVal != null && this.speciesid != null && (newVal.compareTo(this.speciesid) == 0)) || 
            (newVal == null && this.speciesid == null && speciesid_is_initialized)) {
            return; 
        } 
        this.speciesid = newVal; 
        speciesid_is_modified = true; 
        speciesid_is_initialized = true; 
    }

    /**
     * Setter method for speciesid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to speciesid
     */
    public void setSpeciesid(int newVal) {
        setSpeciesid(new Integer(newVal));
    }

    /**
     * Determines if the speciesid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSpeciesidModified() {
        return speciesid_is_modified; 
    }

    /**
     * Determines if the speciesid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSpeciesidInitialized() {
        return speciesid_is_initialized; 
    }

    /**
     * Getter method for stamp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.stamp
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of stamp
     */
    public String getStamp()
    {
        return stamp; 
    }

    /**
     * Setter method for stamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to stamp
     */
    public void setStamp(String newVal) {
        if ((newVal != null && this.stamp != null && (newVal.compareTo(this.stamp) == 0)) || 
            (newVal == null && this.stamp == null && stamp_is_initialized)) {
            return; 
        } 
        this.stamp = newVal; 
        stamp_is_modified = true; 
        stamp_is_initialized = true; 
    }

    /**
     * Determines if the stamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStampModified() {
        return stamp_is_modified; 
    }

    /**
     * Determines if the stamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStampInitialized() {
        return stamp_is_initialized; 
    }

    /**
     * Getter method for appealid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.appealid
     * <li> foreign key: appeal.appealid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of appealid
     */
    public Long getAppealid()
    {
        return appealid; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(Long newVal) {
        if ((newVal != null && this.appealid != null && (newVal.compareTo(this.appealid) == 0)) || 
            (newVal == null && this.appealid == null && appealid_is_initialized)) {
            return; 
        } 
        this.appealid = newVal; 
        appealid_is_modified = true; 
        appealid_is_initialized = true; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(long newVal) {
        setAppealid(new Long(newVal));
    }

    /**
     * Determines if the appealid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAppealidModified() {
        return appealid_is_modified; 
    }

    /**
     * Determines if the appealid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAppealidInitialized() {
        return appealid_is_initialized; 
    }

    /**
     * Getter method for actid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractsampletype.actid
     * <li> foreign key: act.actid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of actid
     */
    public Long getActid()
    {
        return actid; 
    }

    /**
     * Setter method for actid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(Long newVal) {
        if ((newVal != null && this.actid != null && (newVal.compareTo(this.actid) == 0)) || 
            (newVal == null && this.actid == null && actid_is_initialized)) {
            return; 
        } 
        this.actid = newVal; 
        actid_is_modified = true; 
        actid_is_initialized = true; 
    }

    /**
     * Setter method for actid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(long newVal) {
        setActid(new Long(newVal));
    }

    /**
     * Determines if the actid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActidModified() {
        return actid_is_modified; 
    }

    /**
     * Determines if the actid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActidInitialized() {
        return actid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return contractsampletypeid_is_modified || 
		contractid_is_modified || 
		sampletypeid_is_modified || 
		boxnum_is_modified || 
		quantity_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		isbox_is_modified || 
		parentid_is_modified || 
		deleted_is_modified || 
		info_is_modified || 
		speciesid_is_modified || 
		stamp_is_modified || 
		appealid_is_modified || 
		actid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        contractsampletypeid_is_modified = false;
        contractid_is_modified = false;
        sampletypeid_is_modified = false;
        boxnum_is_modified = false;
        quantity_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        isbox_is_modified = false;
        parentid_is_modified = false;
        deleted_is_modified = false;
        info_is_modified = false;
        speciesid_is_modified = false;
        stamp_is_modified = false;
        appealid_is_modified = false;
        actid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContractsampletypeBean bean) {
        setContractsampletypeid(bean.getContractsampletypeid());
        setContractid(bean.getContractid());
        setSampletypeid(bean.getSampletypeid());
        setBoxnum(bean.getBoxnum());
        setQuantity(bean.getQuantity());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setIsbox(bean.getIsbox());
        setParentid(bean.getParentid());
        setDeleted(bean.getDeleted());
        setInfo(bean.getInfo());
        setSpeciesid(bean.getSpeciesid());
        setStamp(bean.getStamp());
        setAppealid(bean.getAppealid());
        setActid(bean.getActid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[contractsampletype] "
                 + "\n - contractsampletype.contractsampletypeid = " + (contractsampletypeid_is_initialized ? ("[" + (contractsampletypeid == null ? null : contractsampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.boxnum = " + (boxnum_is_initialized ? ("[" + (boxnum == null ? null : boxnum.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.quantity = " + (quantity_is_initialized ? ("[" + (quantity == null ? null : quantity.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.isbox = " + (isbox_is_initialized ? ("[" + (isbox == null ? null : isbox.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.parentid = " + (parentid_is_initialized ? ("[" + (parentid == null ? null : parentid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.info = " + (info_is_initialized ? ("[" + (info == null ? null : info.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.speciesid = " + (speciesid_is_initialized ? ("[" + (speciesid == null ? null : speciesid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.stamp = " + (stamp_is_initialized ? ("[" + (stamp == null ? null : stamp.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.appealid = " + (appealid_is_initialized ? ("[" + (appealid == null ? null : appealid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractsampletype.actid = " + (actid_is_initialized ? ("[" + (actid == null ? null : actid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
