// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class InventoryitemBean
// extends+ 

// extends- 
{
    private Long inventoryitemid;
    private boolean inventoryitemid_is_modified = false;
    private boolean inventoryitemid_is_initialized = false;
    
    private Integer inventoryid;
    private boolean inventoryid_is_modified = false;
    private boolean inventoryid_is_initialized = false;
    
    private Long productid;
    private boolean productid_is_modified = false;
    private boolean productid_is_initialized = false;
    
    private Double amount;
    private boolean amount_is_modified = false;
    private boolean amount_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private String roomnumber;
    private boolean roomnumber_is_modified = false;
    private boolean roomnumber_is_initialized = false;
    
    private Integer responsibleid;
    private boolean responsibleid_is_modified = false;
    private boolean responsibleid_is_initialized = false;
    
    private Double realamount;
    private boolean realamount_is_modified = false;
    private boolean realamount_is_initialized = false;
    
    private Integer ownerid;
    private boolean ownerid_is_modified = false;
    private boolean ownerid_is_initialized = false;
    
    private String location;
    private boolean location_is_modified = false;
    private boolean location_is_initialized = false;
    
    private Long moveinventoryitemid;
    private boolean moveinventoryitemid_is_modified = false;
    private boolean moveinventoryitemid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    InventoryitemBean()
    {
    }
    
    /**
     * Getter method for inventoryitemid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.inventoryitemid
     * <li>default value: nextval('inventoryitemid_seq'::regclass)
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of inventoryitemid
     */
    public Long getInventoryitemid()
    {
        return inventoryitemid; 
    }

    /**
     * Setter method for inventoryitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to inventoryitemid
     */
    public void setInventoryitemid(Long newVal) {
        if ((newVal != null && this.inventoryitemid != null && (newVal.compareTo(this.inventoryitemid) == 0)) || 
            (newVal == null && this.inventoryitemid == null && inventoryitemid_is_initialized)) {
            return; 
        } 
        this.inventoryitemid = newVal; 
        inventoryitemid_is_modified = true; 
        inventoryitemid_is_initialized = true; 
    }

    /**
     * Setter method for inventoryitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to inventoryitemid
     */
    public void setInventoryitemid(long newVal) {
        setInventoryitemid(new Long(newVal));
    }

    /**
     * Determines if the inventoryitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInventoryitemidModified() {
        return inventoryitemid_is_modified; 
    }

    /**
     * Determines if the inventoryitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInventoryitemidInitialized() {
        return inventoryitemid_is_initialized; 
    }

    /**
     * Getter method for inventoryid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.inventoryid
     * <li> foreign key: inventory.inventoryid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of inventoryid
     */
    public Integer getInventoryid()
    {
        return inventoryid; 
    }

    /**
     * Setter method for inventoryid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to inventoryid
     */
    public void setInventoryid(Integer newVal) {
        if ((newVal != null && this.inventoryid != null && (newVal.compareTo(this.inventoryid) == 0)) || 
            (newVal == null && this.inventoryid == null && inventoryid_is_initialized)) {
            return; 
        } 
        this.inventoryid = newVal; 
        inventoryid_is_modified = true; 
        inventoryid_is_initialized = true; 
    }

    /**
     * Setter method for inventoryid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to inventoryid
     */
    public void setInventoryid(int newVal) {
        setInventoryid(new Integer(newVal));
    }

    /**
     * Determines if the inventoryid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInventoryidModified() {
        return inventoryid_is_modified; 
    }

    /**
     * Determines if the inventoryid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInventoryidInitialized() {
        return inventoryid_is_initialized; 
    }

    /**
     * Getter method for productid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.productid
     * <li> foreign key: product.productid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of productid
     */
    public Long getProductid()
    {
        return productid; 
    }

    /**
     * Setter method for productid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(Long newVal) {
        if ((newVal != null && this.productid != null && (newVal.compareTo(this.productid) == 0)) || 
            (newVal == null && this.productid == null && productid_is_initialized)) {
            return; 
        } 
        this.productid = newVal; 
        productid_is_modified = true; 
        productid_is_initialized = true; 
    }

    /**
     * Setter method for productid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(long newVal) {
        setProductid(new Long(newVal));
    }

    /**
     * Determines if the productid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductidModified() {
        return productid_is_modified; 
    }

    /**
     * Determines if the productid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductidInitialized() {
        return productid_is_initialized; 
    }

    /**
     * Getter method for amount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.amount
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of amount
     */
    public Double getAmount()
    {
        return amount; 
    }

    /**
     * Setter method for amount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(Double newVal) {
        if ((newVal != null && this.amount != null && (newVal.compareTo(this.amount) == 0)) || 
            (newVal == null && this.amount == null && amount_is_initialized)) {
            return; 
        } 
        this.amount = newVal; 
        amount_is_modified = true; 
        amount_is_initialized = true; 
    }

    /**
     * Setter method for amount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(double newVal) {
        setAmount(new Double(newVal));
    }

    /**
     * Determines if the amount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAmountModified() {
        return amount_is_modified; 
    }

    /**
     * Determines if the amount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAmountInitialized() {
        return amount_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.note
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for roomnumber.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.roomnumber
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of roomnumber
     */
    public String getRoomnumber()
    {
        return roomnumber; 
    }

    /**
     * Setter method for roomnumber.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to roomnumber
     */
    public void setRoomnumber(String newVal) {
        if ((newVal != null && this.roomnumber != null && (newVal.compareTo(this.roomnumber) == 0)) || 
            (newVal == null && this.roomnumber == null && roomnumber_is_initialized)) {
            return; 
        } 
        this.roomnumber = newVal; 
        roomnumber_is_modified = true; 
        roomnumber_is_initialized = true; 
    }

    /**
     * Determines if the roomnumber has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRoomnumberModified() {
        return roomnumber_is_modified; 
    }

    /**
     * Determines if the roomnumber has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRoomnumberInitialized() {
        return roomnumber_is_initialized; 
    }

    /**
     * Getter method for responsibleid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.responsibleid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of responsibleid
     */
    public Integer getResponsibleid()
    {
        return responsibleid; 
    }

    /**
     * Setter method for responsibleid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to responsibleid
     */
    public void setResponsibleid(Integer newVal) {
        if ((newVal != null && this.responsibleid != null && (newVal.compareTo(this.responsibleid) == 0)) || 
            (newVal == null && this.responsibleid == null && responsibleid_is_initialized)) {
            return; 
        } 
        this.responsibleid = newVal; 
        responsibleid_is_modified = true; 
        responsibleid_is_initialized = true; 
    }

    /**
     * Setter method for responsibleid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to responsibleid
     */
    public void setResponsibleid(int newVal) {
        setResponsibleid(new Integer(newVal));
    }

    /**
     * Determines if the responsibleid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResponsibleidModified() {
        return responsibleid_is_modified; 
    }

    /**
     * Determines if the responsibleid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResponsibleidInitialized() {
        return responsibleid_is_initialized; 
    }

    /**
     * Getter method for realamount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.realamount
     * <li>default value: 0
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of realamount
     */
    public Double getRealamount()
    {
        return realamount; 
    }

    /**
     * Setter method for realamount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to realamount
     */
    public void setRealamount(Double newVal) {
        if ((newVal != null && this.realamount != null && (newVal.compareTo(this.realamount) == 0)) || 
            (newVal == null && this.realamount == null && realamount_is_initialized)) {
            return; 
        } 
        this.realamount = newVal; 
        realamount_is_modified = true; 
        realamount_is_initialized = true; 
    }

    /**
     * Setter method for realamount.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to realamount
     */
    public void setRealamount(double newVal) {
        setRealamount(new Double(newVal));
    }

    /**
     * Determines if the realamount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRealamountModified() {
        return realamount_is_modified; 
    }

    /**
     * Determines if the realamount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRealamountInitialized() {
        return realamount_is_initialized; 
    }

    /**
     * Getter method for ownerid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.ownerid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of ownerid
     */
    public Integer getOwnerid()
    {
        return ownerid; 
    }

    /**
     * Setter method for ownerid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ownerid
     */
    public void setOwnerid(Integer newVal) {
        if ((newVal != null && this.ownerid != null && (newVal.compareTo(this.ownerid) == 0)) || 
            (newVal == null && this.ownerid == null && ownerid_is_initialized)) {
            return; 
        } 
        this.ownerid = newVal; 
        ownerid_is_modified = true; 
        ownerid_is_initialized = true; 
    }

    /**
     * Setter method for ownerid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ownerid
     */
    public void setOwnerid(int newVal) {
        setOwnerid(new Integer(newVal));
    }

    /**
     * Determines if the ownerid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOwneridModified() {
        return ownerid_is_modified; 
    }

    /**
     * Determines if the ownerid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOwneridInitialized() {
        return ownerid_is_initialized; 
    }

    /**
     * Getter method for location.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.location
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of location
     */
    public String getLocation()
    {
        return location; 
    }

    /**
     * Setter method for location.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to location
     */
    public void setLocation(String newVal) {
        if ((newVal != null && this.location != null && (newVal.compareTo(this.location) == 0)) || 
            (newVal == null && this.location == null && location_is_initialized)) {
            return; 
        } 
        this.location = newVal; 
        location_is_modified = true; 
        location_is_initialized = true; 
    }

    /**
     * Determines if the location has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLocationModified() {
        return location_is_modified; 
    }

    /**
     * Determines if the location has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLocationInitialized() {
        return location_is_initialized; 
    }

    /**
     * Getter method for moveinventoryitemid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: inventoryitem.moveinventoryitemid
     * <li> foreign key: inventoryitem.inventoryitemid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of moveinventoryitemid
     */
    public Long getMoveinventoryitemid()
    {
        return moveinventoryitemid; 
    }

    /**
     * Setter method for moveinventoryitemid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to moveinventoryitemid
     */
    public void setMoveinventoryitemid(Long newVal) {
        if ((newVal != null && this.moveinventoryitemid != null && (newVal.compareTo(this.moveinventoryitemid) == 0)) || 
            (newVal == null && this.moveinventoryitemid == null && moveinventoryitemid_is_initialized)) {
            return; 
        } 
        this.moveinventoryitemid = newVal; 
        moveinventoryitemid_is_modified = true; 
        moveinventoryitemid_is_initialized = true; 
    }

    /**
     * Setter method for moveinventoryitemid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to moveinventoryitemid
     */
    public void setMoveinventoryitemid(long newVal) {
        setMoveinventoryitemid(new Long(newVal));
    }

    /**
     * Determines if the moveinventoryitemid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMoveinventoryitemidModified() {
        return moveinventoryitemid_is_modified; 
    }

    /**
     * Determines if the moveinventoryitemid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMoveinventoryitemidInitialized() {
        return moveinventoryitemid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return inventoryitemid_is_modified || 
		inventoryid_is_modified || 
		productid_is_modified || 
		amount_is_modified || 
		price_is_modified || 
		note_is_modified || 
		roomnumber_is_modified || 
		responsibleid_is_modified || 
		realamount_is_modified || 
		ownerid_is_modified || 
		location_is_modified || 
		moveinventoryitemid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        inventoryitemid_is_modified = false;
        inventoryid_is_modified = false;
        productid_is_modified = false;
        amount_is_modified = false;
        price_is_modified = false;
        note_is_modified = false;
        roomnumber_is_modified = false;
        responsibleid_is_modified = false;
        realamount_is_modified = false;
        ownerid_is_modified = false;
        location_is_modified = false;
        moveinventoryitemid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(InventoryitemBean bean) {
        setInventoryitemid(bean.getInventoryitemid());
        setInventoryid(bean.getInventoryid());
        setProductid(bean.getProductid());
        setAmount(bean.getAmount());
        setPrice(bean.getPrice());
        setNote(bean.getNote());
        setRoomnumber(bean.getRoomnumber());
        setResponsibleid(bean.getResponsibleid());
        setRealamount(bean.getRealamount());
        setOwnerid(bean.getOwnerid());
        setLocation(bean.getLocation());
        setMoveinventoryitemid(bean.getMoveinventoryitemid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[inventoryitem] "
                 + "\n - inventoryitem.inventoryitemid = " + (inventoryitemid_is_initialized ? ("[" + (inventoryitemid == null ? null : inventoryitemid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.inventoryid = " + (inventoryid_is_initialized ? ("[" + (inventoryid == null ? null : inventoryid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.productid = " + (productid_is_initialized ? ("[" + (productid == null ? null : productid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.amount = " + (amount_is_initialized ? ("[" + (amount == null ? null : amount.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.roomnumber = " + (roomnumber_is_initialized ? ("[" + (roomnumber == null ? null : roomnumber.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.responsibleid = " + (responsibleid_is_initialized ? ("[" + (responsibleid == null ? null : responsibleid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.realamount = " + (realamount_is_initialized ? ("[" + (realamount == null ? null : realamount.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.ownerid = " + (ownerid_is_initialized ? ("[" + (ownerid == null ? null : ownerid.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.location = " + (location_is_initialized ? ("[" + (location == null ? null : location.toString()) + "]") : "not initialized") + ""
                 + "\n - inventoryitem.moveinventoryitemid = " + (moveinventoryitemid_is_initialized ? ("[" + (moveinventoryitemid == null ? null : moveinventoryitemid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
