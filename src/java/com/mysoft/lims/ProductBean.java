// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ProductBean
// extends+ 

// extends- 
{
    private Long productid;
    private boolean productid_is_modified = false;
    private boolean productid_is_initialized = false;
    
    private String code;
    private boolean code_is_modified = false;
    private boolean code_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private Integer punitid;
    private boolean punitid_is_modified = false;
    private boolean punitid_is_initialized = false;
    
    private Double limitqty;
    private boolean limitqty_is_modified = false;
    private boolean limitqty_is_initialized = false;
    
    private Long exp1;
    private boolean exp1_is_modified = false;
    private boolean exp1_is_initialized = false;
    
    private Long exp2;
    private boolean exp2_is_modified = false;
    private boolean exp2_is_initialized = false;
    
    private Integer productgroupid;
    private boolean productgroupid_is_modified = false;
    private boolean productgroupid_is_initialized = false;
    
    private String invnumber;
    private boolean invnumber_is_modified = false;
    private boolean invnumber_is_initialized = false;
    
    private String serialnum;
    private boolean serialnum_is_modified = false;
    private boolean serialnum_is_initialized = false;
    
    private String brandname;
    private boolean brandname_is_modified = false;
    private boolean brandname_is_initialized = false;
    
    private String model;
    private boolean model_is_modified = false;
    private boolean model_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ProductBean()
    {
    }
    
    /**
     * Getter method for productid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.productid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of productid
     */
    public Long getProductid()
    {
        return productid; 
    }

    /**
     * Setter method for productid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(Long newVal) {
        if ((newVal != null && this.productid != null && (newVal.compareTo(this.productid) == 0)) || 
            (newVal == null && this.productid == null && productid_is_initialized)) {
            return; 
        } 
        this.productid = newVal; 
        productid_is_modified = true; 
        productid_is_initialized = true; 
    }

    /**
     * Setter method for productid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to productid
     */
    public void setProductid(long newVal) {
        setProductid(new Long(newVal));
    }

    /**
     * Determines if the productid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductidModified() {
        return productid_is_modified; 
    }

    /**
     * Determines if the productid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductidInitialized() {
        return productid_is_initialized; 
    }

    /**
     * Getter method for code.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.code
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of code
     */
    public String getCode()
    {
        return code; 
    }

    /**
     * Setter method for code.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to code
     */
    public void setCode(String newVal) {
        if ((newVal != null && this.code != null && (newVal.compareTo(this.code) == 0)) || 
            (newVal == null && this.code == null && code_is_initialized)) {
            return; 
        } 
        this.code = newVal; 
        code_is_modified = true; 
        code_is_initialized = true; 
    }

    /**
     * Determines if the code has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCodeModified() {
        return code_is_modified; 
    }

    /**
     * Determines if the code has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCodeInitialized() {
        return code_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.name
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for punitid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.punitid
     * <li> foreign key: punit.punitid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of punitid
     */
    public Integer getPunitid()
    {
        return punitid; 
    }

    /**
     * Setter method for punitid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to punitid
     */
    public void setPunitid(Integer newVal) {
        if ((newVal != null && this.punitid != null && (newVal.compareTo(this.punitid) == 0)) || 
            (newVal == null && this.punitid == null && punitid_is_initialized)) {
            return; 
        } 
        this.punitid = newVal; 
        punitid_is_modified = true; 
        punitid_is_initialized = true; 
    }

    /**
     * Setter method for punitid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to punitid
     */
    public void setPunitid(int newVal) {
        setPunitid(new Integer(newVal));
    }

    /**
     * Determines if the punitid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPunitidModified() {
        return punitid_is_modified; 
    }

    /**
     * Determines if the punitid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPunitidInitialized() {
        return punitid_is_initialized; 
    }

    /**
     * Getter method for limitqty.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.limitqty
     * <li>default value: 0
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of limitqty
     */
    public Double getLimitqty()
    {
        return limitqty; 
    }

    /**
     * Setter method for limitqty.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to limitqty
     */
    public void setLimitqty(Double newVal) {
        if ((newVal != null && this.limitqty != null && (newVal.compareTo(this.limitqty) == 0)) || 
            (newVal == null && this.limitqty == null && limitqty_is_initialized)) {
            return; 
        } 
        this.limitqty = newVal; 
        limitqty_is_modified = true; 
        limitqty_is_initialized = true; 
    }

    /**
     * Setter method for limitqty.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to limitqty
     */
    public void setLimitqty(double newVal) {
        setLimitqty(new Double(newVal));
    }

    /**
     * Determines if the limitqty has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLimitqtyModified() {
        return limitqty_is_modified; 
    }

    /**
     * Determines if the limitqty has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLimitqtyInitialized() {
        return limitqty_is_initialized; 
    }

    /**
     * Getter method for exp1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.exp1
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of exp1
     */
    public Long getExp1()
    {
        return exp1; 
    }

    /**
     * Setter method for exp1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to exp1
     */
    public void setExp1(Long newVal) {
        if ((newVal != null && this.exp1 != null && (newVal.compareTo(this.exp1) == 0)) || 
            (newVal == null && this.exp1 == null && exp1_is_initialized)) {
            return; 
        } 
        this.exp1 = newVal; 
        exp1_is_modified = true; 
        exp1_is_initialized = true; 
    }

    /**
     * Setter method for exp1.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to exp1
     */
    public void setExp1(long newVal) {
        setExp1(new Long(newVal));
    }

    /**
     * Determines if the exp1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExp1Modified() {
        return exp1_is_modified; 
    }

    /**
     * Determines if the exp1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExp1Initialized() {
        return exp1_is_initialized; 
    }

    /**
     * Getter method for exp2.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.exp2
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of exp2
     */
    public Long getExp2()
    {
        return exp2; 
    }

    /**
     * Setter method for exp2.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to exp2
     */
    public void setExp2(Long newVal) {
        if ((newVal != null && this.exp2 != null && (newVal.compareTo(this.exp2) == 0)) || 
            (newVal == null && this.exp2 == null && exp2_is_initialized)) {
            return; 
        } 
        this.exp2 = newVal; 
        exp2_is_modified = true; 
        exp2_is_initialized = true; 
    }

    /**
     * Setter method for exp2.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to exp2
     */
    public void setExp2(long newVal) {
        setExp2(new Long(newVal));
    }

    /**
     * Determines if the exp2 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isExp2Modified() {
        return exp2_is_modified; 
    }

    /**
     * Determines if the exp2 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isExp2Initialized() {
        return exp2_is_initialized; 
    }

    /**
     * Getter method for productgroupid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.productgroupid
     * <li> foreign key: productgroup.productgroupid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of productgroupid
     */
    public Integer getProductgroupid()
    {
        return productgroupid; 
    }

    /**
     * Setter method for productgroupid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to productgroupid
     */
    public void setProductgroupid(Integer newVal) {
        if ((newVal != null && this.productgroupid != null && (newVal.compareTo(this.productgroupid) == 0)) || 
            (newVal == null && this.productgroupid == null && productgroupid_is_initialized)) {
            return; 
        } 
        this.productgroupid = newVal; 
        productgroupid_is_modified = true; 
        productgroupid_is_initialized = true; 
    }

    /**
     * Setter method for productgroupid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to productgroupid
     */
    public void setProductgroupid(int newVal) {
        setProductgroupid(new Integer(newVal));
    }

    /**
     * Determines if the productgroupid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isProductgroupidModified() {
        return productgroupid_is_modified; 
    }

    /**
     * Determines if the productgroupid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isProductgroupidInitialized() {
        return productgroupid_is_initialized; 
    }

    /**
     * Getter method for invnumber.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.invnumber
     * <li>column size: 50
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of invnumber
     */
    public String getInvnumber()
    {
        return invnumber; 
    }

    /**
     * Setter method for invnumber.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invnumber
     */
    public void setInvnumber(String newVal) {
        if ((newVal != null && this.invnumber != null && (newVal.compareTo(this.invnumber) == 0)) || 
            (newVal == null && this.invnumber == null && invnumber_is_initialized)) {
            return; 
        } 
        this.invnumber = newVal; 
        invnumber_is_modified = true; 
        invnumber_is_initialized = true; 
    }

    /**
     * Determines if the invnumber has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvnumberModified() {
        return invnumber_is_modified; 
    }

    /**
     * Determines if the invnumber has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvnumberInitialized() {
        return invnumber_is_initialized; 
    }

    /**
     * Getter method for serialnum.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.serialnum
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of serialnum
     */
    public String getSerialnum()
    {
        return serialnum; 
    }

    /**
     * Setter method for serialnum.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to serialnum
     */
    public void setSerialnum(String newVal) {
        if ((newVal != null && this.serialnum != null && (newVal.compareTo(this.serialnum) == 0)) || 
            (newVal == null && this.serialnum == null && serialnum_is_initialized)) {
            return; 
        } 
        this.serialnum = newVal; 
        serialnum_is_modified = true; 
        serialnum_is_initialized = true; 
    }

    /**
     * Determines if the serialnum has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSerialnumModified() {
        return serialnum_is_modified; 
    }

    /**
     * Determines if the serialnum has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSerialnumInitialized() {
        return serialnum_is_initialized; 
    }

    /**
     * Getter method for brandname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.brandname
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of brandname
     */
    public String getBrandname()
    {
        return brandname; 
    }

    /**
     * Setter method for brandname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to brandname
     */
    public void setBrandname(String newVal) {
        if ((newVal != null && this.brandname != null && (newVal.compareTo(this.brandname) == 0)) || 
            (newVal == null && this.brandname == null && brandname_is_initialized)) {
            return; 
        } 
        this.brandname = newVal; 
        brandname_is_modified = true; 
        brandname_is_initialized = true; 
    }

    /**
     * Determines if the brandname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBrandnameModified() {
        return brandname_is_modified; 
    }

    /**
     * Determines if the brandname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBrandnameInitialized() {
        return brandname_is_initialized; 
    }

    /**
     * Getter method for model.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: product.model
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of model
     */
    public String getModel()
    {
        return model; 
    }

    /**
     * Setter method for model.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to model
     */
    public void setModel(String newVal) {
        if ((newVal != null && this.model != null && (newVal.compareTo(this.model) == 0)) || 
            (newVal == null && this.model == null && model_is_initialized)) {
            return; 
        } 
        this.model = newVal; 
        model_is_modified = true; 
        model_is_initialized = true; 
    }

    /**
     * Determines if the model has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isModelModified() {
        return model_is_modified; 
    }

    /**
     * Determines if the model has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isModelInitialized() {
        return model_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return productid_is_modified || 
		code_is_modified || 
		name_is_modified || 
		punitid_is_modified || 
		limitqty_is_modified || 
		exp1_is_modified || 
		exp2_is_modified || 
		productgroupid_is_modified || 
		invnumber_is_modified || 
		serialnum_is_modified || 
		brandname_is_modified || 
		model_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        productid_is_modified = false;
        code_is_modified = false;
        name_is_modified = false;
        punitid_is_modified = false;
        limitqty_is_modified = false;
        exp1_is_modified = false;
        exp2_is_modified = false;
        productgroupid_is_modified = false;
        invnumber_is_modified = false;
        serialnum_is_modified = false;
        brandname_is_modified = false;
        model_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ProductBean bean) {
        setProductid(bean.getProductid());
        setCode(bean.getCode());
        setName(bean.getName());
        setPunitid(bean.getPunitid());
        setLimitqty(bean.getLimitqty());
        setExp1(bean.getExp1());
        setExp2(bean.getExp2());
        setProductgroupid(bean.getProductgroupid());
        setInvnumber(bean.getInvnumber());
        setSerialnum(bean.getSerialnum());
        setBrandname(bean.getBrandname());
        setModel(bean.getModel());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[product] "
                 + "\n - product.productid = " + (productid_is_initialized ? ("[" + (productid == null ? null : productid.toString()) + "]") : "not initialized") + ""
                 + "\n - product.code = " + (code_is_initialized ? ("[" + (code == null ? null : code.toString()) + "]") : "not initialized") + ""
                 + "\n - product.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - product.punitid = " + (punitid_is_initialized ? ("[" + (punitid == null ? null : punitid.toString()) + "]") : "not initialized") + ""
                 + "\n - product.limitqty = " + (limitqty_is_initialized ? ("[" + (limitqty == null ? null : limitqty.toString()) + "]") : "not initialized") + ""
                 + "\n - product.exp1 = " + (exp1_is_initialized ? ("[" + (exp1 == null ? null : exp1.toString()) + "]") : "not initialized") + ""
                 + "\n - product.exp2 = " + (exp2_is_initialized ? ("[" + (exp2 == null ? null : exp2.toString()) + "]") : "not initialized") + ""
                 + "\n - product.productgroupid = " + (productgroupid_is_initialized ? ("[" + (productgroupid == null ? null : productgroupid.toString()) + "]") : "not initialized") + ""
                 + "\n - product.invnumber = " + (invnumber_is_initialized ? ("[" + (invnumber == null ? null : invnumber.toString()) + "]") : "not initialized") + ""
                 + "\n - product.serialnum = " + (serialnum_is_initialized ? ("[" + (serialnum == null ? null : serialnum.toString()) + "]") : "not initialized") + ""
                 + "\n - product.brandname = " + (brandname_is_initialized ? ("[" + (brandname == null ? null : brandname.toString()) + "]") : "not initialized") + ""
                 + "\n - product.model = " + (model_is_initialized ? ("[" + (model == null ? null : model.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
