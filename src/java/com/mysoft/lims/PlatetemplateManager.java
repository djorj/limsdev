// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the platetemplate table.
 */
public class PlatetemplateManager
// extends+ 

// extends- 
{

    /**
     * Column platetemplateid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PLATETEMPLATEID = 0;
    public static final int TYPE_PLATETEMPLATEID = Types.BIGINT;
    public static final String NAME_PLATETEMPLATEID = "platetemplateid";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 1;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column w of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_W = 2;
    public static final int TYPE_W = Types.INTEGER;
    public static final String NAME_W = "w";

    /**
     * Column h of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_H = 3;
    public static final int TYPE_H = Types.INTEGER;
    public static final String NAME_H = "h";

    /**
     * Column labtestid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LABTESTID = 4;
    public static final int TYPE_LABTESTID = Types.INTEGER;
    public static final String NAME_LABTESTID = "labtestid";

    /**
     * Column zdefault of type Types.BIT mapped to Boolean.
     */
    public static final int ID_ZDEFAULT = 5;
    public static final int TYPE_ZDEFAULT = Types.BIT;
    public static final String NAME_ZDEFAULT = "zdefault";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 6;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";


    private static final String TABLE_NAME = "platetemplate";

    /**
     * Create an array of type string containing all the fields of the platetemplate table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "platetemplate.platetemplateid"
        ,"platetemplate.name"
        ,"platetemplate.w"
        ,"platetemplate.h"
        ,"platetemplate.labtestid"
        ,"platetemplate.zdefault"
        ,"platetemplate.regdate"
    };

    /**
     * Field that contains the comma separated fields of the platetemplate table.
     */
    private static final String ALL_FIELDS = "platetemplate.platetemplateid"
                            + ",platetemplate.name"
                            + ",platetemplate.w"
                            + ",platetemplate.h"
                            + ",platetemplate.labtestid"
                            + ",platetemplate.zdefault"
                            + ",platetemplate.regdate";

    private static PlatetemplateManager singleton = new PlatetemplateManager();

    /**
     * Get the PlatetemplateManager singleton.
     *
     * @return PlatetemplateManager 
     */
    synchronized public static PlatetemplateManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own PlatetemplateManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(PlatetemplateManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new PlatetemplateBean instance.
     *
     * @return the new PlatetemplateBean 
     */
    public PlatetemplateBean createPlatetemplateBean()
    {
        return new PlatetemplateBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a PlatetemplateBean from the platetemplate using its key fields.
     *
     * @return a unique PlatetemplateBean 
     */
    //12
    public PlatetemplateBean loadByPrimaryKey(Long platetemplateid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM platetemplate WHERE platetemplate.platetemplateid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, platetemplateid);
            PlatetemplateBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long platetemplateid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from platetemplate WHERE platetemplate.platetemplateid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, platetemplateid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads PlatetemplateBean array from the platetemplate table using its labtestid field.
     *
     * @return an array of PlatetemplateBean 
     */
    // LOAD BY IMPORTED KEY
    public PlatetemplateBean[] loadByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM platetemplate WHERE labtestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the platetemplate table by labtestid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM platetemplate WHERE labtestid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the LabtestBean object from the platetemplate.labtestid field.
     *
     * @param pObject the PlatetemplateBean 
     * @return the associated LabtestBean pObject
     */
    // GET IMPORTED
    public LabtestBean getLabtestBean(PlatetemplateBean pObject) throws SQLException
    {
        LabtestBean other = LabtestManager.getInstance().createLabtestBean();
        other.setLabtestid(pObject.getLabtestid());
        return LabtestManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the PlatetemplateBean object to the LabtestBean object.
     *
     * @param pObject the PlatetemplateBean object to use
     * @param pObjectToBeSet the LabtestBean object to associate to the PlatetemplateBean 
     * @return the associated LabtestBean pObject
     */
    // SET IMPORTED
    public PlatetemplateBean setLabtestBean(PlatetemplateBean pObject,LabtestBean pObjectToBeSet)
    {
        pObject.setLabtestid(pObjectToBeSet.getLabtestid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from platetemplate.
     *
     * @return an array of PlatetemplateManager pObject
     */
    //38
    public PlatetemplateBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM platetemplate",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of PlatetemplateBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting PlatetemplateBean table 
     */
    //49
    public PlatetemplateBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of PlatetemplateBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting PlatetemplateBean table 
     */
    //51
    public PlatetemplateBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from platetemplate " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from platetemplate ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (PlatetemplateBean[])v.toArray(new PlatetemplateBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from platetemplate table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the platetemplate table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM platetemplate " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the PlatetemplateBean pObject into the database.
     *
     * @param pObject the PlatetemplateBean pObject to be saved
     */
    //100
    public PlatetemplateBean save(PlatetemplateBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isPlatetemplateidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('platetemplateid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setPlatetemplateid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into platetemplate (");
    
                if (pObject.isPlatetemplateidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("platetemplateid");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isWModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("w");
                    _dirtyCount++;
                }

                if (pObject.isHModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("h");
                    _dirtyCount++;
                }

                if (pObject.isLabtestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestid");
                    _dirtyCount++;
                }

                if (pObject.isZdefaultModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("zdefault");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isPlatetemplateidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPlatetemplateid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isWModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getW());
                }
    
                if (pObject.isHModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getH());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isZdefaultModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getZdefault());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE platetemplate SET ");
                boolean useComma=false;

                if (pObject.isPlatetemplateidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("platetemplateid").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isWModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("w").append("=?");
                }

                if (pObject.isHModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("h").append("=?");
                }

                if (pObject.isLabtestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestid").append("=?");
                }

                if (pObject.isZdefaultModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("zdefault").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("platetemplate.platetemplateid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isPlatetemplateidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getPlatetemplateid());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isWModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getW());
                }

                if (pObject.isHModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getH());
                }

                if (pObject.isLabtestidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }

                if (pObject.isZdefaultModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getZdefault());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getPlatetemplateid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of PlatetemplateBean pObjects into the database.
     *
     * @param pObjects the PlatetemplateBean pObject table to be saved
     * @return the saved PlatetemplateBean array.
     */
    //65
    public PlatetemplateBean[] save(PlatetemplateBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique PlatetemplateBean pObject from a template one giving a c
     *
     * @param pObject the PlatetemplateBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public PlatetemplateBean loadUniqueUsingTemplate(PlatetemplateBean pObject) throws SQLException
    {
         PlatetemplateBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of PlatetemplateBean from a template one.
     *
     * @param pObject the PlatetemplateBean template to look for
     * @return all the PlatetemplateBean matching the template
     */
    //88
    public PlatetemplateBean[] loadUsingTemplate(PlatetemplateBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from platetemplate WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isPlatetemplateidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("platetemplateid= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isWModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("w= ?");
             }
    
             if (pObject.isHModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("h= ?");
             }
    
             if (pObject.isLabtestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
             }
    
             if (pObject.isZdefaultModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zdefault= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isPlatetemplateidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getPlatetemplateid());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isWModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getW());
             }
    
             if (pObject.isHModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getH());
             }
    
             if (pObject.isLabtestidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
             }
    
             if (pObject.isZdefaultModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getZdefault());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a PlatetemplateBean template.
     *
     * @param pObject the PlatetemplateBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(PlatetemplateBean pObject) throws SQLException
    {
        if (pObject.isPlatetemplateidInitialized())
            return deleteByPrimaryKey(pObject.getPlatetemplateid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM platetemplate WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isPlatetemplateidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("platetemplateid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isWInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("w").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isHInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("h").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLabtestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isZdefaultInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("zdefault").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isPlatetemplateidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getPlatetemplateid());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isWInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getW());
            }
    
            if (pObject.isHInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getH());
            }
    
            if (pObject.isLabtestidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
            }
    
            if (pObject.isZdefaultInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getZdefault());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of DeviceBean using the relation table Plate given a PlatetemplateBean object.
     *
     * @param pObject the PlatetemplateBean pObject to be used
     * @return an array of DeviceBean 
     */
    // MANY TO MANY
    public DeviceBean[] loadDeviceViaPlate(PlatetemplateBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        device,plate"
                         + " WHERE "    
                         + "     plate.platetemplateid = ?"
                         + " AND plate.deviceid = device.deviceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getPlatetemplateid());
             return DeviceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Plate given a PlatetemplateBean object.
     *
     * @param pObject the PlatetemplateBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaPlate(PlatetemplateBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,plate"
                         + " WHERE "    
                         + "     plate.platetemplateid = ?"
                         + " AND plate.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getPlatetemplateid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table platetemplate.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table platetemplate with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from platetemplate " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table platetemplate with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific PlatetemplateBean pObject given a c
     *
     * @param pObject the PlatetemplateBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(PlatetemplateBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from platetemplate WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isPlatetemplateidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("platetemplateid= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isWModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("w= ?");
                }
    
                if (pObject.isHModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("h= ?");
                }
    
                if (pObject.isLabtestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
                }
    
                if (pObject.isZdefaultModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("zdefault= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isPlatetemplateidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getPlatetemplateid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isWModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getW());
                }
    
                if (pObject.isHModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getH());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isZdefaultModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getZdefault());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the platetemplate on a PlatetemplateBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting PlatetemplateBean pObject
     */
    //72
    public PlatetemplateBean decodeRow(ResultSet rs) throws SQLException
    {
        PlatetemplateBean pObject = createPlatetemplateBean();
        pObject.setPlatetemplateid(Manager.getLong(rs, 1));
        pObject.setName(rs.getString(2));
        pObject.setW(Manager.getInteger(rs, 3));
        pObject.setH(Manager.getInteger(rs, 4));
        pObject.setLabtestid(Manager.getInteger(rs, 5));
        pObject.setZdefault(Manager.getBoolean(rs, 6));
        pObject.setRegdate(rs.getTimestamp(7));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the platetemplate table on a PlatetemplateBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting PlatetemplateBean pObject
     */
    //73
    public PlatetemplateBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        PlatetemplateBean pObject = createPlatetemplateBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_PLATETEMPLATEID:
                    ++pos;
                    pObject.setPlatetemplateid(Manager.getLong(rs, pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_W:
                    ++pos;
                    pObject.setW(Manager.getInteger(rs, pos));
                    break;
                case ID_H:
                    ++pos;
                    pObject.setH(Manager.getInteger(rs, pos));
                    break;
                case ID_LABTESTID:
                    ++pos;
                    pObject.setLabtestid(Manager.getInteger(rs, pos));
                    break;
                case ID_ZDEFAULT:
                    ++pos;
                    pObject.setZdefault(Manager.getBoolean(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of PlatetemplateBean 
     */
    //41
    public PlatetemplateBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of PlatetemplateBean 
     */
    public PlatetemplateBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (PlatetemplateBean[])v.toArray(new PlatetemplateBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private PlatetemplateListener listener = null;

    /**
     * Registers a unique PlatetemplateListener listener.
     */
    //66.5
    public void registerListener(PlatetemplateListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the PlatetemplateBean pObject.
     *
     * @param pObject the PlatetemplateBean pObject to be saved
     */
    //67
    void beforeInsert(PlatetemplateBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the PlatetemplateBean pObject.
     *
     * @param pObject the PlatetemplateBean pObject to be saved
     */
    //68
    void afterInsert(PlatetemplateBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the PlatetemplateBean pObject.
     *
     * @param pObject the PlatetemplateBean pObject to be updated
     */
    //69
    void beforeUpdate(PlatetemplateBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the PlatetemplateBean pObject.
     *
     * @param pObject the PlatetemplateBean pObject to be updated
     */
    //70
    void afterUpdate(PlatetemplateBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
