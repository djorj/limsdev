// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class InvoiceBean
// extends+ 

// extends- 
{
    private Long invoiceid;
    private boolean invoiceid_is_modified = false;
    private boolean invoiceid_is_initialized = false;
    
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private java.util.Date invoicedate;
    private boolean invoicedate_is_modified = false;
    private boolean invoicedate_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private Double vat;
    private boolean vat_is_modified = false;
    private boolean vat_is_initialized = false;
    
    private Integer operid;
    private boolean operid_is_modified = false;
    private boolean operid_is_initialized = false;
    
    private Long contragentid;
    private boolean contragentid_is_modified = false;
    private boolean contragentid_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer invoicetypeid;
    private boolean invoicetypeid_is_modified = false;
    private boolean invoicetypeid_is_initialized = false;
    
    private Integer invoicesourcetypeid;
    private boolean invoicesourcetypeid_is_modified = false;
    private boolean invoicesourcetypeid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    InvoiceBean()
    {
    }
    
    /**
     * Getter method for invoiceid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.invoiceid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of invoiceid
     */
    public Long getInvoiceid()
    {
        return invoiceid; 
    }

    /**
     * Setter method for invoiceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invoiceid
     */
    public void setInvoiceid(Long newVal) {
        if ((newVal != null && this.invoiceid != null && (newVal.compareTo(this.invoiceid) == 0)) || 
            (newVal == null && this.invoiceid == null && invoiceid_is_initialized)) {
            return; 
        } 
        this.invoiceid = newVal; 
        invoiceid_is_modified = true; 
        invoiceid_is_initialized = true; 
    }

    /**
     * Setter method for invoiceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to invoiceid
     */
    public void setInvoiceid(long newVal) {
        setInvoiceid(new Long(newVal));
    }

    /**
     * Determines if the invoiceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvoiceidModified() {
        return invoiceid_is_modified; 
    }

    /**
     * Determines if the invoiceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvoiceidInitialized() {
        return invoiceid_is_initialized; 
    }

    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.num
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for invoicedate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.invoicedate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of invoicedate
     */
    public java.util.Date getInvoicedate()
    {
        return invoicedate; 
    }

    /**
     * Setter method for invoicedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invoicedate
     */
    public void setInvoicedate(java.util.Date newVal) {
        if ((newVal != null && this.invoicedate != null && (newVal.compareTo(this.invoicedate) == 0)) || 
            (newVal == null && this.invoicedate == null && invoicedate_is_initialized)) {
            return; 
        } 
        this.invoicedate = newVal; 
        invoicedate_is_modified = true; 
        invoicedate_is_initialized = true; 
    }

    /**
     * Setter method for invoicedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to invoicedate
     */
    public void setInvoicedate(long newVal) {
        setInvoicedate(new java.util.Date(newVal));
    }

    /**
     * Determines if the invoicedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvoicedateModified() {
        return invoicedate_is_modified; 
    }

    /**
     * Determines if the invoicedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvoicedateInitialized() {
        return invoicedate_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for vat.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.vat
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of vat
     */
    public Double getVat()
    {
        return vat; 
    }

    /**
     * Setter method for vat.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to vat
     */
    public void setVat(Double newVal) {
        if ((newVal != null && this.vat != null && (newVal.compareTo(this.vat) == 0)) || 
            (newVal == null && this.vat == null && vat_is_initialized)) {
            return; 
        } 
        this.vat = newVal; 
        vat_is_modified = true; 
        vat_is_initialized = true; 
    }

    /**
     * Setter method for vat.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to vat
     */
    public void setVat(double newVal) {
        setVat(new Double(newVal));
    }

    /**
     * Determines if the vat has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVatModified() {
        return vat_is_modified; 
    }

    /**
     * Determines if the vat has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVatInitialized() {
        return vat_is_initialized; 
    }

    /**
     * Getter method for operid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.operid
     * <li> foreign key: oper.operid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of operid
     */
    public Integer getOperid()
    {
        return operid; 
    }

    /**
     * Setter method for operid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to operid
     */
    public void setOperid(Integer newVal) {
        if ((newVal != null && this.operid != null && (newVal.compareTo(this.operid) == 0)) || 
            (newVal == null && this.operid == null && operid_is_initialized)) {
            return; 
        } 
        this.operid = newVal; 
        operid_is_modified = true; 
        operid_is_initialized = true; 
    }

    /**
     * Setter method for operid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to operid
     */
    public void setOperid(int newVal) {
        setOperid(new Integer(newVal));
    }

    /**
     * Determines if the operid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOperidModified() {
        return operid_is_modified; 
    }

    /**
     * Determines if the operid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOperidInitialized() {
        return operid_is_initialized; 
    }

    /**
     * Getter method for contragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.contragentid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contragentid
     */
    public Long getContragentid()
    {
        return contragentid; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(Long newVal) {
        if ((newVal != null && this.contragentid != null && (newVal.compareTo(this.contragentid) == 0)) || 
            (newVal == null && this.contragentid == null && contragentid_is_initialized)) {
            return; 
        } 
        this.contragentid = newVal; 
        contragentid_is_modified = true; 
        contragentid_is_initialized = true; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(long newVal) {
        setContragentid(new Long(newVal));
    }

    /**
     * Determines if the contragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentidModified() {
        return contragentid_is_modified; 
    }

    /**
     * Determines if the contragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentidInitialized() {
        return contragentid_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.regbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for invoicetypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.invoicetypeid
     * <li> foreign key: invoicetype.invoicetypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of invoicetypeid
     */
    public Integer getInvoicetypeid()
    {
        return invoicetypeid; 
    }

    /**
     * Setter method for invoicetypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invoicetypeid
     */
    public void setInvoicetypeid(Integer newVal) {
        if ((newVal != null && this.invoicetypeid != null && (newVal.compareTo(this.invoicetypeid) == 0)) || 
            (newVal == null && this.invoicetypeid == null && invoicetypeid_is_initialized)) {
            return; 
        } 
        this.invoicetypeid = newVal; 
        invoicetypeid_is_modified = true; 
        invoicetypeid_is_initialized = true; 
    }

    /**
     * Setter method for invoicetypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to invoicetypeid
     */
    public void setInvoicetypeid(int newVal) {
        setInvoicetypeid(new Integer(newVal));
    }

    /**
     * Determines if the invoicetypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvoicetypeidModified() {
        return invoicetypeid_is_modified; 
    }

    /**
     * Determines if the invoicetypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvoicetypeidInitialized() {
        return invoicetypeid_is_initialized; 
    }

    /**
     * Getter method for invoicesourcetypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: invoice.invoicesourcetypeid
     * <li> foreign key: invoicesourcetype.invoicesourcetypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of invoicesourcetypeid
     */
    public Integer getInvoicesourcetypeid()
    {
        return invoicesourcetypeid; 
    }

    /**
     * Setter method for invoicesourcetypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to invoicesourcetypeid
     */
    public void setInvoicesourcetypeid(Integer newVal) {
        if ((newVal != null && this.invoicesourcetypeid != null && (newVal.compareTo(this.invoicesourcetypeid) == 0)) || 
            (newVal == null && this.invoicesourcetypeid == null && invoicesourcetypeid_is_initialized)) {
            return; 
        } 
        this.invoicesourcetypeid = newVal; 
        invoicesourcetypeid_is_modified = true; 
        invoicesourcetypeid_is_initialized = true; 
    }

    /**
     * Setter method for invoicesourcetypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to invoicesourcetypeid
     */
    public void setInvoicesourcetypeid(int newVal) {
        setInvoicesourcetypeid(new Integer(newVal));
    }

    /**
     * Determines if the invoicesourcetypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInvoicesourcetypeidModified() {
        return invoicesourcetypeid_is_modified; 
    }

    /**
     * Determines if the invoicesourcetypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInvoicesourcetypeidInitialized() {
        return invoicesourcetypeid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return invoiceid_is_modified || 
		num_is_modified || 
		invoicedate_is_modified || 
		price_is_modified || 
		vat_is_modified || 
		operid_is_modified || 
		contragentid_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		invoicetypeid_is_modified || 
		invoicesourcetypeid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        invoiceid_is_modified = false;
        num_is_modified = false;
        invoicedate_is_modified = false;
        price_is_modified = false;
        vat_is_modified = false;
        operid_is_modified = false;
        contragentid_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        invoicetypeid_is_modified = false;
        invoicesourcetypeid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(InvoiceBean bean) {
        setInvoiceid(bean.getInvoiceid());
        setNum(bean.getNum());
        setInvoicedate(bean.getInvoicedate());
        setPrice(bean.getPrice());
        setVat(bean.getVat());
        setOperid(bean.getOperid());
        setContragentid(bean.getContragentid());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setInvoicetypeid(bean.getInvoicetypeid());
        setInvoicesourcetypeid(bean.getInvoicesourcetypeid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[invoice] "
                 + "\n - invoice.invoiceid = " + (invoiceid_is_initialized ? ("[" + (invoiceid == null ? null : invoiceid.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.invoicedate = " + (invoicedate_is_initialized ? ("[" + (invoicedate == null ? null : invoicedate.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.vat = " + (vat_is_initialized ? ("[" + (vat == null ? null : vat.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.operid = " + (operid_is_initialized ? ("[" + (operid == null ? null : operid.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.contragentid = " + (contragentid_is_initialized ? ("[" + (contragentid == null ? null : contragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.invoicetypeid = " + (invoicetypeid_is_initialized ? ("[" + (invoicetypeid == null ? null : invoicetypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - invoice.invoicesourcetypeid = " + (invoicesourcetypeid_is_initialized ? ("[" + (invoicesourcetypeid == null ? null : invoicesourcetypeid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
