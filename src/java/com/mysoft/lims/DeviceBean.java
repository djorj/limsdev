// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class DeviceBean
// extends+ 

// extends- 
{
    private Integer deviceid;
    private boolean deviceid_is_modified = false;
    private boolean deviceid_is_initialized = false;
    
    private String name;
    private boolean name_is_modified = false;
    private boolean name_is_initialized = false;
    
    private String model;
    private boolean model_is_modified = false;
    private boolean model_is_initialized = false;
    
    private String sn;
    private boolean sn_is_modified = false;
    private boolean sn_is_initialized = false;
    
    private java.util.Date createdate;
    private boolean createdate_is_modified = false;
    private boolean createdate_is_initialized = false;
    
    private String conditioin;
    private boolean conditioin_is_modified = false;
    private boolean conditioin_is_initialized = false;
    
    private Integer institutionid;
    private boolean institutionid_is_modified = false;
    private boolean institutionid_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private Boolean hasplate;
    private boolean hasplate_is_modified = false;
    private boolean hasplate_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    DeviceBean()
    {
    }
    
    /**
     * Getter method for deviceid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.deviceid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of deviceid
     */
    public Integer getDeviceid()
    {
        return deviceid; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(Integer newVal) {
        if ((newVal != null && this.deviceid != null && (newVal.compareTo(this.deviceid) == 0)) || 
            (newVal == null && this.deviceid == null && deviceid_is_initialized)) {
            return; 
        } 
        this.deviceid = newVal; 
        deviceid_is_modified = true; 
        deviceid_is_initialized = true; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(int newVal) {
        setDeviceid(new Integer(newVal));
    }

    /**
     * Determines if the deviceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeviceidModified() {
        return deviceid_is_modified; 
    }

    /**
     * Determines if the deviceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeviceidInitialized() {
        return deviceid_is_initialized; 
    }

    /**
     * Getter method for name.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.name
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of name
     */
    public String getName()
    {
        return name; 
    }

    /**
     * Setter method for name.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to name
     */
    public void setName(String newVal) {
        if ((newVal != null && this.name != null && (newVal.compareTo(this.name) == 0)) || 
            (newVal == null && this.name == null && name_is_initialized)) {
            return; 
        } 
        this.name = newVal; 
        name_is_modified = true; 
        name_is_initialized = true; 
    }

    /**
     * Determines if the name has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNameModified() {
        return name_is_modified; 
    }

    /**
     * Determines if the name has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNameInitialized() {
        return name_is_initialized; 
    }

    /**
     * Getter method for model.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.model
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of model
     */
    public String getModel()
    {
        return model; 
    }

    /**
     * Setter method for model.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to model
     */
    public void setModel(String newVal) {
        if ((newVal != null && this.model != null && (newVal.compareTo(this.model) == 0)) || 
            (newVal == null && this.model == null && model_is_initialized)) {
            return; 
        } 
        this.model = newVal; 
        model_is_modified = true; 
        model_is_initialized = true; 
    }

    /**
     * Determines if the model has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isModelModified() {
        return model_is_modified; 
    }

    /**
     * Determines if the model has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isModelInitialized() {
        return model_is_initialized; 
    }

    /**
     * Getter method for sn.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.sn
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sn
     */
    public String getSn()
    {
        return sn; 
    }

    /**
     * Setter method for sn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sn
     */
    public void setSn(String newVal) {
        if ((newVal != null && this.sn != null && (newVal.compareTo(this.sn) == 0)) || 
            (newVal == null && this.sn == null && sn_is_initialized)) {
            return; 
        } 
        this.sn = newVal; 
        sn_is_modified = true; 
        sn_is_initialized = true; 
    }

    /**
     * Determines if the sn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSnModified() {
        return sn_is_modified; 
    }

    /**
     * Determines if the sn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSnInitialized() {
        return sn_is_initialized; 
    }

    /**
     * Getter method for createdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.createdate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of createdate
     */
    public java.util.Date getCreatedate()
    {
        return createdate; 
    }

    /**
     * Setter method for createdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to createdate
     */
    public void setCreatedate(java.util.Date newVal) {
        if ((newVal != null && this.createdate != null && (newVal.compareTo(this.createdate) == 0)) || 
            (newVal == null && this.createdate == null && createdate_is_initialized)) {
            return; 
        } 
        this.createdate = newVal; 
        createdate_is_modified = true; 
        createdate_is_initialized = true; 
    }

    /**
     * Setter method for createdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to createdate
     */
    public void setCreatedate(long newVal) {
        setCreatedate(new java.util.Date(newVal));
    }

    /**
     * Determines if the createdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreatedateModified() {
        return createdate_is_modified; 
    }

    /**
     * Determines if the createdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreatedateInitialized() {
        return createdate_is_initialized; 
    }

    /**
     * Getter method for conditioin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.conditioin
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of conditioin
     */
    public String getConditioin()
    {
        return conditioin; 
    }

    /**
     * Setter method for conditioin.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to conditioin
     */
    public void setConditioin(String newVal) {
        if ((newVal != null && this.conditioin != null && (newVal.compareTo(this.conditioin) == 0)) || 
            (newVal == null && this.conditioin == null && conditioin_is_initialized)) {
            return; 
        } 
        this.conditioin = newVal; 
        conditioin_is_modified = true; 
        conditioin_is_initialized = true; 
    }

    /**
     * Determines if the conditioin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConditioinModified() {
        return conditioin_is_modified; 
    }

    /**
     * Determines if the conditioin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConditioinInitialized() {
        return conditioin_is_initialized; 
    }

    /**
     * Getter method for institutionid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.institutionid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of institutionid
     */
    public Integer getInstitutionid()
    {
        return institutionid; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(Integer newVal) {
        if ((newVal != null && this.institutionid != null && (newVal.compareTo(this.institutionid) == 0)) || 
            (newVal == null && this.institutionid == null && institutionid_is_initialized)) {
            return; 
        } 
        this.institutionid = newVal; 
        institutionid_is_modified = true; 
        institutionid_is_initialized = true; 
    }

    /**
     * Setter method for institutionid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to institutionid
     */
    public void setInstitutionid(int newVal) {
        setInstitutionid(new Integer(newVal));
    }

    /**
     * Determines if the institutionid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInstitutionidModified() {
        return institutionid_is_modified; 
    }

    /**
     * Determines if the institutionid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInstitutionidInitialized() {
        return institutionid_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for hasplate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: device.hasplate
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of hasplate
     */
    public Boolean getHasplate()
    {
        return hasplate; 
    }

    /**
     * Setter method for hasplate.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to hasplate
     */
    public void setHasplate(Boolean newVal) {
        if ((newVal != null && this.hasplate != null && newVal.equals(this.hasplate)) || 
            (newVal == null && this.hasplate == null && hasplate_is_initialized)) {
            return; 
        } 
        this.hasplate = newVal; 
        hasplate_is_modified = true; 
        hasplate_is_initialized = true; 
    }

    /**
     * Setter method for hasplate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to hasplate
     */
    public void setHasplate(boolean newVal) {
        setHasplate(new Boolean(newVal));
    }

    /**
     * Determines if the hasplate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isHasplateModified() {
        return hasplate_is_modified; 
    }

    /**
     * Determines if the hasplate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isHasplateInitialized() {
        return hasplate_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return deviceid_is_modified || 
		name_is_modified || 
		model_is_modified || 
		sn_is_modified || 
		createdate_is_modified || 
		conditioin_is_modified || 
		institutionid_is_modified || 
		deleted_is_modified || 
		hasplate_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        deviceid_is_modified = false;
        name_is_modified = false;
        model_is_modified = false;
        sn_is_modified = false;
        createdate_is_modified = false;
        conditioin_is_modified = false;
        institutionid_is_modified = false;
        deleted_is_modified = false;
        hasplate_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(DeviceBean bean) {
        setDeviceid(bean.getDeviceid());
        setName(bean.getName());
        setModel(bean.getModel());
        setSn(bean.getSn());
        setCreatedate(bean.getCreatedate());
        setConditioin(bean.getConditioin());
        setInstitutionid(bean.getInstitutionid());
        setDeleted(bean.getDeleted());
        setHasplate(bean.getHasplate());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[device] "
                 + "\n - device.deviceid = " + (deviceid_is_initialized ? ("[" + (deviceid == null ? null : deviceid.toString()) + "]") : "not initialized") + ""
                 + "\n - device.name = " + (name_is_initialized ? ("[" + (name == null ? null : name.toString()) + "]") : "not initialized") + ""
                 + "\n - device.model = " + (model_is_initialized ? ("[" + (model == null ? null : model.toString()) + "]") : "not initialized") + ""
                 + "\n - device.sn = " + (sn_is_initialized ? ("[" + (sn == null ? null : sn.toString()) + "]") : "not initialized") + ""
                 + "\n - device.createdate = " + (createdate_is_initialized ? ("[" + (createdate == null ? null : createdate.toString()) + "]") : "not initialized") + ""
                 + "\n - device.conditioin = " + (conditioin_is_initialized ? ("[" + (conditioin == null ? null : conditioin.toString()) + "]") : "not initialized") + ""
                 + "\n - device.institutionid = " + (institutionid_is_initialized ? ("[" + (institutionid == null ? null : institutionid.toString()) + "]") : "not initialized") + ""
                 + "\n - device.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - device.hasplate = " + (hasplate_is_initialized ? ("[" + (hasplate == null ? null : hasplate.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
