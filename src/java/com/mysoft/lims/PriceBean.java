// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class PriceBean
// extends+ 

// extends- 
{
    private Integer priceid;
    private boolean priceid_is_modified = false;
    private boolean priceid_is_initialized = false;
    
    private java.util.Date pricedate;
    private boolean pricedate_is_modified = false;
    private boolean pricedate_is_initialized = false;
    
    private String reason;
    private boolean reason_is_modified = false;
    private boolean reason_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    PriceBean()
    {
    }
    
    /**
     * Getter method for priceid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: price.priceid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of priceid
     */
    public Integer getPriceid()
    {
        return priceid; 
    }

    /**
     * Setter method for priceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to priceid
     */
    public void setPriceid(Integer newVal) {
        if ((newVal != null && this.priceid != null && (newVal.compareTo(this.priceid) == 0)) || 
            (newVal == null && this.priceid == null && priceid_is_initialized)) {
            return; 
        } 
        this.priceid = newVal; 
        priceid_is_modified = true; 
        priceid_is_initialized = true; 
    }

    /**
     * Setter method for priceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to priceid
     */
    public void setPriceid(int newVal) {
        setPriceid(new Integer(newVal));
    }

    /**
     * Determines if the priceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceidModified() {
        return priceid_is_modified; 
    }

    /**
     * Determines if the priceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceidInitialized() {
        return priceid_is_initialized; 
    }

    /**
     * Getter method for pricedate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: price.pricedate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of pricedate
     */
    public java.util.Date getPricedate()
    {
        return pricedate; 
    }

    /**
     * Setter method for pricedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to pricedate
     */
    public void setPricedate(java.util.Date newVal) {
        if ((newVal != null && this.pricedate != null && (newVal.compareTo(this.pricedate) == 0)) || 
            (newVal == null && this.pricedate == null && pricedate_is_initialized)) {
            return; 
        } 
        this.pricedate = newVal; 
        pricedate_is_modified = true; 
        pricedate_is_initialized = true; 
    }

    /**
     * Setter method for pricedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to pricedate
     */
    public void setPricedate(long newVal) {
        setPricedate(new java.util.Date(newVal));
    }

    /**
     * Determines if the pricedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPricedateModified() {
        return pricedate_is_modified; 
    }

    /**
     * Determines if the pricedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPricedateInitialized() {
        return pricedate_is_initialized; 
    }

    /**
     * Getter method for reason.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: price.reason
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of reason
     */
    public String getReason()
    {
        return reason; 
    }

    /**
     * Setter method for reason.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reason
     */
    public void setReason(String newVal) {
        if ((newVal != null && this.reason != null && (newVal.compareTo(this.reason) == 0)) || 
            (newVal == null && this.reason == null && reason_is_initialized)) {
            return; 
        } 
        this.reason = newVal; 
        reason_is_modified = true; 
        reason_is_initialized = true; 
    }

    /**
     * Determines if the reason has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReasonModified() {
        return reason_is_modified; 
    }

    /**
     * Determines if the reason has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReasonInitialized() {
        return reason_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: price.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: price.labtestid
     * <li> foreign key: labtest.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return priceid_is_modified || 
		pricedate_is_modified || 
		reason_is_modified || 
		price_is_modified || 
		labtestid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        priceid_is_modified = false;
        pricedate_is_modified = false;
        reason_is_modified = false;
        price_is_modified = false;
        labtestid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(PriceBean bean) {
        setPriceid(bean.getPriceid());
        setPricedate(bean.getPricedate());
        setReason(bean.getReason());
        setPrice(bean.getPrice());
        setLabtestid(bean.getLabtestid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[price] "
                 + "\n - price.priceid = " + (priceid_is_initialized ? ("[" + (priceid == null ? null : priceid.toString()) + "]") : "not initialized") + ""
                 + "\n - price.pricedate = " + (pricedate_is_initialized ? ("[" + (pricedate == null ? null : pricedate.toString()) + "]") : "not initialized") + ""
                 + "\n - price.reason = " + (reason_is_initialized ? ("[" + (reason == null ? null : reason.toString()) + "]") : "not initialized") + ""
                 + "\n - price.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - price.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
