// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.util.Comparator;
// imports+ 

// imports- 

/**
 * Comparator class is used to sort the ContractclosingBean objects.
 */
public class ContractclosingComparator implements Comparator
// extends+ 

// extends- 
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ContractclosingComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractclosingComparator(ContractclosingManager.CONTRACTCLOSINGID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractclosingManager.ID_CONTRACTCLOSINGID
     *   <li>ContractclosingManager.ID_CONTRACTID
     *   <li>ContractclosingManager.ID_INSTITUTIONID
     *   <li>ContractclosingManager.ID_REMINDDATE
     *   <li>ContractclosingManager.ID_TAKEDATE
     *   <li>ContractclosingManager.ID_PERSONELS
     *   <li>ContractclosingManager.ID_REGBYID
     *   <li>ContractclosingManager.ID_REGDATE
     *   <li>ContractclosingManager.ID_APPEALID
     *   <li>ContractclosingManager.ID_ACTID
     * </ul>
     */
    public ContractclosingComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ContractclosingComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ContractclosingComparator(ContractclosingManager.CONTRACTCLOSINGID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ContractclosingManager.ID_CONTRACTCLOSINGID
     *   <li>ContractclosingManager.ID_CONTRACTID
     *   <li>ContractclosingManager.ID_INSTITUTIONID
     *   <li>ContractclosingManager.ID_ISINFO
     *   <li>ContractclosingManager.ID_REMINDDATE
     *   <li>ContractclosingManager.ID_TAKEDATE
     *   <li>ContractclosingManager.ID_PERSONELS
     *   <li>ContractclosingManager.ID_REGBYID
     *   <li>ContractclosingManager.ID_REGDATE
     *   <li>ContractclosingManager.ID_DELETED
     *   <li>ContractclosingManager.ID_APPEALID
     *   <li>ContractclosingManager.ID_ACTID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ContractclosingComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ContractclosingBean b1 = (ContractclosingBean)pObj1;
        ContractclosingBean b2 = (ContractclosingBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ContractclosingManager.ID_CONTRACTCLOSINGID:
                if (b1.getContractclosingid() == null && b2.getContractclosingid() != null) {
                    iReturn = -1;
                } else if (b1.getContractclosingid() == null && b2.getContractclosingid() == null) {
                    iReturn = 0;
                } else if (b1.getContractclosingid() != null && b2.getContractclosingid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractclosingid().compareTo(b2.getContractclosingid());
                }
                break;
            case ContractclosingManager.ID_CONTRACTID:
                if (b1.getContractid() == null && b2.getContractid() != null) {
                    iReturn = -1;
                } else if (b1.getContractid() == null && b2.getContractid() == null) {
                    iReturn = 0;
                } else if (b1.getContractid() != null && b2.getContractid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getContractid().compareTo(b2.getContractid());
                }
                break;
            case ContractclosingManager.ID_INSTITUTIONID:
                if (b1.getInstitutionid() == null && b2.getInstitutionid() != null) {
                    iReturn = -1;
                } else if (b1.getInstitutionid() == null && b2.getInstitutionid() == null) {
                    iReturn = 0;
                } else if (b1.getInstitutionid() != null && b2.getInstitutionid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getInstitutionid().compareTo(b2.getInstitutionid());
                }
                break;
            case ContractclosingManager.ID_REMINDDATE:
                if (b1.getReminddate() == null && b2.getReminddate() != null) {
                    iReturn = -1;
                } else if (b1.getReminddate() == null && b2.getReminddate() == null) {
                    iReturn = 0;
                } else if (b1.getReminddate() != null && b2.getReminddate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getReminddate().compareTo(b2.getReminddate());
                }
                break;
            case ContractclosingManager.ID_TAKEDATE:
                if (b1.getTakedate() == null && b2.getTakedate() != null) {
                    iReturn = -1;
                } else if (b1.getTakedate() == null && b2.getTakedate() == null) {
                    iReturn = 0;
                } else if (b1.getTakedate() != null && b2.getTakedate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getTakedate().compareTo(b2.getTakedate());
                }
                break;
            case ContractclosingManager.ID_PERSONELS:
                if (b1.getPersonels() == null && b2.getPersonels() != null) {
                    iReturn = -1;
                } else if (b1.getPersonels() == null && b2.getPersonels() == null) {
                    iReturn = 0;
                } else if (b1.getPersonels() != null && b2.getPersonels() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getPersonels().compareTo(b2.getPersonels());
                }
                break;
            case ContractclosingManager.ID_REGBYID:
                if (b1.getRegbyid() == null && b2.getRegbyid() != null) {
                    iReturn = -1;
                } else if (b1.getRegbyid() == null && b2.getRegbyid() == null) {
                    iReturn = 0;
                } else if (b1.getRegbyid() != null && b2.getRegbyid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegbyid().compareTo(b2.getRegbyid());
                }
                break;
            case ContractclosingManager.ID_REGDATE:
                if (b1.getRegdate() == null && b2.getRegdate() != null) {
                    iReturn = -1;
                } else if (b1.getRegdate() == null && b2.getRegdate() == null) {
                    iReturn = 0;
                } else if (b1.getRegdate() != null && b2.getRegdate() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getRegdate().compareTo(b2.getRegdate());
                }
                break;
            case ContractclosingManager.ID_APPEALID:
                if (b1.getAppealid() == null && b2.getAppealid() != null) {
                    iReturn = -1;
                } else if (b1.getAppealid() == null && b2.getAppealid() == null) {
                    iReturn = 0;
                } else if (b1.getAppealid() != null && b2.getAppealid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getAppealid().compareTo(b2.getAppealid());
                }
                break;
            case ContractclosingManager.ID_ACTID:
                if (b1.getActid() == null && b2.getActid() != null) {
                    iReturn = -1;
                } else if (b1.getActid() == null && b2.getActid() == null) {
                    iReturn = 0;
                } else if (b1.getActid() != null && b2.getActid() == null) {
                    iReturn = 1;
                } else { 
                    iReturn = b1.getActid().compareTo(b2.getActid());
                }
                break;
            default: 
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }
// class+ 

// class- 
}
