// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the sampletype table.
 */
public class SampletypeManager
// extends+ 

// extends- 
{

    /**
     * Column sampletypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SAMPLETYPEID = 0;
    public static final int TYPE_SAMPLETYPEID = Types.INTEGER;
    public static final String NAME_SAMPLETYPEID = "sampletypeid";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 1;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column companyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMPANYID = 2;
    public static final int TYPE_COMPANYID = Types.INTEGER;
    public static final String NAME_COMPANYID = "companyid";


    private static final String TABLE_NAME = "sampletype";

    /**
     * Create an array of type string containing all the fields of the sampletype table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "sampletype.sampletypeid"
        ,"sampletype.name"
        ,"sampletype.companyid"
    };

    /**
     * Field that contains the comma separated fields of the sampletype table.
     */
    private static final String ALL_FIELDS = "sampletype.sampletypeid"
                            + ",sampletype.name"
                            + ",sampletype.companyid";

    private static SampletypeManager singleton = new SampletypeManager();

    /**
     * Get the SampletypeManager singleton.
     *
     * @return SampletypeManager 
     */
    synchronized public static SampletypeManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own SampletypeManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(SampletypeManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new SampletypeBean instance.
     *
     * @return the new SampletypeBean 
     */
    public SampletypeBean createSampletypeBean()
    {
        return new SampletypeBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a SampletypeBean from the sampletype using its key fields.
     *
     * @return a unique SampletypeBean 
     */
    //12
    public SampletypeBean loadByPrimaryKey(Integer sampletypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampletype WHERE sampletype.sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, sampletypeid);
            SampletypeBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Integer sampletypeid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from sampletype WHERE sampletype.sampletypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, sampletypeid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads SampletypeBean array from the sampletype table using its companyid field.
     *
     * @return an array of SampletypeBean 
     */
    // LOAD BY IMPORTED KEY
    public SampletypeBean[] loadByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampletype WHERE companyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sampletype table by companyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sampletype WHERE companyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CompanyBean object from the sampletype.companyid field.
     *
     * @param pObject the SampletypeBean 
     * @return the associated CompanyBean pObject
     */
    // GET IMPORTED
    public CompanyBean getCompanyBean(SampletypeBean pObject) throws SQLException
    {
        CompanyBean other = CompanyManager.getInstance().createCompanyBean();
        other.setCompanyid(pObject.getCompanyid());
        return CompanyManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SampletypeBean object to the CompanyBean object.
     *
     * @param pObject the SampletypeBean object to use
     * @param pObjectToBeSet the CompanyBean object to associate to the SampletypeBean 
     * @return the associated CompanyBean pObject
     */
    // SET IMPORTED
    public SampletypeBean setCompanyBean(SampletypeBean pObject,CompanyBean pObjectToBeSet)
    {
        pObject.setCompanyid(pObjectToBeSet.getCompanyid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from sampletype.
     *
     * @return an array of SampletypeManager pObject
     */
    //38
    public SampletypeBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampletype",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SampletypeBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SampletypeBean table 
     */
    //49
    public SampletypeBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of SampletypeBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting SampletypeBean table 
     */
    //51
    public SampletypeBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from sampletype " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from sampletype ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (SampletypeBean[])v.toArray(new SampletypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from sampletype table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the sampletype table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM sampletype " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the SampletypeBean pObject into the database.
     *
     * @param pObject the SampletypeBean pObject to be saved
     */
    //100
    public SampletypeBean save(SampletypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isSampletypeidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('sampletypeid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setSampletypeid(Manager.getInteger(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into sampletype (");
    
                if (pObject.isSampletypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampletypeid");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isCompanyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyid");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE sampletype SET ");
                boolean useComma=false;

                if (pObject.isSampletypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampletypeid").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isCompanyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyid").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("sampletype.sampletypeid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isSampletypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isCompanyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of SampletypeBean pObjects into the database.
     *
     * @param pObjects the SampletypeBean pObject table to be saved
     * @return the saved SampletypeBean array.
     */
    //65
    public SampletypeBean[] save(SampletypeBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique SampletypeBean pObject from a template one giving a c
     *
     * @param pObject the SampletypeBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public SampletypeBean loadUniqueUsingTemplate(SampletypeBean pObject) throws SQLException
    {
         SampletypeBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of SampletypeBean from a template one.
     *
     * @param pObject the SampletypeBean template to look for
     * @return all the SampletypeBean matching the template
     */
    //88
    public SampletypeBean[] loadUsingTemplate(SampletypeBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from sampletype WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isSampletypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isCompanyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isSampletypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isCompanyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a SampletypeBean template.
     *
     * @param pObject the SampletypeBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(SampletypeBean pObject) throws SQLException
    {
        if (pObject.isSampletypeidInitialized())
            return deleteByPrimaryKey(pObject.getSampletypeid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM sampletype WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isSampletypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampletypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyid").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isSampletypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isCompanyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of CompanyBean using the relation table Contract given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of CompanyBean 
     */
    // MANY TO MANY
    public CompanyBean[] loadCompanyViaContract(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        company,contract"
                         + " WHERE "    
                         + "     contract.sampletypeid = ?"
                         + " AND contract.companyid = company.companyid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return CompanyManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContragentBean using the relation table Contract given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of ContragentBean 
     */
    // MANY TO MANY
    public ContragentBean[] loadContragentViaContract(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contragent,contract"
                         + " WHERE "    
                         + "     contract.sampletypeid = ?"
                         + " AND contract.contragentid = contragent.contragentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return ContragentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Contract given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaContract(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,contract"
                         + " WHERE "    
                         + "     contract.sampletypeid = ?"
                         + " AND contract.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Contractanalysis given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaContractanalysis(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.sampletypeid = ?"
                         + " AND contractanalysis.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Contractanalysis given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaContractanalysis(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.sampletypeid = ?"
                         + " AND contractanalysis.institutionid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Contractanalysis given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaContractanalysis(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,contractanalysis"
                         + " WHERE "    
                         + "     contractanalysis.sampletypeid = ?"
                         + " AND contractanalysis.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ActBean using the relation table Contractsampletype given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of ActBean 
     */
    // MANY TO MANY
    public ActBean[] loadActViaContractsampletype(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        act,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.sampletypeid = ?"
                         + " AND contractsampletype.actid = act.actid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return ActManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of AppealBean using the relation table Contractsampletype given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of AppealBean 
     */
    // MANY TO MANY
    public AppealBean[] loadAppealViaContractsampletype(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        appeal,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.sampletypeid = ?"
                         + " AND contractsampletype.appealid = appeal.appealid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return AppealManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractBean using the relation table Contractsampletype given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of ContractBean 
     */
    // MANY TO MANY
    public ContractBean[] loadContractViaContractsampletype(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contract,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.sampletypeid = ?"
                         + " AND contractsampletype.contractid = contract.contractid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return ContractManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContractsampletypeBean using the relation table Contractsampletype given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of ContractsampletypeBean 
     */
    // MANY TO MANY
    public ContractsampletypeBean[] loadContractsampletypeViaContractsampletype(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contractsampletype,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.sampletypeid = ?"
                         + " AND contractsampletype.parentid = contractsampletype.contractsampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return ContractsampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SpeciesBean using the relation table Contractsampletype given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of SpeciesBean 
     */
    // MANY TO MANY
    public SpeciesBean[] loadSpeciesViaContractsampletype(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        species,contractsampletype"
                         + " WHERE "    
                         + "     contractsampletype.sampletypeid = ?"
                         + " AND contractsampletype.speciesid = species.speciesid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return SpeciesManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Extraparam given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaExtraparam(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,extraparam"
                         + " WHERE "    
                         + "     extraparam.sampletypeid = ?"
                         + " AND extraparam.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of RestypeBean using the relation table Extraparam given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of RestypeBean 
     */
    // MANY TO MANY
    public RestypeBean[] loadRestypeViaExtraparam(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        restype,extraparam"
                         + " WHERE "    
                         + "     extraparam.sampletypeid = ?"
                         + " AND extraparam.restypeid = restype.restypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return RestypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Labtestparams given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaLabtestparams(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,labtestparams"
                         + " WHERE "    
                         + "     labtestparams.sampletypeid = ?"
                         + " AND labtestparams.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StandardBean using the relation table Labtestparams given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of StandardBean 
     */
    // MANY TO MANY
    public StandardBean[] loadStandardViaLabtestparams(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        standard,labtestparams"
                         + " WHERE "    
                         + "     labtestparams.sampletypeid = ?"
                         + " AND labtestparams.standardid = standard.standardid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return StandardManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Labtestsampletype given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaLabtestsampletype(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,labtestsampletype"
                         + " WHERE "    
                         + "     labtestsampletype.sampletypeid = ?"
                         + " AND labtestsampletype.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of DerivatetypeBean using the relation table Sampletypederivate given a SampletypeBean object.
     *
     * @param pObject the SampletypeBean pObject to be used
     * @return an array of DerivatetypeBean 
     */
    // MANY TO MANY
    public DerivatetypeBean[] loadDerivatetypeViaSampletypederivate(SampletypeBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        derivatetype,sampletypederivate"
                         + " WHERE "    
                         + "     sampletypederivate.sampletypeid = ?"
                         + " AND sampletypederivate.derivatetypeid = derivatetype.derivatetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setInteger(ps, 1, pObject.getSampletypeid());
             return DerivatetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table sampletype.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table sampletype with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from sampletype " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table sampletype with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific SampletypeBean pObject given a c
     *
     * @param pObject the SampletypeBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(SampletypeBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from sampletype WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isSampletypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampletypeid= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isCompanyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isSampletypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSampletypeid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the sampletype on a SampletypeBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting SampletypeBean pObject
     */
    //72
    public SampletypeBean decodeRow(ResultSet rs) throws SQLException
    {
        SampletypeBean pObject = createSampletypeBean();
        pObject.setSampletypeid(Manager.getInteger(rs, 1));
        pObject.setName(rs.getString(2));
        pObject.setCompanyid(Manager.getInteger(rs, 3));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the sampletype table on a SampletypeBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting SampletypeBean pObject
     */
    //73
    public SampletypeBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        SampletypeBean pObject = createSampletypeBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_SAMPLETYPEID:
                    ++pos;
                    pObject.setSampletypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_COMPANYID:
                    ++pos;
                    pObject.setCompanyid(Manager.getInteger(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SampletypeBean 
     */
    //41
    public SampletypeBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SampletypeBean 
     */
    public SampletypeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (SampletypeBean[])v.toArray(new SampletypeBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private SampletypeListener listener = null;

    /**
     * Registers a unique SampletypeListener listener.
     */
    //66.5
    public void registerListener(SampletypeListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the SampletypeBean pObject.
     *
     * @param pObject the SampletypeBean pObject to be saved
     */
    //67
    void beforeInsert(SampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the SampletypeBean pObject.
     *
     * @param pObject the SampletypeBean pObject to be saved
     */
    //68
    void afterInsert(SampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the SampletypeBean pObject.
     *
     * @param pObject the SampletypeBean pObject to be updated
     */
    //69
    void beforeUpdate(SampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the SampletypeBean pObject.
     *
     * @param pObject the SampletypeBean pObject to be updated
     */
    //70
    void afterUpdate(SampletypeBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
