// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ContractBean
// extends+ 

// extends- 
{
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private Integer companyid;
    private boolean companyid_is_modified = false;
    private boolean companyid_is_initialized = false;
    
    private Long contragentid;
    private boolean contragentid_is_modified = false;
    private boolean contragentid_is_initialized = false;
    
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private java.util.Date startdate;
    private boolean startdate_is_modified = false;
    private boolean startdate_is_initialized = false;
    
    private java.util.Date enddate;
    private boolean enddate_is_modified = false;
    private boolean enddate_is_initialized = false;
    
    private Double price;
    private boolean price_is_modified = false;
    private boolean price_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private Integer contracttype;
    private boolean contracttype_is_modified = false;
    private boolean contracttype_is_initialized = false;
    
    private String path;
    private boolean path_is_modified = false;
    private boolean path_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Long ownerid;
    private boolean ownerid_is_modified = false;
    private boolean ownerid_is_initialized = false;
    
    private String info;
    private boolean info_is_modified = false;
    private boolean info_is_initialized = false;
    
    private Boolean deleted;
    private boolean deleted_is_modified = false;
    private boolean deleted_is_initialized = false;
    
    private Integer status;
    private boolean status_is_modified = false;
    private boolean status_is_initialized = false;
    
    private Long contractownerid;
    private boolean contractownerid_is_modified = false;
    private boolean contractownerid_is_initialized = false;
    
    private java.util.Date reminddate;
    private boolean reminddate_is_modified = false;
    private boolean reminddate_is_initialized = false;
    
    private java.util.Date remindtime;
    private boolean remindtime_is_modified = false;
    private boolean remindtime_is_initialized = false;
    
    private Integer remindpid;
    private boolean remindpid_is_modified = false;
    private boolean remindpid_is_initialized = false;
    
    private Boolean transfer;
    private boolean transfer_is_modified = false;
    private boolean transfer_is_initialized = false;
    
    private String stamp;
    private boolean stamp_is_modified = false;
    private boolean stamp_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ContractBean()
    {
    }
    
    /**
     * Getter method for contractid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for companyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.companyid
     * <li> foreign key: company.companyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of companyid
     */
    public Integer getCompanyid()
    {
        return companyid; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(Integer newVal) {
        if ((newVal != null && this.companyid != null && (newVal.compareTo(this.companyid) == 0)) || 
            (newVal == null && this.companyid == null && companyid_is_initialized)) {
            return; 
        } 
        this.companyid = newVal; 
        companyid_is_modified = true; 
        companyid_is_initialized = true; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(int newVal) {
        setCompanyid(new Integer(newVal));
    }

    /**
     * Determines if the companyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyidModified() {
        return companyid_is_modified; 
    }

    /**
     * Determines if the companyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyidInitialized() {
        return companyid_is_initialized; 
    }

    /**
     * Getter method for contragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.contragentid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contragentid
     */
    public Long getContragentid()
    {
        return contragentid; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(Long newVal) {
        if ((newVal != null && this.contragentid != null && (newVal.compareTo(this.contragentid) == 0)) || 
            (newVal == null && this.contragentid == null && contragentid_is_initialized)) {
            return; 
        } 
        this.contragentid = newVal; 
        contragentid_is_modified = true; 
        contragentid_is_initialized = true; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(long newVal) {
        setContragentid(new Long(newVal));
    }

    /**
     * Determines if the contragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentidModified() {
        return contragentid_is_modified; 
    }

    /**
     * Determines if the contragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentidInitialized() {
        return contragentid_is_initialized; 
    }

    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.num
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for startdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.startdate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of startdate
     */
    public java.util.Date getStartdate()
    {
        return startdate; 
    }

    /**
     * Setter method for startdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to startdate
     */
    public void setStartdate(java.util.Date newVal) {
        if ((newVal != null && this.startdate != null && (newVal.compareTo(this.startdate) == 0)) || 
            (newVal == null && this.startdate == null && startdate_is_initialized)) {
            return; 
        } 
        this.startdate = newVal; 
        startdate_is_modified = true; 
        startdate_is_initialized = true; 
    }

    /**
     * Setter method for startdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to startdate
     */
    public void setStartdate(long newVal) {
        setStartdate(new java.util.Date(newVal));
    }

    /**
     * Determines if the startdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStartdateModified() {
        return startdate_is_modified; 
    }

    /**
     * Determines if the startdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStartdateInitialized() {
        return startdate_is_initialized; 
    }

    /**
     * Getter method for enddate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.enddate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of enddate
     */
    public java.util.Date getEnddate()
    {
        return enddate; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(java.util.Date newVal) {
        if ((newVal != null && this.enddate != null && (newVal.compareTo(this.enddate) == 0)) || 
            (newVal == null && this.enddate == null && enddate_is_initialized)) {
            return; 
        } 
        this.enddate = newVal; 
        enddate_is_modified = true; 
        enddate_is_initialized = true; 
    }

    /**
     * Setter method for enddate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to enddate
     */
    public void setEnddate(long newVal) {
        setEnddate(new java.util.Date(newVal));
    }

    /**
     * Determines if the enddate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEnddateModified() {
        return enddate_is_modified; 
    }

    /**
     * Determines if the enddate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEnddateInitialized() {
        return enddate_is_initialized; 
    }

    /**
     * Getter method for price.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.price
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of price
     */
    public Double getPrice()
    {
        return price; 
    }

    /**
     * Setter method for price.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(Double newVal) {
        if ((newVal != null && this.price != null && (newVal.compareTo(this.price) == 0)) || 
            (newVal == null && this.price == null && price_is_initialized)) {
            return; 
        } 
        this.price = newVal; 
        price_is_modified = true; 
        price_is_initialized = true; 
    }

    /**
     * Setter method for price.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to price
     */
    public void setPrice(double newVal) {
        setPrice(new Double(newVal));
    }

    /**
     * Determines if the price has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPriceModified() {
        return price_is_modified; 
    }

    /**
     * Determines if the price has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPriceInitialized() {
        return price_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.sampletypeid
     * <li> foreign key: sampletype.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Getter method for contracttype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.contracttype
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of contracttype
     */
    public Integer getContracttype()
    {
        return contracttype; 
    }

    /**
     * Setter method for contracttype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contracttype
     */
    public void setContracttype(Integer newVal) {
        if ((newVal != null && this.contracttype != null && (newVal.compareTo(this.contracttype) == 0)) || 
            (newVal == null && this.contracttype == null && contracttype_is_initialized)) {
            return; 
        } 
        this.contracttype = newVal; 
        contracttype_is_modified = true; 
        contracttype_is_initialized = true; 
    }

    /**
     * Setter method for contracttype.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contracttype
     */
    public void setContracttype(int newVal) {
        setContracttype(new Integer(newVal));
    }

    /**
     * Determines if the contracttype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContracttypeModified() {
        return contracttype_is_modified; 
    }

    /**
     * Determines if the contracttype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContracttypeInitialized() {
        return contracttype_is_initialized; 
    }

    /**
     * Getter method for path.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.path
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of path
     */
    public String getPath()
    {
        return path; 
    }

    /**
     * Setter method for path.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to path
     */
    public void setPath(String newVal) {
        if ((newVal != null && this.path != null && (newVal.compareTo(this.path) == 0)) || 
            (newVal == null && this.path == null && path_is_initialized)) {
            return; 
        } 
        this.path = newVal; 
        path_is_modified = true; 
        path_is_initialized = true; 
    }

    /**
     * Determines if the path has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPathModified() {
        return path_is_modified; 
    }

    /**
     * Determines if the path has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPathInitialized() {
        return path_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.regbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for ownerid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.ownerid
     * <li> foreign key: contragent.contragentid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of ownerid
     */
    public Long getOwnerid()
    {
        return ownerid; 
    }

    /**
     * Setter method for ownerid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to ownerid
     */
    public void setOwnerid(Long newVal) {
        if ((newVal != null && this.ownerid != null && (newVal.compareTo(this.ownerid) == 0)) || 
            (newVal == null && this.ownerid == null && ownerid_is_initialized)) {
            return; 
        } 
        this.ownerid = newVal; 
        ownerid_is_modified = true; 
        ownerid_is_initialized = true; 
    }

    /**
     * Setter method for ownerid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to ownerid
     */
    public void setOwnerid(long newVal) {
        setOwnerid(new Long(newVal));
    }

    /**
     * Determines if the ownerid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isOwneridModified() {
        return ownerid_is_modified; 
    }

    /**
     * Determines if the ownerid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isOwneridInitialized() {
        return ownerid_is_initialized; 
    }

    /**
     * Getter method for info.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.info
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of info
     */
    public String getInfo()
    {
        return info; 
    }

    /**
     * Setter method for info.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to info
     */
    public void setInfo(String newVal) {
        if ((newVal != null && this.info != null && (newVal.compareTo(this.info) == 0)) || 
            (newVal == null && this.info == null && info_is_initialized)) {
            return; 
        } 
        this.info = newVal; 
        info_is_modified = true; 
        info_is_initialized = true; 
    }

    /**
     * Determines if the info has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInfoModified() {
        return info_is_modified; 
    }

    /**
     * Determines if the info has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInfoInitialized() {
        return info_is_initialized; 
    }

    /**
     * Getter method for deleted.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.deleted
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of deleted
     */
    public Boolean getDeleted()
    {
        return deleted; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(Boolean newVal) {
        if ((newVal != null && this.deleted != null && newVal.equals(this.deleted)) || 
            (newVal == null && this.deleted == null && deleted_is_initialized)) {
            return; 
        } 
        this.deleted = newVal; 
        deleted_is_modified = true; 
        deleted_is_initialized = true; 
    }

    /**
     * Setter method for deleted.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deleted
     */
    public void setDeleted(boolean newVal) {
        setDeleted(new Boolean(newVal));
    }

    /**
     * Determines if the deleted has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeletedModified() {
        return deleted_is_modified; 
    }

    /**
     * Determines if the deleted has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeletedInitialized() {
        return deleted_is_initialized; 
    }

    /**
     * Getter method for status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.status
     * <li>default value: 1
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of status
     */
    public Integer getStatus()
    {
        return status; 
    }

    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(Integer newVal) {
        if ((newVal != null && this.status != null && (newVal.compareTo(this.status) == 0)) || 
            (newVal == null && this.status == null && status_is_initialized)) {
            return; 
        } 
        this.status = newVal; 
        status_is_modified = true; 
        status_is_initialized = true; 
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal) {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified() {
        return status_is_modified; 
    }

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized() {
        return status_is_initialized; 
    }

    /**
     * Getter method for contractownerid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.contractownerid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractownerid
     */
    public Long getContractownerid()
    {
        return contractownerid; 
    }

    /**
     * Setter method for contractownerid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractownerid
     */
    public void setContractownerid(Long newVal) {
        if ((newVal != null && this.contractownerid != null && (newVal.compareTo(this.contractownerid) == 0)) || 
            (newVal == null && this.contractownerid == null && contractownerid_is_initialized)) {
            return; 
        } 
        this.contractownerid = newVal; 
        contractownerid_is_modified = true; 
        contractownerid_is_initialized = true; 
    }

    /**
     * Setter method for contractownerid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractownerid
     */
    public void setContractownerid(long newVal) {
        setContractownerid(new Long(newVal));
    }

    /**
     * Determines if the contractownerid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractowneridModified() {
        return contractownerid_is_modified; 
    }

    /**
     * Determines if the contractownerid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractowneridInitialized() {
        return contractownerid_is_initialized; 
    }

    /**
     * Getter method for reminddate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.reminddate
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.DATE
     * </ul>
     *
     * @return the value of reminddate
     */
    public java.util.Date getReminddate()
    {
        return reminddate; 
    }

    /**
     * Setter method for reminddate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reminddate
     */
    public void setReminddate(java.util.Date newVal) {
        if ((newVal != null && this.reminddate != null && (newVal.compareTo(this.reminddate) == 0)) || 
            (newVal == null && this.reminddate == null && reminddate_is_initialized)) {
            return; 
        } 
        this.reminddate = newVal; 
        reminddate_is_modified = true; 
        reminddate_is_initialized = true; 
    }

    /**
     * Setter method for reminddate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reminddate
     */
    public void setReminddate(long newVal) {
        setReminddate(new java.util.Date(newVal));
    }

    /**
     * Determines if the reminddate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReminddateModified() {
        return reminddate_is_modified; 
    }

    /**
     * Determines if the reminddate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReminddateInitialized() {
        return reminddate_is_initialized; 
    }

    /**
     * Getter method for remindtime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.remindtime
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIME
     * </ul>
     *
     * @return the value of remindtime
     */
    public java.util.Date getRemindtime()
    {
        return remindtime; 
    }

    /**
     * Setter method for remindtime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to remindtime
     */
    public void setRemindtime(java.util.Date newVal) {
        if ((newVal != null && this.remindtime != null && (newVal.compareTo(this.remindtime) == 0)) || 
            (newVal == null && this.remindtime == null && remindtime_is_initialized)) {
            return; 
        } 
        this.remindtime = newVal; 
        remindtime_is_modified = true; 
        remindtime_is_initialized = true; 
    }

    /**
     * Setter method for remindtime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to remindtime
     */
    public void setRemindtime(long newVal) {
        setRemindtime(new java.util.Date(newVal));
    }

    /**
     * Determines if the remindtime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRemindtimeModified() {
        return remindtime_is_modified; 
    }

    /**
     * Determines if the remindtime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRemindtimeInitialized() {
        return remindtime_is_initialized; 
    }

    /**
     * Getter method for remindpid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.remindpid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of remindpid
     */
    public Integer getRemindpid()
    {
        return remindpid; 
    }

    /**
     * Setter method for remindpid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to remindpid
     */
    public void setRemindpid(Integer newVal) {
        if ((newVal != null && this.remindpid != null && (newVal.compareTo(this.remindpid) == 0)) || 
            (newVal == null && this.remindpid == null && remindpid_is_initialized)) {
            return; 
        } 
        this.remindpid = newVal; 
        remindpid_is_modified = true; 
        remindpid_is_initialized = true; 
    }

    /**
     * Setter method for remindpid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to remindpid
     */
    public void setRemindpid(int newVal) {
        setRemindpid(new Integer(newVal));
    }

    /**
     * Determines if the remindpid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRemindpidModified() {
        return remindpid_is_modified; 
    }

    /**
     * Determines if the remindpid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRemindpidInitialized() {
        return remindpid_is_initialized; 
    }

    /**
     * Getter method for transfer.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.transfer
     * <li>default value: false
     * <li>column size: 1
     * <li>jdbc type returned by the driver: Types.BIT
     * </ul>
     *
     * @return the value of transfer
     */
    public Boolean getTransfer()
    {
        return transfer; 
    }

    /**
     * Setter method for transfer.
     * <br>
     * Attention, there will be no comparison with current value which
     * means calling this method will mark the field as 'modified' in all cases.
     *
     * @param newVal the new value to be assigned to transfer
     */
    public void setTransfer(Boolean newVal) {
        if ((newVal != null && this.transfer != null && newVal.equals(this.transfer)) || 
            (newVal == null && this.transfer == null && transfer_is_initialized)) {
            return; 
        } 
        this.transfer = newVal; 
        transfer_is_modified = true; 
        transfer_is_initialized = true; 
    }

    /**
     * Setter method for transfer.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to transfer
     */
    public void setTransfer(boolean newVal) {
        setTransfer(new Boolean(newVal));
    }

    /**
     * Determines if the transfer has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTransferModified() {
        return transfer_is_modified; 
    }

    /**
     * Determines if the transfer has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTransferInitialized() {
        return transfer_is_initialized; 
    }

    /**
     * Getter method for stamp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contract.stamp
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of stamp
     */
    public String getStamp()
    {
        return stamp; 
    }

    /**
     * Setter method for stamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to stamp
     */
    public void setStamp(String newVal) {
        if ((newVal != null && this.stamp != null && (newVal.compareTo(this.stamp) == 0)) || 
            (newVal == null && this.stamp == null && stamp_is_initialized)) {
            return; 
        } 
        this.stamp = newVal; 
        stamp_is_modified = true; 
        stamp_is_initialized = true; 
    }

    /**
     * Determines if the stamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStampModified() {
        return stamp_is_modified; 
    }

    /**
     * Determines if the stamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStampInitialized() {
        return stamp_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return contractid_is_modified || 
		companyid_is_modified || 
		contragentid_is_modified || 
		num_is_modified || 
		startdate_is_modified || 
		enddate_is_modified || 
		price_is_modified || 
		sampletypeid_is_modified || 
		contracttype_is_modified || 
		path_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		ownerid_is_modified || 
		info_is_modified || 
		deleted_is_modified || 
		status_is_modified || 
		contractownerid_is_modified || 
		reminddate_is_modified || 
		remindtime_is_modified || 
		remindpid_is_modified || 
		transfer_is_modified || 
		stamp_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        contractid_is_modified = false;
        companyid_is_modified = false;
        contragentid_is_modified = false;
        num_is_modified = false;
        startdate_is_modified = false;
        enddate_is_modified = false;
        price_is_modified = false;
        sampletypeid_is_modified = false;
        contracttype_is_modified = false;
        path_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        ownerid_is_modified = false;
        info_is_modified = false;
        deleted_is_modified = false;
        status_is_modified = false;
        contractownerid_is_modified = false;
        reminddate_is_modified = false;
        remindtime_is_modified = false;
        remindpid_is_modified = false;
        transfer_is_modified = false;
        stamp_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContractBean bean) {
        setContractid(bean.getContractid());
        setCompanyid(bean.getCompanyid());
        setContragentid(bean.getContragentid());
        setNum(bean.getNum());
        setStartdate(bean.getStartdate());
        setEnddate(bean.getEnddate());
        setPrice(bean.getPrice());
        setSampletypeid(bean.getSampletypeid());
        setContracttype(bean.getContracttype());
        setPath(bean.getPath());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setOwnerid(bean.getOwnerid());
        setInfo(bean.getInfo());
        setDeleted(bean.getDeleted());
        setStatus(bean.getStatus());
        setContractownerid(bean.getContractownerid());
        setReminddate(bean.getReminddate());
        setRemindtime(bean.getRemindtime());
        setRemindpid(bean.getRemindpid());
        setTransfer(bean.getTransfer());
        setStamp(bean.getStamp());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[contract] "
                 + "\n - contract.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.companyid = " + (companyid_is_initialized ? ("[" + (companyid == null ? null : companyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.contragentid = " + (contragentid_is_initialized ? ("[" + (contragentid == null ? null : contragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.startdate = " + (startdate_is_initialized ? ("[" + (startdate == null ? null : startdate.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.enddate = " + (enddate_is_initialized ? ("[" + (enddate == null ? null : enddate.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.price = " + (price_is_initialized ? ("[" + (price == null ? null : price.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.contracttype = " + (contracttype_is_initialized ? ("[" + (contracttype == null ? null : contracttype.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.path = " + (path_is_initialized ? ("[" + (path == null ? null : path.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.ownerid = " + (ownerid_is_initialized ? ("[" + (ownerid == null ? null : ownerid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.info = " + (info_is_initialized ? ("[" + (info == null ? null : info.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.deleted = " + (deleted_is_initialized ? ("[" + (deleted == null ? null : deleted.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.status = " + (status_is_initialized ? ("[" + (status == null ? null : status.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.contractownerid = " + (contractownerid_is_initialized ? ("[" + (contractownerid == null ? null : contractownerid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.reminddate = " + (reminddate_is_initialized ? ("[" + (reminddate == null ? null : reminddate.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.remindtime = " + (remindtime_is_initialized ? ("[" + (remindtime == null ? null : remindtime.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.remindpid = " + (remindpid_is_initialized ? ("[" + (remindpid == null ? null : remindpid.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.transfer = " + (transfer_is_initialized ? ("[" + (transfer == null ? null : transfer.toString()) + "]") : "not initialized") + ""
                 + "\n - contract.stamp = " + (stamp_is_initialized ? ("[" + (stamp == null ? null : stamp.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
