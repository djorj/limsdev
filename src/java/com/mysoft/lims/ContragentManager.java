// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the contragent table.
 */
public class ContragentManager
// extends+ 

// extends- 
{

    /**
     * Column contragentid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRAGENTID = 0;
    public static final int TYPE_CONTRAGENTID = Types.BIGINT;
    public static final String NAME_CONTRAGENTID = "contragentid";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 1;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column idn of type Types.VARCHAR mapped to String.
     */
    public static final int ID_IDN = 2;
    public static final int TYPE_IDN = Types.VARCHAR;
    public static final String NAME_IDN = "idn";

    /**
     * Column address of type Types.VARCHAR mapped to String.
     */
    public static final int ID_ADDRESS = 3;
    public static final int TYPE_ADDRESS = Types.VARCHAR;
    public static final String NAME_ADDRESS = "address";

    /**
     * Column phone of type Types.VARCHAR mapped to String.
     */
    public static final int ID_PHONE = 4;
    public static final int TYPE_PHONE = Types.VARCHAR;
    public static final String NAME_PHONE = "phone";

    /**
     * Column contact of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CONTACT = 5;
    public static final int TYPE_CONTACT = Types.VARCHAR;
    public static final String NAME_CONTACT = "contact";

    /**
     * Column bankdata of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BANKDATA = 6;
    public static final int TYPE_BANKDATA = Types.VARCHAR;
    public static final String NAME_BANKDATA = "bankdata";

    /**
     * Column note of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NOTE = 7;
    public static final int TYPE_NOTE = Types.VARCHAR;
    public static final String NAME_NOTE = "note";

    /**
     * Column contragenttypeid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_CONTRAGENTTYPEID = 8;
    public static final int TYPE_CONTRAGENTTYPEID = Types.INTEGER;
    public static final String NAME_CONTRAGENTTYPEID = "contragenttypeid";

    /**
     * Column email of type Types.VARCHAR mapped to String.
     */
    public static final int ID_EMAIL = 9;
    public static final int TYPE_EMAIL = Types.VARCHAR;
    public static final String NAME_EMAIL = "email";

    /**
     * Column url of type Types.VARCHAR mapped to String.
     */
    public static final int ID_URL = 10;
    public static final int TYPE_URL = Types.VARCHAR;
    public static final String NAME_URL = "url";

    /**
     * Column companyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_COMPANYID = 11;
    public static final int TYPE_COMPANYID = Types.INTEGER;
    public static final String NAME_COMPANYID = "companyid";

    /**
     * Column type of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TYPE = 12;
    public static final int TYPE_TYPE = Types.INTEGER;
    public static final String NAME_TYPE = "type";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 13;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 14;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column regionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGIONID = 15;
    public static final int TYPE_REGIONID = Types.INTEGER;
    public static final String NAME_REGIONID = "regionid";

    /**
     * Column raionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_RAIONID = 16;
    public static final int TYPE_RAIONID = Types.INTEGER;
    public static final String NAME_RAIONID = "raionid";

    /**
     * Column villageid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_VILLAGEID = 17;
    public static final int TYPE_VILLAGEID = Types.INTEGER;
    public static final String NAME_VILLAGEID = "villageid";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 18;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column fname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_FNAME = 19;
    public static final int TYPE_FNAME = Types.VARCHAR;
    public static final String NAME_FNAME = "fname";

    /**
     * Column lname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_LNAME = 20;
    public static final int TYPE_LNAME = Types.VARCHAR;
    public static final String NAME_LNAME = "lname";

    /**
     * Column vat of type Types.BIT mapped to Boolean.
     */
    public static final int ID_VAT = 21;
    public static final int TYPE_VAT = Types.BIT;
    public static final String NAME_VAT = "vat";


    private static final String TABLE_NAME = "contragent";

    /**
     * Create an array of type string containing all the fields of the contragent table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "contragent.contragentid"
        ,"contragent.name"
        ,"contragent.idn"
        ,"contragent.address"
        ,"contragent.phone"
        ,"contragent.contact"
        ,"contragent.bankdata"
        ,"contragent.note"
        ,"contragent.contragenttypeid"
        ,"contragent.email"
        ,"contragent.url"
        ,"contragent.companyid"
        ,"contragent.type"
        ,"contragent.regbyid"
        ,"contragent.regdate"
        ,"contragent.regionid"
        ,"contragent.raionid"
        ,"contragent.villageid"
        ,"contragent.deleted"
        ,"contragent.fname"
        ,"contragent.lname"
        ,"contragent.vat"
    };

    /**
     * Field that contains the comma separated fields of the contragent table.
     */
    private static final String ALL_FIELDS = "contragent.contragentid"
                            + ",contragent.name"
                            + ",contragent.idn"
                            + ",contragent.address"
                            + ",contragent.phone"
                            + ",contragent.contact"
                            + ",contragent.bankdata"
                            + ",contragent.note"
                            + ",contragent.contragenttypeid"
                            + ",contragent.email"
                            + ",contragent.url"
                            + ",contragent.companyid"
                            + ",contragent.type"
                            + ",contragent.regbyid"
                            + ",contragent.regdate"
                            + ",contragent.regionid"
                            + ",contragent.raionid"
                            + ",contragent.villageid"
                            + ",contragent.deleted"
                            + ",contragent.fname"
                            + ",contragent.lname"
                            + ",contragent.vat";

    private static ContragentManager singleton = new ContragentManager();

    /**
     * Get the ContragentManager singleton.
     *
     * @return ContragentManager 
     */
    synchronized public static ContragentManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ContragentManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ContragentManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ContragentBean instance.
     *
     * @return the new ContragentBean 
     */
    public ContragentBean createContragentBean()
    {
        return new ContragentBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ContragentBean from the contragent using its key fields.
     *
     * @return a unique ContragentBean 
     */
    //12
    public ContragentBean loadByPrimaryKey(Long contragentid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE contragent.contragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contragentid);
            ContragentBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long contragentid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from contragent WHERE contragent.contragentid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, contragentid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ContragentBean array from the contragent table using its companyid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE companyid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by companyid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByCompanyid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE companyid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContragentBean array from the contragent table using its contragenttypeid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadByContragenttypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE contragenttypeid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by contragenttypeid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContragenttypeid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE contragenttypeid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContragentBean array from the contragent table using its raionid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadByRaionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE raionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by raionid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRaionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE raionid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContragentBean array from the contragent table using its regionid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadByRegionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE regionid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by regionid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByRegionid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE regionid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ContragentBean array from the contragent table using its villageid field.
     *
     * @return an array of ContragentBean 
     */
    // LOAD BY IMPORTED KEY
    public ContragentBean[] loadByVillageid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent WHERE villageid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the contragent table by villageid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByVillageid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM contragent WHERE villageid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the CompanyBean object from the contragent.companyid field.
     *
     * @param pObject the ContragentBean 
     * @return the associated CompanyBean pObject
     */
    // GET IMPORTED
    public CompanyBean getCompanyBean(ContragentBean pObject) throws SQLException
    {
        CompanyBean other = CompanyManager.getInstance().createCompanyBean();
        other.setCompanyid(pObject.getCompanyid());
        return CompanyManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContragentBean object to the CompanyBean object.
     *
     * @param pObject the ContragentBean object to use
     * @param pObjectToBeSet the CompanyBean object to associate to the ContragentBean 
     * @return the associated CompanyBean pObject
     */
    // SET IMPORTED
    public ContragentBean setCompanyBean(ContragentBean pObject,CompanyBean pObjectToBeSet)
    {
        pObject.setCompanyid(pObjectToBeSet.getCompanyid());
        return pObject;
    }

    /**
     * Retrieves the ContragenttypeBean object from the contragent.contragenttypeid field.
     *
     * @param pObject the ContragentBean 
     * @return the associated ContragenttypeBean pObject
     */
    // GET IMPORTED
    public ContragenttypeBean getContragenttypeBean(ContragentBean pObject) throws SQLException
    {
        ContragenttypeBean other = ContragenttypeManager.getInstance().createContragenttypeBean();
        other.setContragenttypeid(pObject.getContragenttypeid());
        return ContragenttypeManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContragentBean object to the ContragenttypeBean object.
     *
     * @param pObject the ContragentBean object to use
     * @param pObjectToBeSet the ContragenttypeBean object to associate to the ContragentBean 
     * @return the associated ContragenttypeBean pObject
     */
    // SET IMPORTED
    public ContragentBean setContragenttypeBean(ContragentBean pObject,ContragenttypeBean pObjectToBeSet)
    {
        pObject.setContragenttypeid(pObjectToBeSet.getContragenttypeid());
        return pObject;
    }

    /**
     * Retrieves the TunitBean object from the contragent.tunitid field.
     *
     * @param pObject the ContragentBean 
     * @return the associated TunitBean pObject
     */
    // GET IMPORTED
    public TunitBean getTunitBean(ContragentBean pObject) throws SQLException
    {
        TunitBean other = TunitManager.getInstance().createTunitBean();
        other.setTunitid(pObject.getRaionid());
        return TunitManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ContragentBean object to the TunitBean object.
     *
     * @param pObject the ContragentBean object to use
     * @param pObjectToBeSet the TunitBean object to associate to the ContragentBean 
     * @return the associated TunitBean pObject
     */
    // SET IMPORTED
    public ContragentBean setTunitBean(ContragentBean pObject,TunitBean pObjectToBeSet)
    {
        pObject.setRaionid(pObjectToBeSet.getTunitid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from contragent.
     *
     * @return an array of ContragentManager pObject
     */
    //38
    public ContragentBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM contragent",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ContragentBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ContragentBean table 
     */
    //49
    public ContragentBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ContragentBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ContragentBean table 
     */
    //51
    public ContragentBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from contragent " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from contragent ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ContragentBean[])v.toArray(new ContragentBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from contragent table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the contragent table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM contragent " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ContragentBean pObject into the database.
     *
     * @param pObject the ContragentBean pObject to be saved
     */
    //100
    public ContragentBean save(ContragentBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isContragentidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('contragentid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setContragentid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into contragent (");
    
                if (pObject.isContragentidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contragentid");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isIdnModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("idn");
                    _dirtyCount++;
                }

                if (pObject.isAddressModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("address");
                    _dirtyCount++;
                }

                if (pObject.isPhoneModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("phone");
                    _dirtyCount++;
                }

                if (pObject.isContactModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contact");
                    _dirtyCount++;
                }

                if (pObject.isBankdataModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bankdata");
                    _dirtyCount++;
                }

                if (pObject.isNoteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("note");
                    _dirtyCount++;
                }

                if (pObject.isContragenttypeidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contragenttypeid");
                    _dirtyCount++;
                }

                if (pObject.isEmailModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("email");
                    _dirtyCount++;
                }

                if (pObject.isUrlModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("url");
                    _dirtyCount++;
                }

                if (pObject.isCompanyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("companyid");
                    _dirtyCount++;
                }

                if (pObject.isTypeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("type");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isRegionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regionid");
                    _dirtyCount++;
                }

                if (pObject.isRaionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("raionid");
                    _dirtyCount++;
                }

                if (pObject.isVillageidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("villageid");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isFnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("fname");
                    _dirtyCount++;
                }

                if (pObject.isLnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("lname");
                    _dirtyCount++;
                }

                if (pObject.isVatModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("vat");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isContactModified()) {
                    ps.setString(++_dirtyCount, pObject.getContact());
                }
    
                if (pObject.isBankdataModified()) {
                    ps.setString(++_dirtyCount, pObject.getBankdata());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isContragenttypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getContragenttypeid());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isUrlModified()) {
                    ps.setString(++_dirtyCount, pObject.getUrl());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isTypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isRegionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
                }
    
                if (pObject.isRaionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
                }
    
                if (pObject.isVillageidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isVatModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getVat());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE contragent SET ");
                boolean useComma=false;

                if (pObject.isContragentidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contragentid").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isIdnModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("idn").append("=?");
                }

                if (pObject.isAddressModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("address").append("=?");
                }

                if (pObject.isPhoneModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("phone").append("=?");
                }

                if (pObject.isContactModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contact").append("=?");
                }

                if (pObject.isBankdataModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bankdata").append("=?");
                }

                if (pObject.isNoteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("note").append("=?");
                }

                if (pObject.isContragenttypeidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contragenttypeid").append("=?");
                }

                if (pObject.isEmailModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("email").append("=?");
                }

                if (pObject.isUrlModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("url").append("=?");
                }

                if (pObject.isCompanyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("companyid").append("=?");
                }

                if (pObject.isTypeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("type").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isRegionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regionid").append("=?");
                }

                if (pObject.isRaionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("raionid").append("=?");
                }

                if (pObject.isVillageidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("villageid").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isFnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("fname").append("=?");
                }

                if (pObject.isLnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("lname").append("=?");
                }

                if (pObject.isVatModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("vat").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("contragent.contragentid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isContragentidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isIdnModified()) {
                      ps.setString(++_dirtyCount, pObject.getIdn());
                }

                if (pObject.isAddressModified()) {
                      ps.setString(++_dirtyCount, pObject.getAddress());
                }

                if (pObject.isPhoneModified()) {
                      ps.setString(++_dirtyCount, pObject.getPhone());
                }

                if (pObject.isContactModified()) {
                      ps.setString(++_dirtyCount, pObject.getContact());
                }

                if (pObject.isBankdataModified()) {
                      ps.setString(++_dirtyCount, pObject.getBankdata());
                }

                if (pObject.isNoteModified()) {
                      ps.setString(++_dirtyCount, pObject.getNote());
                }

                if (pObject.isContragenttypeidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getContragenttypeid());
                }

                if (pObject.isEmailModified()) {
                      ps.setString(++_dirtyCount, pObject.getEmail());
                }

                if (pObject.isUrlModified()) {
                      ps.setString(++_dirtyCount, pObject.getUrl());
                }

                if (pObject.isCompanyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }

                if (pObject.isTypeModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isRegionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
                }

                if (pObject.isRaionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
                }

                if (pObject.isVillageidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isFnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getFname());
                }

                if (pObject.isLnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getLname());
                }

                if (pObject.isVatModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getVat());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ContragentBean pObjects into the database.
     *
     * @param pObjects the ContragentBean pObject table to be saved
     * @return the saved ContragentBean array.
     */
    //65
    public ContragentBean[] save(ContragentBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ContragentBean pObject from a template one giving a c
     *
     * @param pObject the ContragentBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ContragentBean loadUniqueUsingTemplate(ContragentBean pObject) throws SQLException
    {
         ContragentBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ContragentBean from a template one.
     *
     * @param pObject the ContragentBean template to look for
     * @return all the ContragentBean matching the template
     */
    //88
    public ContragentBean[] loadUsingTemplate(ContragentBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from contragent WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isContragentidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isIdnModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
             }
    
             if (pObject.isAddressModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
             }
    
             if (pObject.isPhoneModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
             }
    
             if (pObject.isContactModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contact= ?");
             }
    
             if (pObject.isBankdataModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bankdata= ?");
             }
    
             if (pObject.isNoteModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
             }
    
             if (pObject.isContragenttypeidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragenttypeid= ?");
             }
    
             if (pObject.isEmailModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
             }
    
             if (pObject.isUrlModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("url= ?");
             }
    
             if (pObject.isCompanyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
             }
    
             if (pObject.isTypeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("type= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isRegionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regionid= ?");
             }
    
             if (pObject.isRaionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("raionid= ?");
             }
    
             if (pObject.isVillageidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("villageid= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isFnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
             }
    
             if (pObject.isLnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
             }
    
             if (pObject.isVatModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vat= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isContragentidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isIdnModified()) {
                 ps.setString(++_dirtyCount, pObject.getIdn());
             }
    
             if (pObject.isAddressModified()) {
                 ps.setString(++_dirtyCount, pObject.getAddress());
             }
    
             if (pObject.isPhoneModified()) {
                 ps.setString(++_dirtyCount, pObject.getPhone());
             }
    
             if (pObject.isContactModified()) {
                 ps.setString(++_dirtyCount, pObject.getContact());
             }
    
             if (pObject.isBankdataModified()) {
                 ps.setString(++_dirtyCount, pObject.getBankdata());
             }
    
             if (pObject.isNoteModified()) {
                 ps.setString(++_dirtyCount, pObject.getNote());
             }
    
             if (pObject.isContragenttypeidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getContragenttypeid());
             }
    
             if (pObject.isEmailModified()) {
                 ps.setString(++_dirtyCount, pObject.getEmail());
             }
    
             if (pObject.isUrlModified()) {
                 ps.setString(++_dirtyCount, pObject.getUrl());
             }
    
             if (pObject.isCompanyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
             }
    
             if (pObject.isTypeModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isRegionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
             }
    
             if (pObject.isRaionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
             }
    
             if (pObject.isVillageidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isFnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getFname());
             }
    
             if (pObject.isLnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getLname());
             }
    
             if (pObject.isVatModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getVat());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ContragentBean template.
     *
     * @param pObject the ContragentBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ContragentBean pObject) throws SQLException
    {
        if (pObject.isContragentidInitialized())
            return deleteByPrimaryKey(pObject.getContragentid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM contragent WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isContragentidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contragentid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isIdnInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("idn").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isAddressInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("address").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPhoneInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("phone").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContactInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contact").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBankdataInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bankdata").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNoteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("note").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContragenttypeidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contragenttypeid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isEmailInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("email").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isUrlInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("url").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCompanyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("companyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTypeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("type").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRaionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("raionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isVillageidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("villageid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isFnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("fname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("lname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isVatInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("vat").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isContragentidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isIdnInitialized()) {
                ps.setString(++_dirtyCount, pObject.getIdn());
            }
    
            if (pObject.isAddressInitialized()) {
                ps.setString(++_dirtyCount, pObject.getAddress());
            }
    
            if (pObject.isPhoneInitialized()) {
                ps.setString(++_dirtyCount, pObject.getPhone());
            }
    
            if (pObject.isContactInitialized()) {
                ps.setString(++_dirtyCount, pObject.getContact());
            }
    
            if (pObject.isBankdataInitialized()) {
                ps.setString(++_dirtyCount, pObject.getBankdata());
            }
    
            if (pObject.isNoteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNote());
            }
    
            if (pObject.isContragenttypeidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getContragenttypeid());
            }
    
            if (pObject.isEmailInitialized()) {
                ps.setString(++_dirtyCount, pObject.getEmail());
            }
    
            if (pObject.isUrlInitialized()) {
                ps.setString(++_dirtyCount, pObject.getUrl());
            }
    
            if (pObject.isCompanyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
            }
    
            if (pObject.isTypeInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isRegionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
            }
    
            if (pObject.isRaionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
            }
    
            if (pObject.isVillageidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isFnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getFname());
            }
    
            if (pObject.isLnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getLname());
            }
    
            if (pObject.isVatInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getVat());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of CompanyBean using the relation table Contract given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of CompanyBean 
     */
    // MANY TO MANY
    public CompanyBean[] loadCompanyViaContract(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        company,contract"
                         + " WHERE "    
                         + "     contract.contragentid = ?"
                         + " AND contract.companyid = company.companyid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return CompanyManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Contract given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaContract(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,contract"
                         + " WHERE "    
                         + "     contract.contragentid = ?"
                         + " AND contract.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of SampletypeBean using the relation table Contract given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of SampletypeBean 
     */
    // MANY TO MANY
    public SampletypeBean[] loadSampletypeViaContract(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        sampletype,contract"
                         + " WHERE "    
                         + "     contract.contragentid = ?"
                         + " AND contract.sampletypeid = sampletype.sampletypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return SampletypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InvoicesourcetypeBean using the relation table Invoice given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of InvoicesourcetypeBean 
     */
    // MANY TO MANY
    public InvoicesourcetypeBean[] loadInvoicesourcetypeViaInvoice(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        invoicesourcetype,invoice"
                         + " WHERE "    
                         + "     invoice.contragentid = ?"
                         + " AND invoice.invoicesourcetypeid = invoicesourcetype.invoicesourcetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return InvoicesourcetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InvoicetypeBean using the relation table Invoice given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of InvoicetypeBean 
     */
    // MANY TO MANY
    public InvoicetypeBean[] loadInvoicetypeViaInvoice(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        invoicetype,invoice"
                         + " WHERE "    
                         + "     invoice.contragentid = ?"
                         + " AND invoice.invoicetypeid = invoicetype.invoicetypeid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return InvoicetypeManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of OperBean using the relation table Invoice given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of OperBean 
     */
    // MANY TO MANY
    public OperBean[] loadOperViaInvoice(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        oper,invoice"
                         + " WHERE "    
                         + "     invoice.contragentid = ?"
                         + " AND invoice.operid = oper.operid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return OperManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Invoice given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaInvoice(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,invoice"
                         + " WHERE "    
                         + "     invoice.contragentid = ?"
                         + " AND invoice.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Stockmovement given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaStockmovement(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.mcontragentid = ?"
                         + " AND stockmovement.stockid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InvoiceBean using the relation table Stockmovement given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of InvoiceBean 
     */
    // MANY TO MANY
    public InvoiceBean[] loadInvoiceViaStockmovement(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        invoice,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.mcontragentid = ?"
                         + " AND stockmovement.invoiceid = invoice.invoiceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return InvoiceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of OperBean using the relation table Stockmovement given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of OperBean 
     */
    // MANY TO MANY
    public OperBean[] loadOperViaStockmovement(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        oper,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.mcontragentid = ?"
                         + " AND stockmovement.operid = oper.operid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return OperManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Stockmovement given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaStockmovement(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.mcontragentid = ?"
                         + " AND stockmovement.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ProductBean using the relation table Stockmovement given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of ProductBean 
     */
    // MANY TO MANY
    public ProductBean[] loadProductViaStockmovement(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        product,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.mcontragentid = ?"
                         + " AND stockmovement.productid = product.productid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return ProductManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StockmovementBean using the relation table Stockmovement given a ContragentBean object.
     *
     * @param pObject the ContragentBean pObject to be used
     * @return an array of StockmovementBean 
     */
    // MANY TO MANY
    public StockmovementBean[] loadStockmovementViaStockmovement(ContragentBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        stockmovement,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.mcontragentid = ?"
                         + " AND stockmovement.parentid = stockmovement.stockmovementid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getContragentid());
             return StockmovementManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table contragent.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table contragent with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from contragent " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table contragent with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ContragentBean pObject given a c
     *
     * @param pObject the ContragentBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ContragentBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from contragent WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isContragentidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragentid= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isIdnModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("idn= ?");
                }
    
                if (pObject.isAddressModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("address= ?");
                }
    
                if (pObject.isPhoneModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("phone= ?");
                }
    
                if (pObject.isContactModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contact= ?");
                }
    
                if (pObject.isBankdataModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bankdata= ?");
                }
    
                if (pObject.isNoteModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("note= ?");
                }
    
                if (pObject.isContragenttypeidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contragenttypeid= ?");
                }
    
                if (pObject.isEmailModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("email= ?");
                }
    
                if (pObject.isUrlModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("url= ?");
                }
    
                if (pObject.isCompanyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("companyid= ?");
                }
    
                if (pObject.isTypeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("type= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isRegionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regionid= ?");
                }
    
                if (pObject.isRaionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("raionid= ?");
                }
    
                if (pObject.isVillageidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("villageid= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isFnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("fname= ?");
                }
    
                if (pObject.isLnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("lname= ?");
                }
    
                if (pObject.isVatModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("vat= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isContragentidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContragentid());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isIdnModified()) {
                    ps.setString(++_dirtyCount, pObject.getIdn());
                }
    
                if (pObject.isAddressModified()) {
                    ps.setString(++_dirtyCount, pObject.getAddress());
                }
    
                if (pObject.isPhoneModified()) {
                    ps.setString(++_dirtyCount, pObject.getPhone());
                }
    
                if (pObject.isContactModified()) {
                    ps.setString(++_dirtyCount, pObject.getContact());
                }
    
                if (pObject.isBankdataModified()) {
                    ps.setString(++_dirtyCount, pObject.getBankdata());
                }
    
                if (pObject.isNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getNote());
                }
    
                if (pObject.isContragenttypeidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getContragenttypeid());
                }
    
                if (pObject.isEmailModified()) {
                    ps.setString(++_dirtyCount, pObject.getEmail());
                }
    
                if (pObject.isUrlModified()) {
                    ps.setString(++_dirtyCount, pObject.getUrl());
                }
    
                if (pObject.isCompanyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getCompanyid());
                }
    
                if (pObject.isTypeModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getType());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isRegionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegionid());
                }
    
                if (pObject.isRaionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRaionid());
                }
    
                if (pObject.isVillageidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getVillageid());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isFnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getFname());
                }
    
                if (pObject.isLnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getLname());
                }
    
                if (pObject.isVatModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getVat());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the contragent on a ContragentBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ContragentBean pObject
     */
    //72
    public ContragentBean decodeRow(ResultSet rs) throws SQLException
    {
        ContragentBean pObject = createContragentBean();
        pObject.setContragentid(Manager.getLong(rs, 1));
        pObject.setName(rs.getString(2));
        pObject.setIdn(rs.getString(3));
        pObject.setAddress(rs.getString(4));
        pObject.setPhone(rs.getString(5));
        pObject.setContact(rs.getString(6));
        pObject.setBankdata(rs.getString(7));
        pObject.setNote(rs.getString(8));
        pObject.setContragenttypeid(Manager.getInteger(rs, 9));
        pObject.setEmail(rs.getString(10));
        pObject.setUrl(rs.getString(11));
        pObject.setCompanyid(Manager.getInteger(rs, 12));
        pObject.setType(Manager.getInteger(rs, 13));
        pObject.setRegbyid(Manager.getInteger(rs, 14));
        pObject.setRegdate(rs.getTimestamp(15));
        pObject.setRegionid(Manager.getInteger(rs, 16));
        pObject.setRaionid(Manager.getInteger(rs, 17));
        pObject.setVillageid(Manager.getInteger(rs, 18));
        pObject.setDeleted(Manager.getBoolean(rs, 19));
        pObject.setFname(rs.getString(20));
        pObject.setLname(rs.getString(21));
        pObject.setVat(Manager.getBoolean(rs, 22));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the contragent table on a ContragentBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ContragentBean pObject
     */
    //73
    public ContragentBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ContragentBean pObject = createContragentBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_CONTRAGENTID:
                    ++pos;
                    pObject.setContragentid(Manager.getLong(rs, pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_IDN:
                    ++pos;
                    pObject.setIdn(rs.getString(pos));
                    break;
                case ID_ADDRESS:
                    ++pos;
                    pObject.setAddress(rs.getString(pos));
                    break;
                case ID_PHONE:
                    ++pos;
                    pObject.setPhone(rs.getString(pos));
                    break;
                case ID_CONTACT:
                    ++pos;
                    pObject.setContact(rs.getString(pos));
                    break;
                case ID_BANKDATA:
                    ++pos;
                    pObject.setBankdata(rs.getString(pos));
                    break;
                case ID_NOTE:
                    ++pos;
                    pObject.setNote(rs.getString(pos));
                    break;
                case ID_CONTRAGENTTYPEID:
                    ++pos;
                    pObject.setContragenttypeid(Manager.getInteger(rs, pos));
                    break;
                case ID_EMAIL:
                    ++pos;
                    pObject.setEmail(rs.getString(pos));
                    break;
                case ID_URL:
                    ++pos;
                    pObject.setUrl(rs.getString(pos));
                    break;
                case ID_COMPANYID:
                    ++pos;
                    pObject.setCompanyid(Manager.getInteger(rs, pos));
                    break;
                case ID_TYPE:
                    ++pos;
                    pObject.setType(Manager.getInteger(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_REGIONID:
                    ++pos;
                    pObject.setRegionid(Manager.getInteger(rs, pos));
                    break;
                case ID_RAIONID:
                    ++pos;
                    pObject.setRaionid(Manager.getInteger(rs, pos));
                    break;
                case ID_VILLAGEID:
                    ++pos;
                    pObject.setVillageid(Manager.getInteger(rs, pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_FNAME:
                    ++pos;
                    pObject.setFname(rs.getString(pos));
                    break;
                case ID_LNAME:
                    ++pos;
                    pObject.setLname(rs.getString(pos));
                    break;
                case ID_VAT:
                    ++pos;
                    pObject.setVat(Manager.getBoolean(rs, pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ContragentBean 
     */
    //41
    public ContragentBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ContragentBean 
     */
    public ContragentBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ContragentBean[])v.toArray(new ContragentBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ContragentListener listener = null;

    /**
     * Registers a unique ContragentListener listener.
     */
    //66.5
    public void registerListener(ContragentListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be saved
     */
    //67
    void beforeInsert(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be saved
     */
    //68
    void afterInsert(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be updated
     */
    //69
    void beforeUpdate(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ContragentBean pObject.
     *
     * @param pObject the ContragentBean pObject to be updated
     */
    //70
    void afterUpdate(ContragentBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
