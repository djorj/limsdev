// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the reseachstatushistory table.
 */
public class ReseachstatushistoryManager
// extends+ 

// extends- 
{

    /**
     * Column reseachstatushistoryid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_RESEACHSTATUSHISTORYID = 0;
    public static final int TYPE_RESEACHSTATUSHISTORYID = Types.BIGINT;
    public static final String NAME_RESEACHSTATUSHISTORYID = "reseachstatushistoryid";

    /**
     * Column sampleitemreseachid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_SAMPLEITEMRESEACHID = 1;
    public static final int TYPE_SAMPLEITEMRESEACHID = Types.BIGINT;
    public static final String NAME_SAMPLEITEMRESEACHID = "sampleitemreseachid";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 2;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";

    /**
     * Column reason of type Types.VARCHAR mapped to String.
     */
    public static final int ID_REASON = 3;
    public static final int TYPE_REASON = Types.VARCHAR;
    public static final String NAME_REASON = "reason";

    /**
     * Column method of type Types.VARCHAR mapped to String.
     */
    public static final int ID_METHOD = 4;
    public static final int TYPE_METHOD = Types.VARCHAR;
    public static final String NAME_METHOD = "method";

    /**
     * Column statusdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_STATUSDATE = 5;
    public static final int TYPE_STATUSDATE = Types.TIMESTAMP;
    public static final String NAME_STATUSDATE = "statusdate";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 6;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 7;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";


    private static final String TABLE_NAME = "reseachstatushistory";

    /**
     * Create an array of type string containing all the fields of the reseachstatushistory table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "reseachstatushistory.reseachstatushistoryid"
        ,"reseachstatushistory.sampleitemreseachid"
        ,"reseachstatushistory.status"
        ,"reseachstatushistory.reason"
        ,"reseachstatushistory.method"
        ,"reseachstatushistory.statusdate"
        ,"reseachstatushistory.regbyid"
        ,"reseachstatushistory.regdate"
    };

    /**
     * Field that contains the comma separated fields of the reseachstatushistory table.
     */
    private static final String ALL_FIELDS = "reseachstatushistory.reseachstatushistoryid"
                            + ",reseachstatushistory.sampleitemreseachid"
                            + ",reseachstatushistory.status"
                            + ",reseachstatushistory.reason"
                            + ",reseachstatushistory.method"
                            + ",reseachstatushistory.statusdate"
                            + ",reseachstatushistory.regbyid"
                            + ",reseachstatushistory.regdate";

    private static ReseachstatushistoryManager singleton = new ReseachstatushistoryManager();

    /**
     * Get the ReseachstatushistoryManager singleton.
     *
     * @return ReseachstatushistoryManager 
     */
    synchronized public static ReseachstatushistoryManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ReseachstatushistoryManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ReseachstatushistoryManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ReseachstatushistoryBean instance.
     *
     * @return the new ReseachstatushistoryBean 
     */
    public ReseachstatushistoryBean createReseachstatushistoryBean()
    {
        return new ReseachstatushistoryBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ReseachstatushistoryBean from the reseachstatushistory using its key fields.
     *
     * @return a unique ReseachstatushistoryBean 
     */
    //12
    public ReseachstatushistoryBean loadByPrimaryKey(Long reseachstatushistoryid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reseachstatushistory WHERE reseachstatushistory.reseachstatushistoryid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, reseachstatushistoryid);
            ReseachstatushistoryBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long reseachstatushistoryid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from reseachstatushistory WHERE reseachstatushistory.reseachstatushistoryid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, reseachstatushistoryid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ReseachstatushistoryBean array from the reseachstatushistory table using its sampleitemreseachid field.
     *
     * @return an array of ReseachstatushistoryBean 
     */
    // LOAD BY IMPORTED KEY
    public ReseachstatushistoryBean[] loadBySampleitemreseachid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reseachstatushistory WHERE sampleitemreseachid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the reseachstatushistory table by sampleitemreseachid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteBySampleitemreseachid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM reseachstatushistory WHERE sampleitemreseachid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the SampleitemreseachBean object from the reseachstatushistory.sampleitemreseachid field.
     *
     * @param pObject the ReseachstatushistoryBean 
     * @return the associated SampleitemreseachBean pObject
     */
    // GET IMPORTED
    public SampleitemreseachBean getSampleitemreseachBean(ReseachstatushistoryBean pObject) throws SQLException
    {
        SampleitemreseachBean other = SampleitemreseachManager.getInstance().createSampleitemreseachBean();
        other.setSampleitemreseachid(pObject.getSampleitemreseachid());
        return SampleitemreseachManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ReseachstatushistoryBean object to the SampleitemreseachBean object.
     *
     * @param pObject the ReseachstatushistoryBean object to use
     * @param pObjectToBeSet the SampleitemreseachBean object to associate to the ReseachstatushistoryBean 
     * @return the associated SampleitemreseachBean pObject
     */
    // SET IMPORTED
    public ReseachstatushistoryBean setSampleitemreseachBean(ReseachstatushistoryBean pObject,SampleitemreseachBean pObjectToBeSet)
    {
        pObject.setSampleitemreseachid(pObjectToBeSet.getSampleitemreseachid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from reseachstatushistory.
     *
     * @return an array of ReseachstatushistoryManager pObject
     */
    //38
    public ReseachstatushistoryBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM reseachstatushistory",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ReseachstatushistoryBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ReseachstatushistoryBean table 
     */
    //49
    public ReseachstatushistoryBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ReseachstatushistoryBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ReseachstatushistoryBean table 
     */
    //51
    public ReseachstatushistoryBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from reseachstatushistory " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from reseachstatushistory ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ReseachstatushistoryBean[])v.toArray(new ReseachstatushistoryBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from reseachstatushistory table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the reseachstatushistory table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM reseachstatushistory " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ReseachstatushistoryBean pObject into the database.
     *
     * @param pObject the ReseachstatushistoryBean pObject to be saved
     */
    //100
    public ReseachstatushistoryBean save(ReseachstatushistoryBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isReseachstatushistoryidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('reseachstatushistoryid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setReseachstatushistoryid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into reseachstatushistory (");
    
                if (pObject.isReseachstatushistoryidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reseachstatushistoryid");
                    _dirtyCount++;
                }

                if (pObject.isSampleitemreseachidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampleitemreseachid");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                if (pObject.isReasonModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("reason");
                    _dirtyCount++;
                }

                if (pObject.isMethodModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("method");
                    _dirtyCount++;
                }

                if (pObject.isStatusdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("statusdate");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isReseachstatushistoryidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReseachstatushistoryid());
                }
    
                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isReasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getReason());
                }
    
                if (pObject.isMethodModified()) {
                    ps.setString(++_dirtyCount, pObject.getMethod());
                }
    
                if (pObject.isStatusdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getStatusdate());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE reseachstatushistory SET ");
                boolean useComma=false;

                if (pObject.isReseachstatushistoryidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reseachstatushistoryid").append("=?");
                }

                if (pObject.isSampleitemreseachidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampleitemreseachid").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }

                if (pObject.isReasonModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("reason").append("=?");
                }

                if (pObject.isMethodModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("method").append("=?");
                }

                if (pObject.isStatusdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("statusdate").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("reseachstatushistory.reseachstatushistoryid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isReseachstatushistoryidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getReseachstatushistoryid());
                }

                if (pObject.isSampleitemreseachidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }

                if (pObject.isReasonModified()) {
                      ps.setString(++_dirtyCount, pObject.getReason());
                }

                if (pObject.isMethodModified()) {
                      ps.setString(++_dirtyCount, pObject.getMethod());
                }

                if (pObject.isStatusdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getStatusdate());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getReseachstatushistoryid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ReseachstatushistoryBean pObjects into the database.
     *
     * @param pObjects the ReseachstatushistoryBean pObject table to be saved
     * @return the saved ReseachstatushistoryBean array.
     */
    //65
    public ReseachstatushistoryBean[] save(ReseachstatushistoryBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ReseachstatushistoryBean pObject from a template one giving a c
     *
     * @param pObject the ReseachstatushistoryBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ReseachstatushistoryBean loadUniqueUsingTemplate(ReseachstatushistoryBean pObject) throws SQLException
    {
         ReseachstatushistoryBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ReseachstatushistoryBean from a template one.
     *
     * @param pObject the ReseachstatushistoryBean template to look for
     * @return all the ReseachstatushistoryBean matching the template
     */
    //88
    public ReseachstatushistoryBean[] loadUsingTemplate(ReseachstatushistoryBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from reseachstatushistory WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isReseachstatushistoryidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reseachstatushistoryid= ?");
             }
    
             if (pObject.isSampleitemreseachidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (pObject.isReasonModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reason= ?");
             }
    
             if (pObject.isMethodModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("method= ?");
             }
    
             if (pObject.isStatusdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("statusdate= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isReseachstatushistoryidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getReseachstatushistoryid());
             }
    
             if (pObject.isSampleitemreseachidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             if (pObject.isReasonModified()) {
                 ps.setString(++_dirtyCount, pObject.getReason());
             }
    
             if (pObject.isMethodModified()) {
                 ps.setString(++_dirtyCount, pObject.getMethod());
             }
    
             if (pObject.isStatusdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getStatusdate());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ReseachstatushistoryBean template.
     *
     * @param pObject the ReseachstatushistoryBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ReseachstatushistoryBean pObject) throws SQLException
    {
        if (pObject.isReseachstatushistoryidInitialized())
            return deleteByPrimaryKey(pObject.getReseachstatushistoryid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM reseachstatushistory WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isReseachstatushistoryidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reseachstatushistoryid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSampleitemreseachidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampleitemreseachid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isReasonInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("reason").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isMethodInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("method").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("statusdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isReseachstatushistoryidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getReseachstatushistoryid());
            }
    
            if (pObject.isSampleitemreseachidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            if (pObject.isReasonInitialized()) {
                ps.setString(++_dirtyCount, pObject.getReason());
            }
    
            if (pObject.isMethodInitialized()) {
                ps.setString(++_dirtyCount, pObject.getMethod());
            }
    
            if (pObject.isStatusdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getStatusdate());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table reseachstatushistory.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table reseachstatushistory with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from reseachstatushistory " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table reseachstatushistory with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ReseachstatushistoryBean pObject given a c
     *
     * @param pObject the ReseachstatushistoryBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ReseachstatushistoryBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from reseachstatushistory WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isReseachstatushistoryidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reseachstatushistoryid= ?");
                }
    
                if (pObject.isSampleitemreseachidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (pObject.isReasonModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("reason= ?");
                }
    
                if (pObject.isMethodModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("method= ?");
                }
    
                if (pObject.isStatusdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("statusdate= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isReseachstatushistoryidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getReseachstatushistoryid());
                }
    
                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isReasonModified()) {
                    ps.setString(++_dirtyCount, pObject.getReason());
                }
    
                if (pObject.isMethodModified()) {
                    ps.setString(++_dirtyCount, pObject.getMethod());
                }
    
                if (pObject.isStatusdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getStatusdate());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the reseachstatushistory on a ReseachstatushistoryBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ReseachstatushistoryBean pObject
     */
    //72
    public ReseachstatushistoryBean decodeRow(ResultSet rs) throws SQLException
    {
        ReseachstatushistoryBean pObject = createReseachstatushistoryBean();
        pObject.setReseachstatushistoryid(Manager.getLong(rs, 1));
        pObject.setSampleitemreseachid(Manager.getLong(rs, 2));
        pObject.setStatus(Manager.getInteger(rs, 3));
        pObject.setReason(rs.getString(4));
        pObject.setMethod(rs.getString(5));
        pObject.setStatusdate(rs.getTimestamp(6));
        pObject.setRegbyid(Manager.getInteger(rs, 7));
        pObject.setRegdate(rs.getTimestamp(8));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the reseachstatushistory table on a ReseachstatushistoryBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ReseachstatushistoryBean pObject
     */
    //73
    public ReseachstatushistoryBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ReseachstatushistoryBean pObject = createReseachstatushistoryBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_RESEACHSTATUSHISTORYID:
                    ++pos;
                    pObject.setReseachstatushistoryid(Manager.getLong(rs, pos));
                    break;
                case ID_SAMPLEITEMRESEACHID:
                    ++pos;
                    pObject.setSampleitemreseachid(Manager.getLong(rs, pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
                case ID_REASON:
                    ++pos;
                    pObject.setReason(rs.getString(pos));
                    break;
                case ID_METHOD:
                    ++pos;
                    pObject.setMethod(rs.getString(pos));
                    break;
                case ID_STATUSDATE:
                    ++pos;
                    pObject.setStatusdate(rs.getTimestamp(pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ReseachstatushistoryBean 
     */
    //41
    public ReseachstatushistoryBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ReseachstatushistoryBean 
     */
    public ReseachstatushistoryBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ReseachstatushistoryBean[])v.toArray(new ReseachstatushistoryBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ReseachstatushistoryListener listener = null;

    /**
     * Registers a unique ReseachstatushistoryListener listener.
     */
    //66.5
    public void registerListener(ReseachstatushistoryListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ReseachstatushistoryBean pObject.
     *
     * @param pObject the ReseachstatushistoryBean pObject to be saved
     */
    //67
    void beforeInsert(ReseachstatushistoryBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ReseachstatushistoryBean pObject.
     *
     * @param pObject the ReseachstatushistoryBean pObject to be saved
     */
    //68
    void afterInsert(ReseachstatushistoryBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ReseachstatushistoryBean pObject.
     *
     * @param pObject the ReseachstatushistoryBean pObject to be updated
     */
    //69
    void beforeUpdate(ReseachstatushistoryBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ReseachstatushistoryBean pObject.
     *
     * @param pObject the ReseachstatushistoryBean pObject to be updated
     */
    //70
    void afterUpdate(ReseachstatushistoryBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
