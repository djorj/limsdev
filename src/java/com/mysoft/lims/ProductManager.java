// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the product table.
 */
public class ProductManager
// extends+ 

// extends- 
{

    /**
     * Column productid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PRODUCTID = 0;
    public static final int TYPE_PRODUCTID = Types.BIGINT;
    public static final String NAME_PRODUCTID = "productid";

    /**
     * Column code of type Types.VARCHAR mapped to String.
     */
    public static final int ID_CODE = 1;
    public static final int TYPE_CODE = Types.VARCHAR;
    public static final String NAME_CODE = "code";

    /**
     * Column name of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NAME = 2;
    public static final int TYPE_NAME = Types.VARCHAR;
    public static final String NAME_NAME = "name";

    /**
     * Column punitid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PUNITID = 3;
    public static final int TYPE_PUNITID = Types.INTEGER;
    public static final String NAME_PUNITID = "punitid";

    /**
     * Column limitqty of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_LIMITQTY = 4;
    public static final int TYPE_LIMITQTY = Types.DOUBLE;
    public static final String NAME_LIMITQTY = "limitqty";

    /**
     * Column exp1 of type Types.BIGINT mapped to Long.
     */
    public static final int ID_EXP1 = 5;
    public static final int TYPE_EXP1 = Types.BIGINT;
    public static final String NAME_EXP1 = "exp1";

    /**
     * Column exp2 of type Types.BIGINT mapped to Long.
     */
    public static final int ID_EXP2 = 6;
    public static final int TYPE_EXP2 = Types.BIGINT;
    public static final String NAME_EXP2 = "exp2";

    /**
     * Column productgroupid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_PRODUCTGROUPID = 7;
    public static final int TYPE_PRODUCTGROUPID = Types.INTEGER;
    public static final String NAME_PRODUCTGROUPID = "productgroupid";

    /**
     * Column invnumber of type Types.VARCHAR mapped to String.
     */
    public static final int ID_INVNUMBER = 8;
    public static final int TYPE_INVNUMBER = Types.VARCHAR;
    public static final String NAME_INVNUMBER = "invnumber";

    /**
     * Column serialnum of type Types.VARCHAR mapped to String.
     */
    public static final int ID_SERIALNUM = 9;
    public static final int TYPE_SERIALNUM = Types.VARCHAR;
    public static final String NAME_SERIALNUM = "serialnum";

    /**
     * Column brandname of type Types.VARCHAR mapped to String.
     */
    public static final int ID_BRANDNAME = 10;
    public static final int TYPE_BRANDNAME = Types.VARCHAR;
    public static final String NAME_BRANDNAME = "brandname";

    /**
     * Column model of type Types.VARCHAR mapped to String.
     */
    public static final int ID_MODEL = 11;
    public static final int TYPE_MODEL = Types.VARCHAR;
    public static final String NAME_MODEL = "model";


    private static final String TABLE_NAME = "product";

    /**
     * Create an array of type string containing all the fields of the product table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "product.productid"
        ,"product.code"
        ,"product.name"
        ,"product.punitid"
        ,"product.limitqty"
        ,"product.exp1"
        ,"product.exp2"
        ,"product.productgroupid"
        ,"product.invnumber"
        ,"product.serialnum"
        ,"product.brandname"
        ,"product.model"
    };

    /**
     * Field that contains the comma separated fields of the product table.
     */
    private static final String ALL_FIELDS = "product.productid"
                            + ",product.code"
                            + ",product.name"
                            + ",product.punitid"
                            + ",product.limitqty"
                            + ",product.exp1"
                            + ",product.exp2"
                            + ",product.productgroupid"
                            + ",product.invnumber"
                            + ",product.serialnum"
                            + ",product.brandname"
                            + ",product.model";

    private static ProductManager singleton = new ProductManager();

    /**
     * Get the ProductManager singleton.
     *
     * @return ProductManager 
     */
    synchronized public static ProductManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own ProductManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(ProductManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new ProductBean instance.
     *
     * @return the new ProductBean 
     */
    public ProductBean createProductBean()
    {
        return new ProductBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a ProductBean from the product using its key fields.
     *
     * @return a unique ProductBean 
     */
    //12
    public ProductBean loadByPrimaryKey(Long productid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM product WHERE product.productid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, productid);
            ProductBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long productid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from product WHERE product.productid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, productid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads ProductBean array from the product table using its productgroupid field.
     *
     * @return an array of ProductBean 
     */
    // LOAD BY IMPORTED KEY
    public ProductBean[] loadByProductgroupid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM product WHERE productgroupid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the product table by productgroupid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByProductgroupid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM product WHERE productgroupid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads ProductBean array from the product table using its punitid field.
     *
     * @return an array of ProductBean 
     */
    // LOAD BY IMPORTED KEY
    public ProductBean[] loadByPunitid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM product WHERE punitid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the product table by punitid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByPunitid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM product WHERE punitid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ProductgroupBean object from the product.productgroupid field.
     *
     * @param pObject the ProductBean 
     * @return the associated ProductgroupBean pObject
     */
    // GET IMPORTED
    public ProductgroupBean getProductgroupBean(ProductBean pObject) throws SQLException
    {
        ProductgroupBean other = ProductgroupManager.getInstance().createProductgroupBean();
        other.setProductgroupid(pObject.getProductgroupid());
        return ProductgroupManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ProductBean object to the ProductgroupBean object.
     *
     * @param pObject the ProductBean object to use
     * @param pObjectToBeSet the ProductgroupBean object to associate to the ProductBean 
     * @return the associated ProductgroupBean pObject
     */
    // SET IMPORTED
    public ProductBean setProductgroupBean(ProductBean pObject,ProductgroupBean pObjectToBeSet)
    {
        pObject.setProductgroupid(pObjectToBeSet.getProductgroupid());
        return pObject;
    }

    /**
     * Retrieves the PunitBean object from the product.punitid field.
     *
     * @param pObject the ProductBean 
     * @return the associated PunitBean pObject
     */
    // GET IMPORTED
    public PunitBean getPunitBean(ProductBean pObject) throws SQLException
    {
        PunitBean other = PunitManager.getInstance().createPunitBean();
        other.setPunitid(pObject.getPunitid());
        return PunitManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the ProductBean object to the PunitBean object.
     *
     * @param pObject the ProductBean object to use
     * @param pObjectToBeSet the PunitBean object to associate to the ProductBean 
     * @return the associated PunitBean pObject
     */
    // SET IMPORTED
    public ProductBean setPunitBean(ProductBean pObject,PunitBean pObjectToBeSet)
    {
        pObject.setPunitid(pObjectToBeSet.getPunitid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from product.
     *
     * @return an array of ProductManager pObject
     */
    //38
    public ProductBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM product",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ProductBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ProductBean table 
     */
    //49
    public ProductBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ProductBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting ProductBean table 
     */
    //51
    public ProductBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from product " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from product ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (ProductBean[])v.toArray(new ProductBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from product table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the product table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM product " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the ProductBean pObject into the database.
     *
     * @param pObject the ProductBean pObject to be saved
     */
    //100
    public ProductBean save(ProductBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isProductidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('productid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setProductid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into product (");
    
                if (pObject.isProductidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("productid");
                    _dirtyCount++;
                }

                if (pObject.isCodeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("code");
                    _dirtyCount++;
                }

                if (pObject.isNameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("name");
                    _dirtyCount++;
                }

                if (pObject.isPunitidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("punitid");
                    _dirtyCount++;
                }

                if (pObject.isLimitqtyModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("limitqty");
                    _dirtyCount++;
                }

                if (pObject.isExp1Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("exp1");
                    _dirtyCount++;
                }

                if (pObject.isExp2Modified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("exp2");
                    _dirtyCount++;
                }

                if (pObject.isProductgroupidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("productgroupid");
                    _dirtyCount++;
                }

                if (pObject.isInvnumberModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("invnumber");
                    _dirtyCount++;
                }

                if (pObject.isSerialnumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("serialnum");
                    _dirtyCount++;
                }

                if (pObject.isBrandnameModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("brandname");
                    _dirtyCount++;
                }

                if (pObject.isModelModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("model");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isPunitidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPunitid());
                }
    
                if (pObject.isLimitqtyModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLimitqty());
                }
    
                if (pObject.isExp1Modified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getExp1());
                }
    
                if (pObject.isExp2Modified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getExp2());
                }
    
                if (pObject.isProductgroupidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
                }
    
                if (pObject.isInvnumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getInvnumber());
                }
    
                if (pObject.isSerialnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getSerialnum());
                }
    
                if (pObject.isBrandnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getBrandname());
                }
    
                if (pObject.isModelModified()) {
                    ps.setString(++_dirtyCount, pObject.getModel());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE product SET ");
                boolean useComma=false;

                if (pObject.isProductidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("productid").append("=?");
                }

                if (pObject.isCodeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("code").append("=?");
                }

                if (pObject.isNameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("name").append("=?");
                }

                if (pObject.isPunitidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("punitid").append("=?");
                }

                if (pObject.isLimitqtyModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("limitqty").append("=?");
                }

                if (pObject.isExp1Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("exp1").append("=?");
                }

                if (pObject.isExp2Modified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("exp2").append("=?");
                }

                if (pObject.isProductgroupidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("productgroupid").append("=?");
                }

                if (pObject.isInvnumberModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("invnumber").append("=?");
                }

                if (pObject.isSerialnumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("serialnum").append("=?");
                }

                if (pObject.isBrandnameModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("brandname").append("=?");
                }

                if (pObject.isModelModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("model").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("product.productid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isProductidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }

                if (pObject.isCodeModified()) {
                      ps.setString(++_dirtyCount, pObject.getCode());
                }

                if (pObject.isNameModified()) {
                      ps.setString(++_dirtyCount, pObject.getName());
                }

                if (pObject.isPunitidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getPunitid());
                }

                if (pObject.isLimitqtyModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getLimitqty());
                }

                if (pObject.isExp1Modified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getExp1());
                }

                if (pObject.isExp2Modified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getExp2());
                }

                if (pObject.isProductgroupidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
                }

                if (pObject.isInvnumberModified()) {
                      ps.setString(++_dirtyCount, pObject.getInvnumber());
                }

                if (pObject.isSerialnumModified()) {
                      ps.setString(++_dirtyCount, pObject.getSerialnum());
                }

                if (pObject.isBrandnameModified()) {
                      ps.setString(++_dirtyCount, pObject.getBrandname());
                }

                if (pObject.isModelModified()) {
                      ps.setString(++_dirtyCount, pObject.getModel());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of ProductBean pObjects into the database.
     *
     * @param pObjects the ProductBean pObject table to be saved
     * @return the saved ProductBean array.
     */
    //65
    public ProductBean[] save(ProductBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique ProductBean pObject from a template one giving a c
     *
     * @param pObject the ProductBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public ProductBean loadUniqueUsingTemplate(ProductBean pObject) throws SQLException
    {
         ProductBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of ProductBean from a template one.
     *
     * @param pObject the ProductBean template to look for
     * @return all the ProductBean matching the template
     */
    //88
    public ProductBean[] loadUsingTemplate(ProductBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from product WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isProductidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
             }
    
             if (pObject.isCodeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
             }
    
             if (pObject.isNameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
             }
    
             if (pObject.isPunitidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("punitid= ?");
             }
    
             if (pObject.isLimitqtyModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("limitqty= ?");
             }
    
             if (pObject.isExp1Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("exp1= ?");
             }
    
             if (pObject.isExp2Modified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("exp2= ?");
             }
    
             if (pObject.isProductgroupidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productgroupid= ?");
             }
    
             if (pObject.isInvnumberModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invnumber= ?");
             }
    
             if (pObject.isSerialnumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("serialnum= ?");
             }
    
             if (pObject.isBrandnameModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("brandname= ?");
             }
    
             if (pObject.isModelModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("model= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isProductidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
             }
    
             if (pObject.isCodeModified()) {
                 ps.setString(++_dirtyCount, pObject.getCode());
             }
    
             if (pObject.isNameModified()) {
                 ps.setString(++_dirtyCount, pObject.getName());
             }
    
             if (pObject.isPunitidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getPunitid());
             }
    
             if (pObject.isLimitqtyModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getLimitqty());
             }
    
             if (pObject.isExp1Modified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getExp1());
             }
    
             if (pObject.isExp2Modified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getExp2());
             }
    
             if (pObject.isProductgroupidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
             }
    
             if (pObject.isInvnumberModified()) {
                 ps.setString(++_dirtyCount, pObject.getInvnumber());
             }
    
             if (pObject.isSerialnumModified()) {
                 ps.setString(++_dirtyCount, pObject.getSerialnum());
             }
    
             if (pObject.isBrandnameModified()) {
                 ps.setString(++_dirtyCount, pObject.getBrandname());
             }
    
             if (pObject.isModelModified()) {
                 ps.setString(++_dirtyCount, pObject.getModel());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a ProductBean template.
     *
     * @param pObject the ProductBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(ProductBean pObject) throws SQLException
    {
        if (pObject.isProductidInitialized())
            return deleteByPrimaryKey(pObject.getProductid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM product WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isProductidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("productid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isCodeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("code").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("name").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPunitidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("punitid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLimitqtyInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("limitqty").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isExp1Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("exp1").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isExp2Initialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("exp2").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isProductgroupidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("productgroupid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInvnumberInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("invnumber").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSerialnumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("serialnum").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBrandnameInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("brandname").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isModelInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("model").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isProductidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
            }
    
            if (pObject.isCodeInitialized()) {
                ps.setString(++_dirtyCount, pObject.getCode());
            }
    
            if (pObject.isNameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getName());
            }
    
            if (pObject.isPunitidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getPunitid());
            }
    
            if (pObject.isLimitqtyInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getLimitqty());
            }
    
            if (pObject.isExp1Initialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getExp1());
            }
    
            if (pObject.isExp2Initialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getExp2());
            }
    
            if (pObject.isProductgroupidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
            }
    
            if (pObject.isInvnumberInitialized()) {
                ps.setString(++_dirtyCount, pObject.getInvnumber());
            }
    
            if (pObject.isSerialnumInitialized()) {
                ps.setString(++_dirtyCount, pObject.getSerialnum());
            }
    
            if (pObject.isBrandnameInitialized()) {
                ps.setString(++_dirtyCount, pObject.getBrandname());
            }
    
            if (pObject.isModelInitialized()) {
                ps.setString(++_dirtyCount, pObject.getModel());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    ///////////////////////////////////////////////////////////////////////
    // MANY TO MANY: LOAD OTHER BEAN VIA JUNCTION TABLE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Retrieves an array of InventoryBean using the relation table Inventoryitem given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of InventoryBean 
     */
    // MANY TO MANY
    public InventoryBean[] loadInventoryViaInventoryitem(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        inventory,inventoryitem"
                         + " WHERE "    
                         + "     inventoryitem.productid = ?"
                         + " AND inventoryitem.inventoryid = inventory.inventoryid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return InventoryManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InventoryitemBean using the relation table Inventoryitem given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of InventoryitemBean 
     */
    // MANY TO MANY
    public InventoryitemBean[] loadInventoryitemViaInventoryitem(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        inventoryitem,inventoryitem"
                         + " WHERE "    
                         + "     inventoryitem.productid = ?"
                         + " AND inventoryitem.moveinventoryitemid = inventoryitem.inventoryitemid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return InventoryitemManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Inventoryitem given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaInventoryitem(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,inventoryitem"
                         + " WHERE "    
                         + "     inventoryitem.productid = ?"
                         + " AND inventoryitem.ownerid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of LabtestBean using the relation table Labtestprod given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of LabtestBean 
     */
    // MANY TO MANY
    public LabtestBean[] loadLabtestViaLabtestprod(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        labtest,labtestprod"
                         + " WHERE "    
                         + "     labtestprod.productid = ?"
                         + " AND labtestprod.labtestid = labtest.labtestid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return LabtestManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PunitBean using the relation table Productunit given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of PunitBean 
     */
    // MANY TO MANY
    public PunitBean[] loadPunitViaProductunit(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        punit,productunit"
                         + " WHERE "    
                         + "     productunit.productid = ?"
                         + " AND productunit.punitid = punit.punitid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return PunitManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of ContragentBean using the relation table Stockmovement given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of ContragentBean 
     */
    // MANY TO MANY
    public ContragentBean[] loadContragentViaStockmovement(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        contragent,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.productid = ?"
                         + " AND stockmovement.mcontragentid = contragent.contragentid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return ContragentManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InstitutionBean using the relation table Stockmovement given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of InstitutionBean 
     */
    // MANY TO MANY
    public InstitutionBean[] loadInstitutionViaStockmovement(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        institution,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.productid = ?"
                         + " AND stockmovement.stockid = institution.institutionid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return InstitutionManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of InvoiceBean using the relation table Stockmovement given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of InvoiceBean 
     */
    // MANY TO MANY
    public InvoiceBean[] loadInvoiceViaStockmovement(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        invoice,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.productid = ?"
                         + " AND stockmovement.invoiceid = invoice.invoiceid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return InvoiceManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of OperBean using the relation table Stockmovement given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of OperBean 
     */
    // MANY TO MANY
    public OperBean[] loadOperViaStockmovement(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        oper,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.productid = ?"
                         + " AND stockmovement.operid = oper.operid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return OperManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of PersonellBean using the relation table Stockmovement given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of PersonellBean 
     */
    // MANY TO MANY
    public PersonellBean[] loadPersonellViaStockmovement(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        personell,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.productid = ?"
                         + " AND stockmovement.regbyid = personell.personellid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return PersonellManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }

    /**
     * Retrieves an array of StockmovementBean using the relation table Stockmovement given a ProductBean object.
     *
     * @param pObject the ProductBean pObject to be used
     * @return an array of StockmovementBean 
     */
    // MANY TO MANY
    public StockmovementBean[] loadStockmovementViaStockmovement(ProductBean pObject) throws SQLException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String strSQL =      " SELECT "
                         + "        *"
                         + " FROM  "
                         + "        stockmovement,stockmovement"
                         + " WHERE "    
                         + "     stockmovement.productid = ?"
                         + " AND stockmovement.parentid = stockmovement.stockmovementid";
         try
         {
             c = getConnection();
             ps = c.prepareStatement(strSQL,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             Manager.setLong(ps, 1, pObject.getProductid());
             return StockmovementManager.getInstance().loadByPreparedStatement(ps);
         }
         finally
         {
            getManager().close(ps);
            freeConnection(c);
         }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table product.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table product with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from product " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table product with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific ProductBean pObject given a c
     *
     * @param pObject the ProductBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(ProductBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from product WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isProductidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productid= ?");
                }
    
                if (pObject.isCodeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("code= ?");
                }
    
                if (pObject.isNameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("name= ?");
                }
    
                if (pObject.isPunitidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("punitid= ?");
                }
    
                if (pObject.isLimitqtyModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("limitqty= ?");
                }
    
                if (pObject.isExp1Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("exp1= ?");
                }
    
                if (pObject.isExp2Modified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("exp2= ?");
                }
    
                if (pObject.isProductgroupidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("productgroupid= ?");
                }
    
                if (pObject.isInvnumberModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("invnumber= ?");
                }
    
                if (pObject.isSerialnumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("serialnum= ?");
                }
    
                if (pObject.isBrandnameModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("brandname= ?");
                }
    
                if (pObject.isModelModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("model= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isProductidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getProductid());
                }
    
                if (pObject.isCodeModified()) {
                    ps.setString(++_dirtyCount, pObject.getCode());
                }
    
                if (pObject.isNameModified()) {
                    ps.setString(++_dirtyCount, pObject.getName());
                }
    
                if (pObject.isPunitidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getPunitid());
                }
    
                if (pObject.isLimitqtyModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getLimitqty());
                }
    
                if (pObject.isExp1Modified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getExp1());
                }
    
                if (pObject.isExp2Modified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getExp2());
                }
    
                if (pObject.isProductgroupidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getProductgroupid());
                }
    
                if (pObject.isInvnumberModified()) {
                    ps.setString(++_dirtyCount, pObject.getInvnumber());
                }
    
                if (pObject.isSerialnumModified()) {
                    ps.setString(++_dirtyCount, pObject.getSerialnum());
                }
    
                if (pObject.isBrandnameModified()) {
                    ps.setString(++_dirtyCount, pObject.getBrandname());
                }
    
                if (pObject.isModelModified()) {
                    ps.setString(++_dirtyCount, pObject.getModel());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the product on a ProductBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting ProductBean pObject
     */
    //72
    public ProductBean decodeRow(ResultSet rs) throws SQLException
    {
        ProductBean pObject = createProductBean();
        pObject.setProductid(Manager.getLong(rs, 1));
        pObject.setCode(rs.getString(2));
        pObject.setName(rs.getString(3));
        pObject.setPunitid(Manager.getInteger(rs, 4));
        pObject.setLimitqty(Manager.getDouble(rs, 5));
        pObject.setExp1(Manager.getLong(rs, 6));
        pObject.setExp2(Manager.getLong(rs, 7));
        pObject.setProductgroupid(Manager.getInteger(rs, 8));
        pObject.setInvnumber(rs.getString(9));
        pObject.setSerialnum(rs.getString(10));
        pObject.setBrandname(rs.getString(11));
        pObject.setModel(rs.getString(12));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the product table on a ProductBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting ProductBean pObject
     */
    //73
    public ProductBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        ProductBean pObject = createProductBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_PRODUCTID:
                    ++pos;
                    pObject.setProductid(Manager.getLong(rs, pos));
                    break;
                case ID_CODE:
                    ++pos;
                    pObject.setCode(rs.getString(pos));
                    break;
                case ID_NAME:
                    ++pos;
                    pObject.setName(rs.getString(pos));
                    break;
                case ID_PUNITID:
                    ++pos;
                    pObject.setPunitid(Manager.getInteger(rs, pos));
                    break;
                case ID_LIMITQTY:
                    ++pos;
                    pObject.setLimitqty(Manager.getDouble(rs, pos));
                    break;
                case ID_EXP1:
                    ++pos;
                    pObject.setExp1(Manager.getLong(rs, pos));
                    break;
                case ID_EXP2:
                    ++pos;
                    pObject.setExp2(Manager.getLong(rs, pos));
                    break;
                case ID_PRODUCTGROUPID:
                    ++pos;
                    pObject.setProductgroupid(Manager.getInteger(rs, pos));
                    break;
                case ID_INVNUMBER:
                    ++pos;
                    pObject.setInvnumber(rs.getString(pos));
                    break;
                case ID_SERIALNUM:
                    ++pos;
                    pObject.setSerialnum(rs.getString(pos));
                    break;
                case ID_BRANDNAME:
                    ++pos;
                    pObject.setBrandname(rs.getString(pos));
                    break;
                case ID_MODEL:
                    ++pos;
                    pObject.setModel(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ProductBean 
     */
    //41
    public ProductBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ProductBean 
     */
    public ProductBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (ProductBean[])v.toArray(new ProductBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private ProductListener listener = null;

    /**
     * Registers a unique ProductListener listener.
     */
    //66.5
    public void registerListener(ProductListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the ProductBean pObject.
     *
     * @param pObject the ProductBean pObject to be saved
     */
    //67
    void beforeInsert(ProductBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the ProductBean pObject.
     *
     * @param pObject the ProductBean pObject to be saved
     */
    //68
    void afterInsert(ProductBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the ProductBean pObject.
     *
     * @param pObject the ProductBean pObject to be updated
     */
    //69
    void beforeUpdate(ProductBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the ProductBean pObject.
     *
     * @param pObject the ProductBean pObject to be updated
     */
    //70
    void afterUpdate(ProductBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
