// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class TransitactBean
// extends+ 

// extends- 
{
    private Long transitactid;
    private boolean transitactid_is_modified = false;
    private boolean transitactid_is_initialized = false;
    
    private Integer fromlocationid;
    private boolean fromlocationid_is_modified = false;
    private boolean fromlocationid_is_initialized = false;
    
    private Integer tolocationid;
    private boolean tolocationid_is_modified = false;
    private boolean tolocationid_is_initialized = false;
    
    private java.sql.Timestamp senddate;
    private boolean senddate_is_modified = false;
    private boolean senddate_is_initialized = false;
    
    private String responsible;
    private boolean responsible_is_modified = false;
    private boolean responsible_is_initialized = false;
    
    private String sendreason;
    private boolean sendreason_is_modified = false;
    private boolean sendreason_is_initialized = false;
    
    private String amount;
    private boolean amount_is_modified = false;
    private boolean amount_is_initialized = false;
    
    private String volume;
    private boolean volume_is_modified = false;
    private boolean volume_is_initialized = false;
    
    private String sendcondition;
    private boolean sendcondition_is_modified = false;
    private boolean sendcondition_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer getbyid;
    private boolean getbyid_is_modified = false;
    private boolean getbyid_is_initialized = false;
    
    private java.sql.Timestamp getdate;
    private boolean getdate_is_modified = false;
    private boolean getdate_is_initialized = false;
    
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private Long appealid;
    private boolean appealid_is_modified = false;
    private boolean appealid_is_initialized = false;
    
    private Long actid;
    private boolean actid_is_modified = false;
    private boolean actid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    TransitactBean()
    {
    }
    
    /**
     * Getter method for transitactid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.transitactid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of transitactid
     */
    public Long getTransitactid()
    {
        return transitactid; 
    }

    /**
     * Setter method for transitactid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to transitactid
     */
    public void setTransitactid(Long newVal) {
        if ((newVal != null && this.transitactid != null && (newVal.compareTo(this.transitactid) == 0)) || 
            (newVal == null && this.transitactid == null && transitactid_is_initialized)) {
            return; 
        } 
        this.transitactid = newVal; 
        transitactid_is_modified = true; 
        transitactid_is_initialized = true; 
    }

    /**
     * Setter method for transitactid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to transitactid
     */
    public void setTransitactid(long newVal) {
        setTransitactid(new Long(newVal));
    }

    /**
     * Determines if the transitactid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTransitactidModified() {
        return transitactid_is_modified; 
    }

    /**
     * Determines if the transitactid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTransitactidInitialized() {
        return transitactid_is_initialized; 
    }

    /**
     * Getter method for fromlocationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.fromlocationid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of fromlocationid
     */
    public Integer getFromlocationid()
    {
        return fromlocationid; 
    }

    /**
     * Setter method for fromlocationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fromlocationid
     */
    public void setFromlocationid(Integer newVal) {
        if ((newVal != null && this.fromlocationid != null && (newVal.compareTo(this.fromlocationid) == 0)) || 
            (newVal == null && this.fromlocationid == null && fromlocationid_is_initialized)) {
            return; 
        } 
        this.fromlocationid = newVal; 
        fromlocationid_is_modified = true; 
        fromlocationid_is_initialized = true; 
    }

    /**
     * Setter method for fromlocationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fromlocationid
     */
    public void setFromlocationid(int newVal) {
        setFromlocationid(new Integer(newVal));
    }

    /**
     * Determines if the fromlocationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFromlocationidModified() {
        return fromlocationid_is_modified; 
    }

    /**
     * Determines if the fromlocationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFromlocationidInitialized() {
        return fromlocationid_is_initialized; 
    }

    /**
     * Getter method for tolocationid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.tolocationid
     * <li> foreign key: institution.institutionid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of tolocationid
     */
    public Integer getTolocationid()
    {
        return tolocationid; 
    }

    /**
     * Setter method for tolocationid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tolocationid
     */
    public void setTolocationid(Integer newVal) {
        if ((newVal != null && this.tolocationid != null && (newVal.compareTo(this.tolocationid) == 0)) || 
            (newVal == null && this.tolocationid == null && tolocationid_is_initialized)) {
            return; 
        } 
        this.tolocationid = newVal; 
        tolocationid_is_modified = true; 
        tolocationid_is_initialized = true; 
    }

    /**
     * Setter method for tolocationid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tolocationid
     */
    public void setTolocationid(int newVal) {
        setTolocationid(new Integer(newVal));
    }

    /**
     * Determines if the tolocationid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTolocationidModified() {
        return tolocationid_is_modified; 
    }

    /**
     * Determines if the tolocationid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTolocationidInitialized() {
        return tolocationid_is_initialized; 
    }

    /**
     * Getter method for senddate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.senddate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of senddate
     */
    public java.sql.Timestamp getSenddate()
    {
        return senddate; 
    }

    /**
     * Setter method for senddate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to senddate
     */
    public void setSenddate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.senddate != null && (newVal.compareTo(this.senddate) == 0)) || 
            (newVal == null && this.senddate == null && senddate_is_initialized)) {
            return; 
        } 
        this.senddate = newVal; 
        senddate_is_modified = true; 
        senddate_is_initialized = true; 
    }

    /**
     * Setter method for senddate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to senddate
     */
    public void setSenddate(long newVal) {
        setSenddate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the senddate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSenddateModified() {
        return senddate_is_modified; 
    }

    /**
     * Determines if the senddate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSenddateInitialized() {
        return senddate_is_initialized; 
    }

    /**
     * Getter method for responsible.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.responsible
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of responsible
     */
    public String getResponsible()
    {
        return responsible; 
    }

    /**
     * Setter method for responsible.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to responsible
     */
    public void setResponsible(String newVal) {
        if ((newVal != null && this.responsible != null && (newVal.compareTo(this.responsible) == 0)) || 
            (newVal == null && this.responsible == null && responsible_is_initialized)) {
            return; 
        } 
        this.responsible = newVal; 
        responsible_is_modified = true; 
        responsible_is_initialized = true; 
    }

    /**
     * Determines if the responsible has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResponsibleModified() {
        return responsible_is_modified; 
    }

    /**
     * Determines if the responsible has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResponsibleInitialized() {
        return responsible_is_initialized; 
    }

    /**
     * Getter method for sendreason.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.sendreason
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sendreason
     */
    public String getSendreason()
    {
        return sendreason; 
    }

    /**
     * Setter method for sendreason.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sendreason
     */
    public void setSendreason(String newVal) {
        if ((newVal != null && this.sendreason != null && (newVal.compareTo(this.sendreason) == 0)) || 
            (newVal == null && this.sendreason == null && sendreason_is_initialized)) {
            return; 
        } 
        this.sendreason = newVal; 
        sendreason_is_modified = true; 
        sendreason_is_initialized = true; 
    }

    /**
     * Determines if the sendreason has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSendreasonModified() {
        return sendreason_is_modified; 
    }

    /**
     * Determines if the sendreason has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSendreasonInitialized() {
        return sendreason_is_initialized; 
    }

    /**
     * Getter method for amount.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.amount
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of amount
     */
    public String getAmount()
    {
        return amount; 
    }

    /**
     * Setter method for amount.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to amount
     */
    public void setAmount(String newVal) {
        if ((newVal != null && this.amount != null && (newVal.compareTo(this.amount) == 0)) || 
            (newVal == null && this.amount == null && amount_is_initialized)) {
            return; 
        } 
        this.amount = newVal; 
        amount_is_modified = true; 
        amount_is_initialized = true; 
    }

    /**
     * Determines if the amount has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAmountModified() {
        return amount_is_modified; 
    }

    /**
     * Determines if the amount has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAmountInitialized() {
        return amount_is_initialized; 
    }

    /**
     * Getter method for volume.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.volume
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of volume
     */
    public String getVolume()
    {
        return volume; 
    }

    /**
     * Setter method for volume.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to volume
     */
    public void setVolume(String newVal) {
        if ((newVal != null && this.volume != null && (newVal.compareTo(this.volume) == 0)) || 
            (newVal == null && this.volume == null && volume_is_initialized)) {
            return; 
        } 
        this.volume = newVal; 
        volume_is_modified = true; 
        volume_is_initialized = true; 
    }

    /**
     * Determines if the volume has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isVolumeModified() {
        return volume_is_modified; 
    }

    /**
     * Determines if the volume has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isVolumeInitialized() {
        return volume_is_initialized; 
    }

    /**
     * Getter method for sendcondition.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.sendcondition
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sendcondition
     */
    public String getSendcondition()
    {
        return sendcondition; 
    }

    /**
     * Setter method for sendcondition.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sendcondition
     */
    public void setSendcondition(String newVal) {
        if ((newVal != null && this.sendcondition != null && (newVal.compareTo(this.sendcondition) == 0)) || 
            (newVal == null && this.sendcondition == null && sendcondition_is_initialized)) {
            return; 
        } 
        this.sendcondition = newVal; 
        sendcondition_is_modified = true; 
        sendcondition_is_initialized = true; 
    }

    /**
     * Determines if the sendcondition has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSendconditionModified() {
        return sendcondition_is_modified; 
    }

    /**
     * Determines if the sendcondition has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSendconditionInitialized() {
        return sendcondition_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.regbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for getbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.getbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of getbyid
     */
    public Integer getGetbyid()
    {
        return getbyid; 
    }

    /**
     * Setter method for getbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to getbyid
     */
    public void setGetbyid(Integer newVal) {
        if ((newVal != null && this.getbyid != null && (newVal.compareTo(this.getbyid) == 0)) || 
            (newVal == null && this.getbyid == null && getbyid_is_initialized)) {
            return; 
        } 
        this.getbyid = newVal; 
        getbyid_is_modified = true; 
        getbyid_is_initialized = true; 
    }

    /**
     * Setter method for getbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to getbyid
     */
    public void setGetbyid(int newVal) {
        setGetbyid(new Integer(newVal));
    }

    /**
     * Determines if the getbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGetbyidModified() {
        return getbyid_is_modified; 
    }

    /**
     * Determines if the getbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGetbyidInitialized() {
        return getbyid_is_initialized; 
    }

    /**
     * Getter method for getdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.getdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of getdate
     */
    public java.sql.Timestamp getGetdate()
    {
        return getdate; 
    }

    /**
     * Setter method for getdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to getdate
     */
    public void setGetdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.getdate != null && (newVal.compareTo(this.getdate) == 0)) || 
            (newVal == null && this.getdate == null && getdate_is_initialized)) {
            return; 
        } 
        this.getdate = newVal; 
        getdate_is_modified = true; 
        getdate_is_initialized = true; 
    }

    /**
     * Setter method for getdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to getdate
     */
    public void setGetdate(long newVal) {
        setGetdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the getdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isGetdateModified() {
        return getdate_is_modified; 
    }

    /**
     * Determines if the getdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isGetdateInitialized() {
        return getdate_is_initialized; 
    }

    /**
     * Getter method for contractid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.contractid
     * <li> foreign key: contract.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for appealid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.appealid
     * <li> foreign key: appeal.appealid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of appealid
     */
    public Long getAppealid()
    {
        return appealid; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(Long newVal) {
        if ((newVal != null && this.appealid != null && (newVal.compareTo(this.appealid) == 0)) || 
            (newVal == null && this.appealid == null && appealid_is_initialized)) {
            return; 
        } 
        this.appealid = newVal; 
        appealid_is_modified = true; 
        appealid_is_initialized = true; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(long newVal) {
        setAppealid(new Long(newVal));
    }

    /**
     * Determines if the appealid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAppealidModified() {
        return appealid_is_modified; 
    }

    /**
     * Determines if the appealid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAppealidInitialized() {
        return appealid_is_initialized; 
    }

    /**
     * Getter method for actid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: transitact.actid
     * <li> foreign key: act.actid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of actid
     */
    public Long getActid()
    {
        return actid; 
    }

    /**
     * Setter method for actid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(Long newVal) {
        if ((newVal != null && this.actid != null && (newVal.compareTo(this.actid) == 0)) || 
            (newVal == null && this.actid == null && actid_is_initialized)) {
            return; 
        } 
        this.actid = newVal; 
        actid_is_modified = true; 
        actid_is_initialized = true; 
    }

    /**
     * Setter method for actid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(long newVal) {
        setActid(new Long(newVal));
    }

    /**
     * Determines if the actid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActidModified() {
        return actid_is_modified; 
    }

    /**
     * Determines if the actid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActidInitialized() {
        return actid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return transitactid_is_modified || 
		fromlocationid_is_modified || 
		tolocationid_is_modified || 
		senddate_is_modified || 
		responsible_is_modified || 
		sendreason_is_modified || 
		amount_is_modified || 
		volume_is_modified || 
		sendcondition_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		getbyid_is_modified || 
		getdate_is_modified || 
		contractid_is_modified || 
		appealid_is_modified || 
		actid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        transitactid_is_modified = false;
        fromlocationid_is_modified = false;
        tolocationid_is_modified = false;
        senddate_is_modified = false;
        responsible_is_modified = false;
        sendreason_is_modified = false;
        amount_is_modified = false;
        volume_is_modified = false;
        sendcondition_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        getbyid_is_modified = false;
        getdate_is_modified = false;
        contractid_is_modified = false;
        appealid_is_modified = false;
        actid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TransitactBean bean) {
        setTransitactid(bean.getTransitactid());
        setFromlocationid(bean.getFromlocationid());
        setTolocationid(bean.getTolocationid());
        setSenddate(bean.getSenddate());
        setResponsible(bean.getResponsible());
        setSendreason(bean.getSendreason());
        setAmount(bean.getAmount());
        setVolume(bean.getVolume());
        setSendcondition(bean.getSendcondition());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setGetbyid(bean.getGetbyid());
        setGetdate(bean.getGetdate());
        setContractid(bean.getContractid());
        setAppealid(bean.getAppealid());
        setActid(bean.getActid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[transitact] "
                 + "\n - transitact.transitactid = " + (transitactid_is_initialized ? ("[" + (transitactid == null ? null : transitactid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.fromlocationid = " + (fromlocationid_is_initialized ? ("[" + (fromlocationid == null ? null : fromlocationid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.tolocationid = " + (tolocationid_is_initialized ? ("[" + (tolocationid == null ? null : tolocationid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.senddate = " + (senddate_is_initialized ? ("[" + (senddate == null ? null : senddate.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.responsible = " + (responsible_is_initialized ? ("[" + (responsible == null ? null : responsible.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.sendreason = " + (sendreason_is_initialized ? ("[" + (sendreason == null ? null : sendreason.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.amount = " + (amount_is_initialized ? ("[" + (amount == null ? null : amount.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.volume = " + (volume_is_initialized ? ("[" + (volume == null ? null : volume.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.sendcondition = " + (sendcondition_is_initialized ? ("[" + (sendcondition == null ? null : sendcondition.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.getbyid = " + (getbyid_is_initialized ? ("[" + (getbyid == null ? null : getbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.getdate = " + (getdate_is_initialized ? ("[" + (getdate == null ? null : getdate.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.appealid = " + (appealid_is_initialized ? ("[" + (appealid == null ? null : appealid.toString()) + "]") : "not initialized") + ""
                 + "\n - transitact.actid = " + (actid_is_initialized ? ("[" + (actid == null ? null : actid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
