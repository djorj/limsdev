// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class VLabAnsByContragentBean
// extends+ 

// extends- 
{
    private String contragent;
    private boolean contragent_is_modified = false;
    private boolean contragent_is_initialized = false;
    
    private String labtestname;
    private boolean labtestname_is_modified = false;
    private boolean labtestname_is_initialized = false;
    
    private String barcode;
    private boolean barcode_is_modified = false;
    private boolean barcode_is_initialized = false;
    
    private String sampletype;
    private boolean sampletype_is_modified = false;
    private boolean sampletype_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private java.sql.Timestamp resultdate;
    private boolean resultdate_is_modified = false;
    private boolean resultdate_is_initialized = false;
    
    private java.sql.Timestamp plandate;
    private boolean plandate_is_modified = false;
    private boolean plandate_is_initialized = false;
    
    private String note;
    private boolean note_is_modified = false;
    private boolean note_is_initialized = false;
    
    private Long confirmation1id;
    private boolean confirmation1id_is_modified = false;
    private boolean confirmation1id_is_initialized = false;
    
    private Long confirmation2id;
    private boolean confirmation2id_is_modified = false;
    private boolean confirmation2id_is_initialized = false;
    
    private Long confirmation3id;
    private boolean confirmation3id_is_modified = false;
    private boolean confirmation3id_is_initialized = false;
    
    private Long parenttest;
    private boolean parenttest_is_modified = false;
    private boolean parenttest_is_initialized = false;
    
    private Integer companyid;
    private boolean companyid_is_modified = false;
    private boolean companyid_is_initialized = false;
    
    private Long sampleitemreseachid;
    private boolean sampleitemreseachid_is_modified = false;
    private boolean sampleitemreseachid_is_initialized = false;
    
    private Integer labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private String authorname;
    private boolean authorname_is_modified = false;
    private boolean authorname_is_initialized = false;
    
    private Integer authorid;
    private boolean authorid_is_modified = false;
    private boolean authorid_is_initialized = false;
    
    private Long contragentid;
    private boolean contragentid_is_modified = false;
    private boolean contragentid_is_initialized = false;
    
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private Long actid;
    private boolean actid_is_modified = false;
    private boolean actid_is_initialized = false;
    
    private Long appealid;
    private boolean appealid_is_modified = false;
    private boolean appealid_is_initialized = false;
    
    private Long actcontractappealid;
    private boolean actcontractappealid_is_modified = false;
    private boolean actcontractappealid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    VLabAnsByContragentBean()
    {
    }
    
    /**
     * Getter method for contragent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.contragent
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of contragent
     */
    public String getContragent()
    {
        return contragent; 
    }

    /**
     * Setter method for contragent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragent
     */
    public void setContragent(String newVal) {
        if ((newVal != null && this.contragent != null && (newVal.compareTo(this.contragent) == 0)) || 
            (newVal == null && this.contragent == null && contragent_is_initialized)) {
            return; 
        } 
        this.contragent = newVal; 
        contragent_is_modified = true; 
        contragent_is_initialized = true; 
    }

    /**
     * Determines if the contragent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentModified() {
        return contragent_is_modified; 
    }

    /**
     * Determines if the contragent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentInitialized() {
        return contragent_is_initialized; 
    }

    /**
     * Getter method for labtestname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.labtestname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of labtestname
     */
    public String getLabtestname()
    {
        return labtestname; 
    }

    /**
     * Setter method for labtestname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestname
     */
    public void setLabtestname(String newVal) {
        if ((newVal != null && this.labtestname != null && (newVal.compareTo(this.labtestname) == 0)) || 
            (newVal == null && this.labtestname == null && labtestname_is_initialized)) {
            return; 
        } 
        this.labtestname = newVal; 
        labtestname_is_modified = true; 
        labtestname_is_initialized = true; 
    }

    /**
     * Determines if the labtestname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestnameModified() {
        return labtestname_is_modified; 
    }

    /**
     * Determines if the labtestname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestnameInitialized() {
        return labtestname_is_initialized; 
    }

    /**
     * Getter method for barcode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.barcode
     * <li>column size: 255
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of barcode
     */
    public String getBarcode()
    {
        return barcode; 
    }

    /**
     * Setter method for barcode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to barcode
     */
    public void setBarcode(String newVal) {
        if ((newVal != null && this.barcode != null && (newVal.compareTo(this.barcode) == 0)) || 
            (newVal == null && this.barcode == null && barcode_is_initialized)) {
            return; 
        } 
        this.barcode = newVal; 
        barcode_is_modified = true; 
        barcode_is_initialized = true; 
    }

    /**
     * Determines if the barcode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isBarcodeModified() {
        return barcode_is_modified; 
    }

    /**
     * Determines if the barcode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isBarcodeInitialized() {
        return barcode_is_initialized; 
    }

    /**
     * Getter method for sampletype.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.sampletype
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of sampletype
     */
    public String getSampletype()
    {
        return sampletype; 
    }

    /**
     * Setter method for sampletype.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletype
     */
    public void setSampletype(String newVal) {
        if ((newVal != null && this.sampletype != null && (newVal.compareTo(this.sampletype) == 0)) || 
            (newVal == null && this.sampletype == null && sampletype_is_initialized)) {
            return; 
        } 
        this.sampletype = newVal; 
        sampletype_is_modified = true; 
        sampletype_is_initialized = true; 
    }

    /**
     * Determines if the sampletype has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeModified() {
        return sampletype_is_modified; 
    }

    /**
     * Determines if the sampletype has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeInitialized() {
        return sampletype_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.regdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for resultdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.resultdate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of resultdate
     */
    public java.sql.Timestamp getResultdate()
    {
        return resultdate; 
    }

    /**
     * Setter method for resultdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to resultdate
     */
    public void setResultdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.resultdate != null && (newVal.compareTo(this.resultdate) == 0)) || 
            (newVal == null && this.resultdate == null && resultdate_is_initialized)) {
            return; 
        } 
        this.resultdate = newVal; 
        resultdate_is_modified = true; 
        resultdate_is_initialized = true; 
    }

    /**
     * Setter method for resultdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to resultdate
     */
    public void setResultdate(long newVal) {
        setResultdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the resultdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isResultdateModified() {
        return resultdate_is_modified; 
    }

    /**
     * Determines if the resultdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isResultdateInitialized() {
        return resultdate_is_initialized; 
    }

    /**
     * Getter method for plandate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.plandate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of plandate
     */
    public java.sql.Timestamp getPlandate()
    {
        return plandate; 
    }

    /**
     * Setter method for plandate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to plandate
     */
    public void setPlandate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.plandate != null && (newVal.compareTo(this.plandate) == 0)) || 
            (newVal == null && this.plandate == null && plandate_is_initialized)) {
            return; 
        } 
        this.plandate = newVal; 
        plandate_is_modified = true; 
        plandate_is_initialized = true; 
    }

    /**
     * Setter method for plandate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to plandate
     */
    public void setPlandate(long newVal) {
        setPlandate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the plandate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlandateModified() {
        return plandate_is_modified; 
    }

    /**
     * Determines if the plandate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlandateInitialized() {
        return plandate_is_initialized; 
    }

    /**
     * Getter method for note.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.note
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of note
     */
    public String getNote()
    {
        return note; 
    }

    /**
     * Setter method for note.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to note
     */
    public void setNote(String newVal) {
        if ((newVal != null && this.note != null && (newVal.compareTo(this.note) == 0)) || 
            (newVal == null && this.note == null && note_is_initialized)) {
            return; 
        } 
        this.note = newVal; 
        note_is_modified = true; 
        note_is_initialized = true; 
    }

    /**
     * Determines if the note has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNoteModified() {
        return note_is_modified; 
    }

    /**
     * Determines if the note has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNoteInitialized() {
        return note_is_initialized; 
    }

    /**
     * Getter method for confirmation1id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.confirmation1id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation1id
     */
    public Long getConfirmation1id()
    {
        return confirmation1id; 
    }

    /**
     * Setter method for confirmation1id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation1id
     */
    public void setConfirmation1id(Long newVal) {
        if ((newVal != null && this.confirmation1id != null && (newVal.compareTo(this.confirmation1id) == 0)) || 
            (newVal == null && this.confirmation1id == null && confirmation1id_is_initialized)) {
            return; 
        } 
        this.confirmation1id = newVal; 
        confirmation1id_is_modified = true; 
        confirmation1id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation1id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation1id
     */
    public void setConfirmation1id(long newVal) {
        setConfirmation1id(new Long(newVal));
    }

    /**
     * Determines if the confirmation1id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation1idModified() {
        return confirmation1id_is_modified; 
    }

    /**
     * Determines if the confirmation1id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation1idInitialized() {
        return confirmation1id_is_initialized; 
    }

    /**
     * Getter method for confirmation2id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.confirmation2id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation2id
     */
    public Long getConfirmation2id()
    {
        return confirmation2id; 
    }

    /**
     * Setter method for confirmation2id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation2id
     */
    public void setConfirmation2id(Long newVal) {
        if ((newVal != null && this.confirmation2id != null && (newVal.compareTo(this.confirmation2id) == 0)) || 
            (newVal == null && this.confirmation2id == null && confirmation2id_is_initialized)) {
            return; 
        } 
        this.confirmation2id = newVal; 
        confirmation2id_is_modified = true; 
        confirmation2id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation2id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation2id
     */
    public void setConfirmation2id(long newVal) {
        setConfirmation2id(new Long(newVal));
    }

    /**
     * Determines if the confirmation2id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation2idModified() {
        return confirmation2id_is_modified; 
    }

    /**
     * Determines if the confirmation2id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation2idInitialized() {
        return confirmation2id_is_initialized; 
    }

    /**
     * Getter method for confirmation3id.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.confirmation3id
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of confirmation3id
     */
    public Long getConfirmation3id()
    {
        return confirmation3id; 
    }

    /**
     * Setter method for confirmation3id.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to confirmation3id
     */
    public void setConfirmation3id(Long newVal) {
        if ((newVal != null && this.confirmation3id != null && (newVal.compareTo(this.confirmation3id) == 0)) || 
            (newVal == null && this.confirmation3id == null && confirmation3id_is_initialized)) {
            return; 
        } 
        this.confirmation3id = newVal; 
        confirmation3id_is_modified = true; 
        confirmation3id_is_initialized = true; 
    }

    /**
     * Setter method for confirmation3id.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to confirmation3id
     */
    public void setConfirmation3id(long newVal) {
        setConfirmation3id(new Long(newVal));
    }

    /**
     * Determines if the confirmation3id has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isConfirmation3idModified() {
        return confirmation3id_is_modified; 
    }

    /**
     * Determines if the confirmation3id has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isConfirmation3idInitialized() {
        return confirmation3id_is_initialized; 
    }

    /**
     * Getter method for parenttest.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.parenttest
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of parenttest
     */
    public Long getParenttest()
    {
        return parenttest; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(Long newVal) {
        if ((newVal != null && this.parenttest != null && (newVal.compareTo(this.parenttest) == 0)) || 
            (newVal == null && this.parenttest == null && parenttest_is_initialized)) {
            return; 
        } 
        this.parenttest = newVal; 
        parenttest_is_modified = true; 
        parenttest_is_initialized = true; 
    }

    /**
     * Setter method for parenttest.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to parenttest
     */
    public void setParenttest(long newVal) {
        setParenttest(new Long(newVal));
    }

    /**
     * Determines if the parenttest has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isParenttestModified() {
        return parenttest_is_modified; 
    }

    /**
     * Determines if the parenttest has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isParenttestInitialized() {
        return parenttest_is_initialized; 
    }

    /**
     * Getter method for companyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.companyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of companyid
     */
    public Integer getCompanyid()
    {
        return companyid; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(Integer newVal) {
        if ((newVal != null && this.companyid != null && (newVal.compareTo(this.companyid) == 0)) || 
            (newVal == null && this.companyid == null && companyid_is_initialized)) {
            return; 
        } 
        this.companyid = newVal; 
        companyid_is_modified = true; 
        companyid_is_initialized = true; 
    }

    /**
     * Setter method for companyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to companyid
     */
    public void setCompanyid(int newVal) {
        setCompanyid(new Integer(newVal));
    }

    /**
     * Determines if the companyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCompanyidModified() {
        return companyid_is_modified; 
    }

    /**
     * Determines if the companyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCompanyidInitialized() {
        return companyid_is_initialized; 
    }

    /**
     * Getter method for sampleitemreseachid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.sampleitemreseachid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of sampleitemreseachid
     */
    public Long getSampleitemreseachid()
    {
        return sampleitemreseachid; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(Long newVal) {
        if ((newVal != null && this.sampleitemreseachid != null && (newVal.compareTo(this.sampleitemreseachid) == 0)) || 
            (newVal == null && this.sampleitemreseachid == null && sampleitemreseachid_is_initialized)) {
            return; 
        } 
        this.sampleitemreseachid = newVal; 
        sampleitemreseachid_is_modified = true; 
        sampleitemreseachid_is_initialized = true; 
    }

    /**
     * Setter method for sampleitemreseachid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampleitemreseachid
     */
    public void setSampleitemreseachid(long newVal) {
        setSampleitemreseachid(new Long(newVal));
    }

    /**
     * Determines if the sampleitemreseachid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampleitemreseachidModified() {
        return sampleitemreseachid_is_modified; 
    }

    /**
     * Determines if the sampleitemreseachid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampleitemreseachidInitialized() {
        return sampleitemreseachid_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.labtestid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of labtestid
     */
    public Integer getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Integer newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(int newVal) {
        setLabtestid(new Integer(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Getter method for authorname.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.authorname
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of authorname
     */
    public String getAuthorname()
    {
        return authorname; 
    }

    /**
     * Setter method for authorname.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to authorname
     */
    public void setAuthorname(String newVal) {
        if ((newVal != null && this.authorname != null && (newVal.compareTo(this.authorname) == 0)) || 
            (newVal == null && this.authorname == null && authorname_is_initialized)) {
            return; 
        } 
        this.authorname = newVal; 
        authorname_is_modified = true; 
        authorname_is_initialized = true; 
    }

    /**
     * Determines if the authorname has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuthornameModified() {
        return authorname_is_modified; 
    }

    /**
     * Determines if the authorname has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuthornameInitialized() {
        return authorname_is_initialized; 
    }

    /**
     * Getter method for authorid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.authorid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of authorid
     */
    public Integer getAuthorid()
    {
        return authorid; 
    }

    /**
     * Setter method for authorid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to authorid
     */
    public void setAuthorid(Integer newVal) {
        if ((newVal != null && this.authorid != null && (newVal.compareTo(this.authorid) == 0)) || 
            (newVal == null && this.authorid == null && authorid_is_initialized)) {
            return; 
        } 
        this.authorid = newVal; 
        authorid_is_modified = true; 
        authorid_is_initialized = true; 
    }

    /**
     * Setter method for authorid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to authorid
     */
    public void setAuthorid(int newVal) {
        setAuthorid(new Integer(newVal));
    }

    /**
     * Determines if the authorid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAuthoridModified() {
        return authorid_is_modified; 
    }

    /**
     * Determines if the authorid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAuthoridInitialized() {
        return authorid_is_initialized; 
    }

    /**
     * Getter method for contragentid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.contragentid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contragentid
     */
    public Long getContragentid()
    {
        return contragentid; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(Long newVal) {
        if ((newVal != null && this.contragentid != null && (newVal.compareTo(this.contragentid) == 0)) || 
            (newVal == null && this.contragentid == null && contragentid_is_initialized)) {
            return; 
        } 
        this.contragentid = newVal; 
        contragentid_is_modified = true; 
        contragentid_is_initialized = true; 
    }

    /**
     * Setter method for contragentid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contragentid
     */
    public void setContragentid(long newVal) {
        setContragentid(new Long(newVal));
    }

    /**
     * Determines if the contragentid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContragentidModified() {
        return contragentid_is_modified; 
    }

    /**
     * Determines if the contragentid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContragentidInitialized() {
        return contragentid_is_initialized; 
    }

    /**
     * Getter method for contractid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for actid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.actid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of actid
     */
    public Long getActid()
    {
        return actid; 
    }

    /**
     * Setter method for actid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(Long newVal) {
        if ((newVal != null && this.actid != null && (newVal.compareTo(this.actid) == 0)) || 
            (newVal == null && this.actid == null && actid_is_initialized)) {
            return; 
        } 
        this.actid = newVal; 
        actid_is_modified = true; 
        actid_is_initialized = true; 
    }

    /**
     * Setter method for actid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actid
     */
    public void setActid(long newVal) {
        setActid(new Long(newVal));
    }

    /**
     * Determines if the actid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActidModified() {
        return actid_is_modified; 
    }

    /**
     * Determines if the actid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActidInitialized() {
        return actid_is_initialized; 
    }

    /**
     * Getter method for appealid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.appealid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of appealid
     */
    public Long getAppealid()
    {
        return appealid; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(Long newVal) {
        if ((newVal != null && this.appealid != null && (newVal.compareTo(this.appealid) == 0)) || 
            (newVal == null && this.appealid == null && appealid_is_initialized)) {
            return; 
        } 
        this.appealid = newVal; 
        appealid_is_modified = true; 
        appealid_is_initialized = true; 
    }

    /**
     * Setter method for appealid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to appealid
     */
    public void setAppealid(long newVal) {
        setAppealid(new Long(newVal));
    }

    /**
     * Determines if the appealid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isAppealidModified() {
        return appealid_is_modified; 
    }

    /**
     * Determines if the appealid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isAppealidInitialized() {
        return appealid_is_initialized; 
    }

    /**
     * Getter method for actcontractappealid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: v_lab_ans_by_contragent.actcontractappealid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of actcontractappealid
     */
    public Long getActcontractappealid()
    {
        return actcontractappealid; 
    }

    /**
     * Setter method for actcontractappealid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to actcontractappealid
     */
    public void setActcontractappealid(Long newVal) {
        if ((newVal != null && this.actcontractappealid != null && (newVal.compareTo(this.actcontractappealid) == 0)) || 
            (newVal == null && this.actcontractappealid == null && actcontractappealid_is_initialized)) {
            return; 
        } 
        this.actcontractappealid = newVal; 
        actcontractappealid_is_modified = true; 
        actcontractappealid_is_initialized = true; 
    }

    /**
     * Setter method for actcontractappealid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to actcontractappealid
     */
    public void setActcontractappealid(long newVal) {
        setActcontractappealid(new Long(newVal));
    }

    /**
     * Determines if the actcontractappealid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActcontractappealidModified() {
        return actcontractappealid_is_modified; 
    }

    /**
     * Determines if the actcontractappealid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActcontractappealidInitialized() {
        return actcontractappealid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return contragent_is_modified || 
		labtestname_is_modified || 
		barcode_is_modified || 
		sampletype_is_modified || 
		regdate_is_modified || 
		resultdate_is_modified || 
		plandate_is_modified || 
		note_is_modified || 
		confirmation1id_is_modified || 
		confirmation2id_is_modified || 
		confirmation3id_is_modified || 
		parenttest_is_modified || 
		companyid_is_modified || 
		sampleitemreseachid_is_modified || 
		labtestid_is_modified || 
		sampletypeid_is_modified || 
		authorname_is_modified || 
		authorid_is_modified || 
		contragentid_is_modified || 
		contractid_is_modified || 
		actid_is_modified || 
		appealid_is_modified || 
		actcontractappealid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        contragent_is_modified = false;
        labtestname_is_modified = false;
        barcode_is_modified = false;
        sampletype_is_modified = false;
        regdate_is_modified = false;
        resultdate_is_modified = false;
        plandate_is_modified = false;
        note_is_modified = false;
        confirmation1id_is_modified = false;
        confirmation2id_is_modified = false;
        confirmation3id_is_modified = false;
        parenttest_is_modified = false;
        companyid_is_modified = false;
        sampleitemreseachid_is_modified = false;
        labtestid_is_modified = false;
        sampletypeid_is_modified = false;
        authorname_is_modified = false;
        authorid_is_modified = false;
        contragentid_is_modified = false;
        contractid_is_modified = false;
        actid_is_modified = false;
        appealid_is_modified = false;
        actcontractappealid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(VLabAnsByContragentBean bean) {
        setContragent(bean.getContragent());
        setLabtestname(bean.getLabtestname());
        setBarcode(bean.getBarcode());
        setSampletype(bean.getSampletype());
        setRegdate(bean.getRegdate());
        setResultdate(bean.getResultdate());
        setPlandate(bean.getPlandate());
        setNote(bean.getNote());
        setConfirmation1id(bean.getConfirmation1id());
        setConfirmation2id(bean.getConfirmation2id());
        setConfirmation3id(bean.getConfirmation3id());
        setParenttest(bean.getParenttest());
        setCompanyid(bean.getCompanyid());
        setSampleitemreseachid(bean.getSampleitemreseachid());
        setLabtestid(bean.getLabtestid());
        setSampletypeid(bean.getSampletypeid());
        setAuthorname(bean.getAuthorname());
        setAuthorid(bean.getAuthorid());
        setContragentid(bean.getContragentid());
        setContractid(bean.getContractid());
        setActid(bean.getActid());
        setAppealid(bean.getAppealid());
        setActcontractappealid(bean.getActcontractappealid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[v_lab_ans_by_contragent] "
                 + "\n - v_lab_ans_by_contragent.contragent = " + (contragent_is_initialized ? ("[" + (contragent == null ? null : contragent.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.labtestname = " + (labtestname_is_initialized ? ("[" + (labtestname == null ? null : labtestname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.barcode = " + (barcode_is_initialized ? ("[" + (barcode == null ? null : barcode.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.sampletype = " + (sampletype_is_initialized ? ("[" + (sampletype == null ? null : sampletype.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.resultdate = " + (resultdate_is_initialized ? ("[" + (resultdate == null ? null : resultdate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.plandate = " + (plandate_is_initialized ? ("[" + (plandate == null ? null : plandate.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.note = " + (note_is_initialized ? ("[" + (note == null ? null : note.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.confirmation1id = " + (confirmation1id_is_initialized ? ("[" + (confirmation1id == null ? null : confirmation1id.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.confirmation2id = " + (confirmation2id_is_initialized ? ("[" + (confirmation2id == null ? null : confirmation2id.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.confirmation3id = " + (confirmation3id_is_initialized ? ("[" + (confirmation3id == null ? null : confirmation3id.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.parenttest = " + (parenttest_is_initialized ? ("[" + (parenttest == null ? null : parenttest.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.companyid = " + (companyid_is_initialized ? ("[" + (companyid == null ? null : companyid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.sampleitemreseachid = " + (sampleitemreseachid_is_initialized ? ("[" + (sampleitemreseachid == null ? null : sampleitemreseachid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.authorname = " + (authorname_is_initialized ? ("[" + (authorname == null ? null : authorname.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.authorid = " + (authorid_is_initialized ? ("[" + (authorid == null ? null : authorid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.contragentid = " + (contragentid_is_initialized ? ("[" + (contragentid == null ? null : contragentid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.actid = " + (actid_is_initialized ? ("[" + (actid == null ? null : actid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.appealid = " + (appealid_is_initialized ? ("[" + (appealid == null ? null : appealid.toString()) + "]") : "not initialized") + ""
                 + "\n - v_lab_ans_by_contragent.actcontractappealid = " + (actcontractappealid_is_initialized ? ("[" + (actcontractappealid == null ? null : actcontractappealid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
