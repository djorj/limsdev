// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

import java.sql.*;
// imports+ 

// imports- 

/**
 * Handles database calls for the sampleitemreseach table.
 */
public class SampleitemreseachManager
// extends+ 

// extends- 
{

    /**
     * Column sampleitemreseachid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_SAMPLEITEMRESEACHID = 0;
    public static final int TYPE_SAMPLEITEMRESEACHID = Types.BIGINT;
    public static final String NAME_SAMPLEITEMRESEACHID = "sampleitemreseachid";

    /**
     * Column contractsampleitemid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTSAMPLEITEMID = 1;
    public static final int TYPE_CONTRACTSAMPLEITEMID = Types.BIGINT;
    public static final String NAME_CONTRACTSAMPLEITEMID = "contractsampleitemid";

    /**
     * Column contractid of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONTRACTID = 2;
    public static final int TYPE_CONTRACTID = Types.BIGINT;
    public static final String NAME_CONTRACTID = "contractid";

    /**
     * Column labtestid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_LABTESTID = 3;
    public static final int TYPE_LABTESTID = Types.INTEGER;
    public static final String NAME_LABTESTID = "labtestid";

    /**
     * Column price of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_PRICE = 4;
    public static final int TYPE_PRICE = Types.DOUBLE;
    public static final String NAME_PRICE = "price";

    /**
     * Column regbyid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_REGBYID = 5;
    public static final int TYPE_REGBYID = Types.INTEGER;
    public static final String NAME_REGBYID = "regbyid";

    /**
     * Column regdate of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_REGDATE = 6;
    public static final int TYPE_REGDATE = Types.TIMESTAMP;
    public static final String NAME_REGDATE = "regdate";

    /**
     * Column deleted of type Types.BIT mapped to Boolean.
     */
    public static final int ID_DELETED = 7;
    public static final int TYPE_DELETED = Types.BIT;
    public static final String NAME_DELETED = "deleted";

    /**
     * Column status of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STATUS = 8;
    public static final int TYPE_STATUS = Types.INTEGER;
    public static final String NAME_STATUS = "status";

    /**
     * Column totalsubtest of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_TOTALSUBTEST = 9;
    public static final int TYPE_TOTALSUBTEST = Types.INTEGER;
    public static final String NAME_TOTALSUBTEST = "totalsubtest";

    /**
     * Column parenttest of type Types.BIGINT mapped to Long.
     */
    public static final int ID_PARENTTEST = 10;
    public static final int TYPE_PARENTTEST = Types.BIGINT;
    public static final String NAME_PARENTTEST = "parenttest";

    /**
     * Column confirmation1id of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONFIRMATION1ID = 11;
    public static final int TYPE_CONFIRMATION1ID = Types.BIGINT;
    public static final String NAME_CONFIRMATION1ID = "confirmation1id";

    /**
     * Column confirmation2id of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONFIRMATION2ID = 12;
    public static final int TYPE_CONFIRMATION2ID = Types.BIGINT;
    public static final String NAME_CONFIRMATION2ID = "confirmation2id";

    /**
     * Column confirmation3id of type Types.BIGINT mapped to Long.
     */
    public static final int ID_CONFIRMATION3ID = 13;
    public static final int TYPE_CONFIRMATION3ID = Types.BIGINT;
    public static final String NAME_CONFIRMATION3ID = "confirmation3id";

    /**
     * Column daynum of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DAYNUM = 14;
    public static final int TYPE_DAYNUM = Types.INTEGER;
    public static final String NAME_DAYNUM = "daynum";

    /**
     * Column institutionid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_INSTITUTIONID = 15;
    public static final int TYPE_INSTITUTIONID = Types.INTEGER;
    public static final String NAME_INSTITUTIONID = "institutionid";

    /**
     * Column qualitycontrol_person of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_QUALITYCONTROL_PERSON = 16;
    public static final int TYPE_QUALITYCONTROL_PERSON = Types.INTEGER;
    public static final String NAME_QUALITYCONTROL_PERSON = "qualitycontrol_person";

    /**
     * Column qualitycontrol_datetime of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_QUALITYCONTROL_DATETIME = 17;
    public static final int TYPE_QUALITYCONTROL_DATETIME = Types.TIMESTAMP;
    public static final String NAME_QUALITYCONTROL_DATETIME = "qualitycontrol_datetime";

    /**
     * Column qualitycontrol_answer of type Types.VARCHAR mapped to String.
     */
    public static final int ID_QUALITYCONTROL_ANSWER = 18;
    public static final int TYPE_QUALITYCONTROL_ANSWER = Types.VARCHAR;
    public static final String NAME_QUALITYCONTROL_ANSWER = "qualitycontrol_answer";

    /**
     * Column result of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RESULT = 19;
    public static final int TYPE_RESULT = Types.VARCHAR;
    public static final String NAME_RESULT = "result";

    /**
     * Column result_datetime of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_RESULT_DATETIME = 20;
    public static final int TYPE_RESULT_DATETIME = Types.TIMESTAMP;
    public static final String NAME_RESULT_DATETIME = "result_datetime";

    /**
     * Column result_note of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RESULT_NOTE = 21;
    public static final int TYPE_RESULT_NOTE = Types.VARCHAR;
    public static final String NAME_RESULT_NOTE = "result_note";

    /**
     * Column result_info of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RESULT_INFO = 22;
    public static final int TYPE_RESULT_INFO = Types.VARCHAR;
    public static final String NAME_RESULT_INFO = "result_info";

    /**
     * Column result_norm of type Types.BIT mapped to Boolean.
     */
    public static final int ID_RESULT_NORM = 23;
    public static final int TYPE_RESULT_NORM = Types.BIT;
    public static final String NAME_RESULT_NORM = "result_norm";

    /**
     * Column confiramtion1date of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_CONFIRAMTION1DATE = 24;
    public static final int TYPE_CONFIRAMTION1DATE = Types.TIMESTAMP;
    public static final String NAME_CONFIRAMTION1DATE = "confiramtion1date";

    /**
     * Column confiramtion2date of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_CONFIRAMTION2DATE = 25;
    public static final int TYPE_CONFIRAMTION2DATE = Types.TIMESTAMP;
    public static final String NAME_CONFIRAMTION2DATE = "confiramtion2date";

    /**
     * Column confiramtion3date of type Types.TIMESTAMP mapped to java.sql.Timestamp.
     */
    public static final int ID_CONFIRAMTION3DATE = 26;
    public static final int TYPE_CONFIRAMTION3DATE = Types.TIMESTAMP;
    public static final String NAME_CONFIRAMTION3DATE = "confiramtion3date";

    /**
     * Column deviceid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_DEVICEID = 27;
    public static final int TYPE_DEVICEID = Types.INTEGER;
    public static final String NAME_DEVICEID = "deviceid";

    /**
     * Column resultdescr of type Types.VARCHAR mapped to String.
     */
    public static final int ID_RESULTDESCR = 28;
    public static final int TYPE_RESULTDESCR = Types.VARCHAR;
    public static final String NAME_RESULTDESCR = "resultdescr";

    /**
     * Column speciesid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_SPECIESID = 29;
    public static final int TYPE_SPECIESID = Types.INTEGER;
    public static final String NAME_SPECIESID = "speciesid";

    /**
     * Column standardid of type Types.INTEGER mapped to Integer.
     */
    public static final int ID_STANDARDID = 30;
    public static final int TYPE_STANDARDID = Types.INTEGER;
    public static final String NAME_STANDARDID = "standardid";

    /**
     * Column norm of type Types.VARCHAR mapped to String.
     */
    public static final int ID_NORM = 31;
    public static final int TYPE_NORM = Types.VARCHAR;
    public static final String NAME_NORM = "norm";

    /**
     * Column bresult of type Types.BIT mapped to Boolean.
     */
    public static final int ID_BRESULT = 32;
    public static final int TYPE_BRESULT = Types.BIT;
    public static final String NAME_BRESULT = "bresult";

    /**
     * Column nresult of type Types.DOUBLE mapped to Double.
     */
    public static final int ID_NRESULT = 33;
    public static final int TYPE_NRESULT = Types.DOUBLE;
    public static final String NAME_NRESULT = "nresult";

    /**
     * Column tresult of type Types.VARCHAR mapped to String.
     */
    public static final int ID_TRESULT = 34;
    public static final int TYPE_TRESULT = Types.VARCHAR;
    public static final String NAME_TRESULT = "tresult";


    private static final String TABLE_NAME = "sampleitemreseach";

    /**
     * Create an array of type string containing all the fields of the sampleitemreseach table.
     */
    private static final String[] FIELD_NAMES = 
    {
        "sampleitemreseach.sampleitemreseachid"
        ,"sampleitemreseach.contractsampleitemid"
        ,"sampleitemreseach.contractid"
        ,"sampleitemreseach.labtestid"
        ,"sampleitemreseach.price"
        ,"sampleitemreseach.regbyid"
        ,"sampleitemreseach.regdate"
        ,"sampleitemreseach.deleted"
        ,"sampleitemreseach.status"
        ,"sampleitemreseach.totalsubtest"
        ,"sampleitemreseach.parenttest"
        ,"sampleitemreseach.confirmation1id"
        ,"sampleitemreseach.confirmation2id"
        ,"sampleitemreseach.confirmation3id"
        ,"sampleitemreseach.daynum"
        ,"sampleitemreseach.institutionid"
        ,"sampleitemreseach.qualitycontrol_person"
        ,"sampleitemreseach.qualitycontrol_datetime"
        ,"sampleitemreseach.qualitycontrol_answer"
        ,"sampleitemreseach.result"
        ,"sampleitemreseach.result_datetime"
        ,"sampleitemreseach.result_note"
        ,"sampleitemreseach.result_info"
        ,"sampleitemreseach.result_norm"
        ,"sampleitemreseach.confiramtion1date"
        ,"sampleitemreseach.confiramtion2date"
        ,"sampleitemreseach.confiramtion3date"
        ,"sampleitemreseach.deviceid"
        ,"sampleitemreseach.resultdescr"
        ,"sampleitemreseach.speciesid"
        ,"sampleitemreseach.standardid"
        ,"sampleitemreseach.norm"
        ,"sampleitemreseach.bresult"
        ,"sampleitemreseach.nresult"
        ,"sampleitemreseach.tresult"
    };

    /**
     * Field that contains the comma separated fields of the sampleitemreseach table.
     */
    private static final String ALL_FIELDS = "sampleitemreseach.sampleitemreseachid"
                            + ",sampleitemreseach.contractsampleitemid"
                            + ",sampleitemreseach.contractid"
                            + ",sampleitemreseach.labtestid"
                            + ",sampleitemreseach.price"
                            + ",sampleitemreseach.regbyid"
                            + ",sampleitemreseach.regdate"
                            + ",sampleitemreseach.deleted"
                            + ",sampleitemreseach.status"
                            + ",sampleitemreseach.totalsubtest"
                            + ",sampleitemreseach.parenttest"
                            + ",sampleitemreseach.confirmation1id"
                            + ",sampleitemreseach.confirmation2id"
                            + ",sampleitemreseach.confirmation3id"
                            + ",sampleitemreseach.daynum"
                            + ",sampleitemreseach.institutionid"
                            + ",sampleitemreseach.qualitycontrol_person"
                            + ",sampleitemreseach.qualitycontrol_datetime"
                            + ",sampleitemreseach.qualitycontrol_answer"
                            + ",sampleitemreseach.result"
                            + ",sampleitemreseach.result_datetime"
                            + ",sampleitemreseach.result_note"
                            + ",sampleitemreseach.result_info"
                            + ",sampleitemreseach.result_norm"
                            + ",sampleitemreseach.confiramtion1date"
                            + ",sampleitemreseach.confiramtion2date"
                            + ",sampleitemreseach.confiramtion3date"
                            + ",sampleitemreseach.deviceid"
                            + ",sampleitemreseach.resultdescr"
                            + ",sampleitemreseach.speciesid"
                            + ",sampleitemreseach.standardid"
                            + ",sampleitemreseach.norm"
                            + ",sampleitemreseach.bresult"
                            + ",sampleitemreseach.nresult"
                            + ",sampleitemreseach.tresult";

    private static SampleitemreseachManager singleton = new SampleitemreseachManager();

    /**
     * Get the SampleitemreseachManager singleton.
     *
     * @return SampleitemreseachManager 
     */
    synchronized public static SampleitemreseachManager getInstance()
    {
        return singleton;
    }

    /**
     * Sets your own SampleitemreseachManager instance.
     <br>
     * This is optional, by default we provide it for you.
     */
    synchronized public static void setInstance(SampleitemreseachManager instance)
    {
        singleton = instance;
    }


    /**
     * Creates a new SampleitemreseachBean instance.
     *
     * @return the new SampleitemreseachBean 
     */
    public SampleitemreseachBean createSampleitemreseachBean()
    {
        return new SampleitemreseachBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////

    /**
     * Loads a SampleitemreseachBean from the sampleitemreseach using its key fields.
     *
     * @return a unique SampleitemreseachBean 
     */
    //12
    public SampleitemreseachBean loadByPrimaryKey(Long sampleitemreseachid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampleitemreseach WHERE sampleitemreseach.sampleitemreseachid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, sampleitemreseachid);
            SampleitemreseachBean pReturn[] = loadByPreparedStatement(ps);
            if (pReturn.length < 1)
                return null;
            else
                return pReturn[0];
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    /**
     * Deletes rows according to its keys.
     *
     * @return the number of deleted rows
     */
    //60
    public int deleteByPrimaryKey(Long sampleitemreseachid) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE from sampleitemreseach WHERE sampleitemreseach.sampleitemreseachid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, sampleitemreseachid);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    
    
    //////////////////////////////////////
    // FOREIGN KEY METHODS 
    //////////////////////////////////////

    /**
     * Loads SampleitemreseachBean array from the sampleitemreseach table using its contractid field.
     *
     * @return an array of SampleitemreseachBean 
     */
    // LOAD BY IMPORTED KEY
    public SampleitemreseachBean[] loadByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampleitemreseach WHERE contractid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sampleitemreseach table by contractid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sampleitemreseach WHERE contractid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads SampleitemreseachBean array from the sampleitemreseach table using its contractsampleitemid field.
     *
     * @return an array of SampleitemreseachBean 
     */
    // LOAD BY IMPORTED KEY
    public SampleitemreseachBean[] loadByContractsampleitemid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampleitemreseach WHERE contractsampleitemid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setLong(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sampleitemreseach table by contractsampleitemid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByContractsampleitemid(Long value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sampleitemreseach WHERE contractsampleitemid=?");
            Manager.setLong(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads SampleitemreseachBean array from the sampleitemreseach table using its deviceid field.
     *
     * @return an array of SampleitemreseachBean 
     */
    // LOAD BY IMPORTED KEY
    public SampleitemreseachBean[] loadByDeviceid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampleitemreseach WHERE deviceid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sampleitemreseach table by deviceid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByDeviceid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sampleitemreseach WHERE deviceid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads SampleitemreseachBean array from the sampleitemreseach table using its labtestid field.
     *
     * @return an array of SampleitemreseachBean 
     */
    // LOAD BY IMPORTED KEY
    public SampleitemreseachBean[] loadByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampleitemreseach WHERE labtestid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sampleitemreseach table by labtestid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByLabtestid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sampleitemreseach WHERE labtestid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Loads SampleitemreseachBean array from the sampleitemreseach table using its standardid field.
     *
     * @return an array of SampleitemreseachBean 
     */
    // LOAD BY IMPORTED KEY
    public SampleitemreseachBean[] loadByStandardid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampleitemreseach WHERE standardid=?",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Manager.setInteger(ps, 1, value);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }


    /**
     * Deletes from the sampleitemreseach table by standardid field.
     *
     * @param value the key value to seek
     * @return the number of rows deleted
     */
    // DELETE BY IMPORTED KEY
    public int deleteByStandardid(Integer value) throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("DELETE FROM sampleitemreseach WHERE standardid=?");
            Manager.setInteger(ps, 1, value);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the ContractBean object from the sampleitemreseach.contractid field.
     *
     * @param pObject the SampleitemreseachBean 
     * @return the associated ContractBean pObject
     */
    // GET IMPORTED
    public ContractBean getContractBean(SampleitemreseachBean pObject) throws SQLException
    {
        ContractBean other = ContractManager.getInstance().createContractBean();
        other.setContractid(pObject.getContractid());
        return ContractManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SampleitemreseachBean object to the ContractBean object.
     *
     * @param pObject the SampleitemreseachBean object to use
     * @param pObjectToBeSet the ContractBean object to associate to the SampleitemreseachBean 
     * @return the associated ContractBean pObject
     */
    // SET IMPORTED
    public SampleitemreseachBean setContractBean(SampleitemreseachBean pObject,ContractBean pObjectToBeSet)
    {
        pObject.setContractid(pObjectToBeSet.getContractid());
        return pObject;
    }

    /**
     * Retrieves the ContractsampleitemBean object from the sampleitemreseach.contractsampleitemid field.
     *
     * @param pObject the SampleitemreseachBean 
     * @return the associated ContractsampleitemBean pObject
     */
    // GET IMPORTED
    public ContractsampleitemBean getContractsampleitemBean(SampleitemreseachBean pObject) throws SQLException
    {
        ContractsampleitemBean other = ContractsampleitemManager.getInstance().createContractsampleitemBean();
        other.setContractsampleitemid(pObject.getContractsampleitemid());
        return ContractsampleitemManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SampleitemreseachBean object to the ContractsampleitemBean object.
     *
     * @param pObject the SampleitemreseachBean object to use
     * @param pObjectToBeSet the ContractsampleitemBean object to associate to the SampleitemreseachBean 
     * @return the associated ContractsampleitemBean pObject
     */
    // SET IMPORTED
    public SampleitemreseachBean setContractsampleitemBean(SampleitemreseachBean pObject,ContractsampleitemBean pObjectToBeSet)
    {
        pObject.setContractsampleitemid(pObjectToBeSet.getContractsampleitemid());
        return pObject;
    }

    /**
     * Retrieves the DeviceBean object from the sampleitemreseach.deviceid field.
     *
     * @param pObject the SampleitemreseachBean 
     * @return the associated DeviceBean pObject
     */
    // GET IMPORTED
    public DeviceBean getDeviceBean(SampleitemreseachBean pObject) throws SQLException
    {
        DeviceBean other = DeviceManager.getInstance().createDeviceBean();
        other.setDeviceid(pObject.getDeviceid());
        return DeviceManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SampleitemreseachBean object to the DeviceBean object.
     *
     * @param pObject the SampleitemreseachBean object to use
     * @param pObjectToBeSet the DeviceBean object to associate to the SampleitemreseachBean 
     * @return the associated DeviceBean pObject
     */
    // SET IMPORTED
    public SampleitemreseachBean setDeviceBean(SampleitemreseachBean pObject,DeviceBean pObjectToBeSet)
    {
        pObject.setDeviceid(pObjectToBeSet.getDeviceid());
        return pObject;
    }

    /**
     * Retrieves the LabtestBean object from the sampleitemreseach.labtestid field.
     *
     * @param pObject the SampleitemreseachBean 
     * @return the associated LabtestBean pObject
     */
    // GET IMPORTED
    public LabtestBean getLabtestBean(SampleitemreseachBean pObject) throws SQLException
    {
        LabtestBean other = LabtestManager.getInstance().createLabtestBean();
        other.setLabtestid(pObject.getLabtestid());
        return LabtestManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SampleitemreseachBean object to the LabtestBean object.
     *
     * @param pObject the SampleitemreseachBean object to use
     * @param pObjectToBeSet the LabtestBean object to associate to the SampleitemreseachBean 
     * @return the associated LabtestBean pObject
     */
    // SET IMPORTED
    public SampleitemreseachBean setLabtestBean(SampleitemreseachBean pObject,LabtestBean pObjectToBeSet)
    {
        pObject.setLabtestid(pObjectToBeSet.getLabtestid());
        return pObject;
    }

    /**
     * Retrieves the StandardBean object from the sampleitemreseach.standardid field.
     *
     * @param pObject the SampleitemreseachBean 
     * @return the associated StandardBean pObject
     */
    // GET IMPORTED
    public StandardBean getStandardBean(SampleitemreseachBean pObject) throws SQLException
    {
        StandardBean other = StandardManager.getInstance().createStandardBean();
        other.setStandardid(pObject.getStandardid());
        return StandardManager.getInstance().loadUniqueUsingTemplate(other);
    }

    /**
     * Associates the SampleitemreseachBean object to the StandardBean object.
     *
     * @param pObject the SampleitemreseachBean object to use
     * @param pObjectToBeSet the StandardBean object to associate to the SampleitemreseachBean 
     * @return the associated StandardBean pObject
     */
    // SET IMPORTED
    public SampleitemreseachBean setStandardBean(SampleitemreseachBean pObject,StandardBean pObjectToBeSet)
    {
        pObject.setStandardid(pObjectToBeSet.getStandardid());
        return pObject;
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from sampleitemreseach.
     *
     * @return an array of SampleitemreseachManager pObject
     */
    //38
    public SampleitemreseachBean[] loadAll() throws SQLException 
    {
        Connection c = null;
        PreparedStatement ps = null;
        try 
        {
            c = getConnection();
            ps = c.prepareStatement("SELECT " + ALL_FIELDS + " FROM sampleitemreseach",ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of SampleitemreseachBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting SampleitemreseachBean table 
     */
    //49
    public SampleitemreseachBean[] loadByWhere(String where) throws SQLException
    {
        return loadByWhere(where, null);
    }

    /**
     * Retrieves an array of SampleitemreseachBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param fieldList table of the field's associated constants
     * @return the resulting SampleitemreseachBean table 
     */
    //51
    public SampleitemreseachBean[] loadByWhere(String where, int[] fieldList) throws SQLException
    {
        String sql = null;
        if(fieldList == null)
            sql = "select " + ALL_FIELDS + " from sampleitemreseach " + where;
        else
        {
            StringBuffer buff = new StringBuffer(128);
            buff.append("select ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0)
                    buff.append(",");
                buff.append(FIELD_NAMES[fieldList[i]]);
            }
            buff.append(" from sampleitemreseach ");
            buff.append(where);
            sql = buff.toString();
            buff = null;
        }
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        java.util.ArrayList v = null;
        try 
        {
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else
                    v.add(decodeRow(rs, fieldList));
            }

            return (SampleitemreseachBean[])v.toArray(new SampleitemreseachBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); }
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
    }


    /**
     * Deletes all rows from sampleitemreseach table.
     * @return the number of deleted rows.
     */
    public int deleteAll() throws SQLException
    {
        return deleteByWhere("");
    }


    /**
     * Deletes rows from the sampleitemreseach table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records. 
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     */
    public int deleteByWhere(String where) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = getConnection();
            String delByWhereSQL = "DELETE FROM sampleitemreseach " + where;
            ps = c.prepareStatement(delByWhereSQL);
            return ps.executeUpdate();
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // SAVE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Saves the SampleitemreseachBean pObject into the database.
     *
     * @param pObject the SampleitemreseachBean pObject to be saved
     */
    //100
    public SampleitemreseachBean save(SampleitemreseachBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;

        try
        {
            c = getConnection();
            if (pObject.isNew())
            { // SAVE 
                if (!pObject.isSampleitemreseachidModified())
                {
                    ps = c.prepareStatement("SELECT nextval('sampleitemreseachid_seq')");
                    ResultSet rs = null;
                    try
                    {
                        rs = ps.executeQuery();
                        if(rs.next())
                            pObject.setSampleitemreseachid(Manager.getLong(rs, 1));
                        else
                            getManager().log("ATTENTION: Could not retrieve generated key!");
                    }
                    finally
                    {
                        getManager().close(ps, rs);
                        ps=null;
                    }
                }
                beforeInsert(pObject); // listener callback
                int _dirtyCount = 0;
                _sql = new StringBuffer("INSERT into sampleitemreseach (");
    
                if (pObject.isSampleitemreseachidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("sampleitemreseachid");
                    _dirtyCount++;
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractsampleitemid");
                    _dirtyCount++;
                }

                if (pObject.isContractidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("contractid");
                    _dirtyCount++;
                }

                if (pObject.isLabtestidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("labtestid");
                    _dirtyCount++;
                }

                if (pObject.isPriceModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("price");
                    _dirtyCount++;
                }

                if (pObject.isRegbyidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regbyid");
                    _dirtyCount++;
                }

                if (pObject.isRegdateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("regdate");
                    _dirtyCount++;
                }

                if (pObject.isDeletedModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deleted");
                    _dirtyCount++;
                }

                if (pObject.isStatusModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("status");
                    _dirtyCount++;
                }

                if (pObject.isTotalsubtestModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("totalsubtest");
                    _dirtyCount++;
                }

                if (pObject.isParenttestModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("parenttest");
                    _dirtyCount++;
                }

                if (pObject.isConfirmation1idModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirmation1id");
                    _dirtyCount++;
                }

                if (pObject.isConfirmation2idModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirmation2id");
                    _dirtyCount++;
                }

                if (pObject.isConfirmation3idModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confirmation3id");
                    _dirtyCount++;
                }

                if (pObject.isDaynumModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("daynum");
                    _dirtyCount++;
                }

                if (pObject.isInstitutionidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("institutionid");
                    _dirtyCount++;
                }

                if (pObject.isQualitycontrolPersonModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("qualitycontrol_person");
                    _dirtyCount++;
                }

                if (pObject.isQualitycontrolDatetimeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("qualitycontrol_datetime");
                    _dirtyCount++;
                }

                if (pObject.isQualitycontrolAnswerModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("qualitycontrol_answer");
                    _dirtyCount++;
                }

                if (pObject.isResultModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("result");
                    _dirtyCount++;
                }

                if (pObject.isResultDatetimeModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("result_datetime");
                    _dirtyCount++;
                }

                if (pObject.isResultNoteModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("result_note");
                    _dirtyCount++;
                }

                if (pObject.isResultInfoModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("result_info");
                    _dirtyCount++;
                }

                if (pObject.isResultNormModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("result_norm");
                    _dirtyCount++;
                }

                if (pObject.isConfiramtion1dateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confiramtion1date");
                    _dirtyCount++;
                }

                if (pObject.isConfiramtion2dateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confiramtion2date");
                    _dirtyCount++;
                }

                if (pObject.isConfiramtion3dateModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("confiramtion3date");
                    _dirtyCount++;
                }

                if (pObject.isDeviceidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("deviceid");
                    _dirtyCount++;
                }

                if (pObject.isResultdescrModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("resultdescr");
                    _dirtyCount++;
                }

                if (pObject.isSpeciesidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("speciesid");
                    _dirtyCount++;
                }

                if (pObject.isStandardidModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("standardid");
                    _dirtyCount++;
                }

                if (pObject.isNormModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("norm");
                    _dirtyCount++;
                }

                if (pObject.isBresultModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("bresult");
                    _dirtyCount++;
                }

                if (pObject.isNresultModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("nresult");
                    _dirtyCount++;
                }

                if (pObject.isTresultModified()) {
                    if (_dirtyCount>0) {
                        _sql.append(",");
                    }
                    _sql.append("tresult");
                    _dirtyCount++;
                }

                _sql.append(") values (");
                if(_dirtyCount > 0) {
                    _sql.append("?");
                    for(int i = 1; i < _dirtyCount; i++) {
                        _sql.append(",?");
                    }
                }
                _sql.append(")");

                ps = c.prepareStatement(_sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                _dirtyCount = 0;

                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isTotalsubtestModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTotalsubtest());
                }
    
                if (pObject.isParenttestModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParenttest());
                }
    
                if (pObject.isConfirmation1idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
                }
    
                if (pObject.isConfirmation2idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
                }
    
                if (pObject.isConfirmation3idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
                }
    
                if (pObject.isDaynumModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDaynum());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isQualitycontrolPersonModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getQualitycontrolPerson());
                }
    
                if (pObject.isQualitycontrolDatetimeModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getQualitycontrolDatetime());
                }
    
                if (pObject.isQualitycontrolAnswerModified()) {
                    ps.setString(++_dirtyCount, pObject.getQualitycontrolAnswer());
                }
    
                if (pObject.isResultModified()) {
                    ps.setString(++_dirtyCount, pObject.getResult());
                }
    
                if (pObject.isResultDatetimeModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getResultDatetime());
                }
    
                if (pObject.isResultNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getResultNote());
                }
    
                if (pObject.isResultInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getResultInfo());
                }
    
                if (pObject.isResultNormModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getResultNorm());
                }
    
                if (pObject.isConfiramtion1dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion1date());
                }
    
                if (pObject.isConfiramtion2dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion2date());
                }
    
                if (pObject.isConfiramtion3dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion3date());
                }
    
                if (pObject.isDeviceidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDeviceid());
                }
    
                if (pObject.isResultdescrModified()) {
                    ps.setString(++_dirtyCount, pObject.getResultdescr());
                }
    
                if (pObject.isSpeciesidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }
    
                if (pObject.isStandardidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStandardid());
                }
    
                if (pObject.isNormModified()) {
                    ps.setString(++_dirtyCount, pObject.getNorm());
                }
    
                if (pObject.isBresultModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBresult());
                }
    
                if (pObject.isNresultModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getNresult());
                }
    
                if (pObject.isTresultModified()) {
                    ps.setString(++_dirtyCount, pObject.getTresult());
                }
    
                ps.executeUpdate();
    
                pObject.isNew(false);
                pObject.resetIsModified();
                afterInsert(pObject); // listener callback
            }
            else 
            { // UPDATE 
                beforeUpdate(pObject); // listener callback
                _sql = new StringBuffer("UPDATE sampleitemreseach SET ");
                boolean useComma=false;

                if (pObject.isSampleitemreseachidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("sampleitemreseachid").append("=?");
                }

                if (pObject.isContractsampleitemidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractsampleitemid").append("=?");
                }

                if (pObject.isContractidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("contractid").append("=?");
                }

                if (pObject.isLabtestidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("labtestid").append("=?");
                }

                if (pObject.isPriceModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("price").append("=?");
                }

                if (pObject.isRegbyidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regbyid").append("=?");
                }

                if (pObject.isRegdateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("regdate").append("=?");
                }

                if (pObject.isDeletedModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deleted").append("=?");
                }

                if (pObject.isStatusModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("status").append("=?");
                }

                if (pObject.isTotalsubtestModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("totalsubtest").append("=?");
                }

                if (pObject.isParenttestModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("parenttest").append("=?");
                }

                if (pObject.isConfirmation1idModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirmation1id").append("=?");
                }

                if (pObject.isConfirmation2idModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirmation2id").append("=?");
                }

                if (pObject.isConfirmation3idModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confirmation3id").append("=?");
                }

                if (pObject.isDaynumModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("daynum").append("=?");
                }

                if (pObject.isInstitutionidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("institutionid").append("=?");
                }

                if (pObject.isQualitycontrolPersonModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("qualitycontrol_person").append("=?");
                }

                if (pObject.isQualitycontrolDatetimeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("qualitycontrol_datetime").append("=?");
                }

                if (pObject.isQualitycontrolAnswerModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("qualitycontrol_answer").append("=?");
                }

                if (pObject.isResultModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("result").append("=?");
                }

                if (pObject.isResultDatetimeModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("result_datetime").append("=?");
                }

                if (pObject.isResultNoteModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("result_note").append("=?");
                }

                if (pObject.isResultInfoModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("result_info").append("=?");
                }

                if (pObject.isResultNormModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("result_norm").append("=?");
                }

                if (pObject.isConfiramtion1dateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confiramtion1date").append("=?");
                }

                if (pObject.isConfiramtion2dateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confiramtion2date").append("=?");
                }

                if (pObject.isConfiramtion3dateModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("confiramtion3date").append("=?");
                }

                if (pObject.isDeviceidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("deviceid").append("=?");
                }

                if (pObject.isResultdescrModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("resultdescr").append("=?");
                }

                if (pObject.isSpeciesidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("speciesid").append("=?");
                }

                if (pObject.isStandardidModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("standardid").append("=?");
                }

                if (pObject.isNormModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("norm").append("=?");
                }

                if (pObject.isBresultModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("bresult").append("=?");
                }

                if (pObject.isNresultModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("nresult").append("=?");
                }

                if (pObject.isTresultModified()) {
                    if (useComma) {
                        _sql.append(",");
                    } else {
                        useComma=true;
                    }
                    _sql.append("tresult").append("=?");
                }
                _sql.append(" WHERE ");
                _sql.append("sampleitemreseach.sampleitemreseachid=?");
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                int _dirtyCount = 0;

                if (pObject.isSampleitemreseachidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }

                if (pObject.isContractsampleitemidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }

                if (pObject.isContractidModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }

                if (pObject.isLabtestidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }

                if (pObject.isPriceModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }

                if (pObject.isRegbyidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }

                if (pObject.isRegdateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }

                if (pObject.isDeletedModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }

                if (pObject.isStatusModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }

                if (pObject.isTotalsubtestModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getTotalsubtest());
                }

                if (pObject.isParenttestModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getParenttest());
                }

                if (pObject.isConfirmation1idModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
                }

                if (pObject.isConfirmation2idModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
                }

                if (pObject.isConfirmation3idModified()) {
                      Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
                }

                if (pObject.isDaynumModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDaynum());
                }

                if (pObject.isInstitutionidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }

                if (pObject.isQualitycontrolPersonModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getQualitycontrolPerson());
                }

                if (pObject.isQualitycontrolDatetimeModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getQualitycontrolDatetime());
                }

                if (pObject.isQualitycontrolAnswerModified()) {
                      ps.setString(++_dirtyCount, pObject.getQualitycontrolAnswer());
                }

                if (pObject.isResultModified()) {
                      ps.setString(++_dirtyCount, pObject.getResult());
                }

                if (pObject.isResultDatetimeModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getResultDatetime());
                }

                if (pObject.isResultNoteModified()) {
                      ps.setString(++_dirtyCount, pObject.getResultNote());
                }

                if (pObject.isResultInfoModified()) {
                      ps.setString(++_dirtyCount, pObject.getResultInfo());
                }

                if (pObject.isResultNormModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getResultNorm());
                }

                if (pObject.isConfiramtion1dateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion1date());
                }

                if (pObject.isConfiramtion2dateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion2date());
                }

                if (pObject.isConfiramtion3dateModified()) {
                      ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion3date());
                }

                if (pObject.isDeviceidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getDeviceid());
                }

                if (pObject.isResultdescrModified()) {
                      ps.setString(++_dirtyCount, pObject.getResultdescr());
                }

                if (pObject.isSpeciesidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }

                if (pObject.isStandardidModified()) {
                      Manager.setInteger(ps, ++_dirtyCount, pObject.getStandardid());
                }

                if (pObject.isNormModified()) {
                      ps.setString(++_dirtyCount, pObject.getNorm());
                }

                if (pObject.isBresultModified()) {
                      Manager.setBoolean(ps, ++_dirtyCount, pObject.getBresult());
                }

                if (pObject.isNresultModified()) {
                      Manager.setDouble(ps, ++_dirtyCount, pObject.getNresult());
                }

                if (pObject.isTresultModified()) {
                      ps.setString(++_dirtyCount, pObject.getTresult());
                }
    
                if (_dirtyCount == 0) {
                     return pObject;
                }
    
                Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                ps.executeUpdate();
                pObject.resetIsModified();
                afterUpdate(pObject); // listener callback
            }
    
            return pObject;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    /**
     * Saves an array of SampleitemreseachBean pObjects into the database.
     *
     * @param pObjects the SampleitemreseachBean pObject table to be saved
     * @return the saved SampleitemreseachBean array.
     */
    //65
    public SampleitemreseachBean[] save(SampleitemreseachBean[] pObjects) throws SQLException 
    {
        for (int iIndex = 0; iIndex < pObjects.length; iIndex ++){
            save(pObjects[iIndex]);
        }
        return pObjects;
    }



    ///////////////////////////////////////////////////////////////////////
    // USING TEMPLATE 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Loads a unique SampleitemreseachBean pObject from a template one giving a c
     *
     * @param pObject the SampleitemreseachBean pObject to look for
     * @return the pObject matching the template
     */
    //85
    public SampleitemreseachBean loadUniqueUsingTemplate(SampleitemreseachBean pObject) throws SQLException
    {
         SampleitemreseachBean[] pReturn = loadUsingTemplate(pObject);
         if (pReturn.length == 0)
             return null;
         if (pReturn.length > 1)
             throw new SQLException("More than one element !!");
         return pReturn[0];
     }

    /**
     * Loads an array of SampleitemreseachBean from a template one.
     *
     * @param pObject the SampleitemreseachBean template to look for
     * @return all the SampleitemreseachBean matching the template
     */
    //88
    public SampleitemreseachBean[] loadUsingTemplate(SampleitemreseachBean pObject) throws SQLException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer where = new StringBuffer("");
        StringBuffer _sql = new StringBuffer("SELECT " + ALL_FIELDS + " from sampleitemreseach WHERE ");
        StringBuffer _sqlWhere = new StringBuffer("");
        try
        {
            int _dirtyCount = 0;
    
             if (pObject.isSampleitemreseachidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
             }
    
             if (pObject.isContractidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
             }
    
             if (pObject.isLabtestidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
             }
    
             if (pObject.isPriceModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
             }
    
             if (pObject.isRegbyidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
             }
    
             if (pObject.isRegdateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
             }
    
             if (pObject.isDeletedModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
             }
    
             if (pObject.isStatusModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
             }
    
             if (pObject.isTotalsubtestModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalsubtest= ?");
             }
    
             if (pObject.isParenttestModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parenttest= ?");
             }
    
             if (pObject.isConfirmation1idModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation1id= ?");
             }
    
             if (pObject.isConfirmation2idModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation2id= ?");
             }
    
             if (pObject.isConfirmation3idModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation3id= ?");
             }
    
             if (pObject.isDaynumModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("daynum= ?");
             }
    
             if (pObject.isInstitutionidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
             }
    
             if (pObject.isQualitycontrolPersonModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("qualitycontrol_person= ?");
             }
    
             if (pObject.isQualitycontrolDatetimeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("qualitycontrol_datetime= ?");
             }
    
             if (pObject.isQualitycontrolAnswerModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("qualitycontrol_answer= ?");
             }
    
             if (pObject.isResultModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result= ?");
             }
    
             if (pObject.isResultDatetimeModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_datetime= ?");
             }
    
             if (pObject.isResultNoteModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_note= ?");
             }
    
             if (pObject.isResultInfoModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_info= ?");
             }
    
             if (pObject.isResultNormModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_norm= ?");
             }
    
             if (pObject.isConfiramtion1dateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confiramtion1date= ?");
             }
    
             if (pObject.isConfiramtion2dateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confiramtion2date= ?");
             }
    
             if (pObject.isConfiramtion3dateModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confiramtion3date= ?");
             }
    
             if (pObject.isDeviceidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deviceid= ?");
             }
    
             if (pObject.isResultdescrModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("resultdescr= ?");
             }
    
             if (pObject.isSpeciesidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("speciesid= ?");
             }
    
             if (pObject.isStandardidModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("standardid= ?");
             }
    
             if (pObject.isNormModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("norm= ?");
             }
    
             if (pObject.isBresultModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bresult= ?");
             }
    
             if (pObject.isNresultModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nresult= ?");
             }
    
             if (pObject.isTresultModified()) {
                 _dirtyCount ++; 
                 _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tresult= ?");
             }
    
             if (_dirtyCount == 0) {
                 throw new SQLException ("The pObject to look for is invalid : not initialized !");
             }
             _sql.append(_sqlWhere);
             c = getConnection();
             ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
             _dirtyCount = 0;
    
             if (pObject.isSampleitemreseachidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
             }
    
             if (pObject.isContractsampleitemidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
             }
    
             if (pObject.isContractidModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
             }
    
             if (pObject.isLabtestidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
             }
    
             if (pObject.isPriceModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
             }
    
             if (pObject.isRegbyidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
             }
    
             if (pObject.isRegdateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
             }
    
             if (pObject.isDeletedModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
             }
    
             if (pObject.isStatusModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
             }
    
             if (pObject.isTotalsubtestModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getTotalsubtest());
             }
    
             if (pObject.isParenttestModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getParenttest());
             }
    
             if (pObject.isConfirmation1idModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
             }
    
             if (pObject.isConfirmation2idModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
             }
    
             if (pObject.isConfirmation3idModified()) {
                 Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
             }
    
             if (pObject.isDaynumModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDaynum());
             }
    
             if (pObject.isInstitutionidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
             }
    
             if (pObject.isQualitycontrolPersonModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getQualitycontrolPerson());
             }
    
             if (pObject.isQualitycontrolDatetimeModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getQualitycontrolDatetime());
             }
    
             if (pObject.isQualitycontrolAnswerModified()) {
                 ps.setString(++_dirtyCount, pObject.getQualitycontrolAnswer());
             }
    
             if (pObject.isResultModified()) {
                 ps.setString(++_dirtyCount, pObject.getResult());
             }
    
             if (pObject.isResultDatetimeModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getResultDatetime());
             }
    
             if (pObject.isResultNoteModified()) {
                 ps.setString(++_dirtyCount, pObject.getResultNote());
             }
    
             if (pObject.isResultInfoModified()) {
                 ps.setString(++_dirtyCount, pObject.getResultInfo());
             }
    
             if (pObject.isResultNormModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getResultNorm());
             }
    
             if (pObject.isConfiramtion1dateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion1date());
             }
    
             if (pObject.isConfiramtion2dateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion2date());
             }
    
             if (pObject.isConfiramtion3dateModified()) {
                 ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion3date());
             }
    
             if (pObject.isDeviceidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getDeviceid());
             }
    
             if (pObject.isResultdescrModified()) {
                 ps.setString(++_dirtyCount, pObject.getResultdescr());
             }
    
             if (pObject.isSpeciesidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
             }
    
             if (pObject.isStandardidModified()) {
                 Manager.setInteger(ps, ++_dirtyCount, pObject.getStandardid());
             }
    
             if (pObject.isNormModified()) {
                 ps.setString(++_dirtyCount, pObject.getNorm());
             }
    
             if (pObject.isBresultModified()) {
                 Manager.setBoolean(ps, ++_dirtyCount, pObject.getBresult());
             }
    
             if (pObject.isNresultModified()) {
                 Manager.setDouble(ps, ++_dirtyCount, pObject.getNresult());
             }
    
             if (pObject.isTresultModified()) {
                 ps.setString(++_dirtyCount, pObject.getTresult());
             }
    
             ps.executeQuery();
             return loadByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }
    /**
     * Deletes rows using a SampleitemreseachBean template.
     *
     * @param pObject the SampleitemreseachBean object(s) to be deleted
     * @return the number of deleted objects
     */
    //63
    public int deleteUsingTemplate(SampleitemreseachBean pObject) throws SQLException
    {
        if (pObject.isSampleitemreseachidInitialized())
            return deleteByPrimaryKey(pObject.getSampleitemreseachid());
    
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;
    
        try 
        {
            sql = new StringBuffer("DELETE FROM sampleitemreseach WHERE ");
            int _dirtyAnd = 0;
            if (pObject.isSampleitemreseachidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("sampleitemreseachid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractsampleitemid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isContractidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("contractid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isLabtestidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("labtestid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isPriceInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("price").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegbyidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regbyid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isRegdateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("regdate").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeletedInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deleted").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStatusInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("status").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTotalsubtestInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("totalsubtest").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isParenttestInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("parenttest").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirmation1idInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirmation1id").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirmation2idInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirmation2id").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfirmation3idInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confirmation3id").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDaynumInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("daynum").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isInstitutionidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("institutionid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isQualitycontrolPersonInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("qualitycontrol_person").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isQualitycontrolDatetimeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("qualitycontrol_datetime").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isQualitycontrolAnswerInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("qualitycontrol_answer").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResultInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("result").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResultDatetimeInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("result_datetime").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResultNoteInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("result_note").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResultInfoInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("result_info").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResultNormInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("result_norm").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfiramtion1dateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confiramtion1date").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfiramtion2dateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confiramtion2date").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isConfiramtion3dateInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("confiramtion3date").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isDeviceidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("deviceid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isResultdescrInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("resultdescr").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isSpeciesidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("speciesid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isStandardidInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("standardid").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNormInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("norm").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isBresultInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("bresult").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isNresultInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("nresult").append("=?");
                _dirtyAnd ++;
            }
    
            if (pObject.isTresultInitialized()) {
                if (_dirtyAnd > 0)
                    sql.append(" AND ");
                sql.append("tresult").append("=?");
                _dirtyAnd ++;
            }
    
            c = getConnection();
            ps = c.prepareStatement(sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            int _dirtyCount = 0;
    
            if (pObject.isSampleitemreseachidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
            }
    
            if (pObject.isContractsampleitemidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
            }
    
            if (pObject.isContractidInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
            }
    
            if (pObject.isLabtestidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
            }
    
            if (pObject.isPriceInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
            }
    
            if (pObject.isRegbyidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
            }
    
            if (pObject.isRegdateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
            }
    
            if (pObject.isDeletedInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
            }
    
            if (pObject.isStatusInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
            }
    
            if (pObject.isTotalsubtestInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getTotalsubtest());
            }
    
            if (pObject.isParenttestInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getParenttest());
            }
    
            if (pObject.isConfirmation1idInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
            }
    
            if (pObject.isConfirmation2idInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
            }
    
            if (pObject.isConfirmation3idInitialized()) {
                Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
            }
    
            if (pObject.isDaynumInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDaynum());
            }
    
            if (pObject.isInstitutionidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
            }
    
            if (pObject.isQualitycontrolPersonInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getQualitycontrolPerson());
            }
    
            if (pObject.isQualitycontrolDatetimeInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getQualitycontrolDatetime());
            }
    
            if (pObject.isQualitycontrolAnswerInitialized()) {
                ps.setString(++_dirtyCount, pObject.getQualitycontrolAnswer());
            }
    
            if (pObject.isResultInitialized()) {
                ps.setString(++_dirtyCount, pObject.getResult());
            }
    
            if (pObject.isResultDatetimeInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getResultDatetime());
            }
    
            if (pObject.isResultNoteInitialized()) {
                ps.setString(++_dirtyCount, pObject.getResultNote());
            }
    
            if (pObject.isResultInfoInitialized()) {
                ps.setString(++_dirtyCount, pObject.getResultInfo());
            }
    
            if (pObject.isResultNormInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getResultNorm());
            }
    
            if (pObject.isConfiramtion1dateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion1date());
            }
    
            if (pObject.isConfiramtion2dateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion2date());
            }
    
            if (pObject.isConfiramtion3dateInitialized()) {
                ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion3date());
            }
    
            if (pObject.isDeviceidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getDeviceid());
            }
    
            if (pObject.isResultdescrInitialized()) {
                ps.setString(++_dirtyCount, pObject.getResultdescr());
            }
    
            if (pObject.isSpeciesidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
            }
    
            if (pObject.isStandardidInitialized()) {
                Manager.setInteger(ps, ++_dirtyCount, pObject.getStandardid());
            }
    
            if (pObject.isNormInitialized()) {
                ps.setString(++_dirtyCount, pObject.getNorm());
            }
    
            if (pObject.isBresultInitialized()) {
                Manager.setBoolean(ps, ++_dirtyCount, pObject.getBresult());
            }
    
            if (pObject.isNresultInitialized()) {
                Manager.setDouble(ps, ++_dirtyCount, pObject.getNresult());
            }
    
            if (pObject.isTresultInitialized()) {
                ps.setString(++_dirtyCount, pObject.getTresult());
            }
    
            int _rows = ps.executeUpdate();
            return _rows;
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // COUNT 
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the number of rows of the table sampleitemreseach.
     *
     * @return the number of rows returned
     */
    //78
    public int countAll() throws SQLException
    {
        return countWhere("");
    }



    /**
     * Retrieves the number of rows of the table sampleitemreseach with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     */
    public int countWhere(String where) throws SQLException
    {
        String sql = "select count(*) as MCOUNT from sampleitemreseach " + where;
        Connection c = null;
        Statement pStatement = null;
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;    
            c = getConnection();
            pStatement = c.createStatement();
            rs =  pStatement.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(pStatement, rs);
            freeConnection(c);
        }
       throw new SQLException("Error in countWhere");
    }

    /**
     * Retrieves the number of rows of the table sampleitemreseach with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     */
    //82
    int countByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        ResultSet rs =  null;
        try 
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next())
                iReturn = rs.getInt("MCOUNT");
            if (iReturn != -1)
                return iReturn;
        }
        finally
        {
            getManager().close(rs);
        }
       throw new SQLException("Error in countByPreparedStatement");
    }

    /**
     * Looks for the number of elements of a specific SampleitemreseachBean pObject given a c
     *
     * @param pObject the SampleitemreseachBean pObject to look for
     * @return the number of rows returned
     */
    //83
    public int countUsingTemplate(SampleitemreseachBean pObject) throws SQLException
    {
        StringBuffer where = new StringBuffer("");
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer _sql = null;
        StringBuffer _sqlWhere = null;
    
        try
        {
                _sql = new StringBuffer("SELECT count(*) as MCOUNT  from sampleitemreseach WHERE ");
                _sqlWhere = new StringBuffer("");
                int _dirtyCount = 0;
    
                if (pObject.isSampleitemreseachidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("sampleitemreseachid= ?");
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractsampleitemid= ?");
                }
    
                if (pObject.isContractidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("contractid= ?");
                }
    
                if (pObject.isLabtestidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("labtestid= ?");
                }
    
                if (pObject.isPriceModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("price= ?");
                }
    
                if (pObject.isRegbyidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regbyid= ?");
                }
    
                if (pObject.isRegdateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("regdate= ?");
                }
    
                if (pObject.isDeletedModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deleted= ?");
                }
    
                if (pObject.isStatusModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("status= ?");
                }
    
                if (pObject.isTotalsubtestModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("totalsubtest= ?");
                }
    
                if (pObject.isParenttestModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("parenttest= ?");
                }
    
                if (pObject.isConfirmation1idModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation1id= ?");
                }
    
                if (pObject.isConfirmation2idModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation2id= ?");
                }
    
                if (pObject.isConfirmation3idModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confirmation3id= ?");
                }
    
                if (pObject.isDaynumModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("daynum= ?");
                }
    
                if (pObject.isInstitutionidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("institutionid= ?");
                }
    
                if (pObject.isQualitycontrolPersonModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("qualitycontrol_person= ?");
                }
    
                if (pObject.isQualitycontrolDatetimeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("qualitycontrol_datetime= ?");
                }
    
                if (pObject.isQualitycontrolAnswerModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("qualitycontrol_answer= ?");
                }
    
                if (pObject.isResultModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result= ?");
                }
    
                if (pObject.isResultDatetimeModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_datetime= ?");
                }
    
                if (pObject.isResultNoteModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_note= ?");
                }
    
                if (pObject.isResultInfoModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_info= ?");
                }
    
                if (pObject.isResultNormModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("result_norm= ?");
                }
    
                if (pObject.isConfiramtion1dateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confiramtion1date= ?");
                }
    
                if (pObject.isConfiramtion2dateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confiramtion2date= ?");
                }
    
                if (pObject.isConfiramtion3dateModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("confiramtion3date= ?");
                }
    
                if (pObject.isDeviceidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("deviceid= ?");
                }
    
                if (pObject.isResultdescrModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("resultdescr= ?");
                }
    
                if (pObject.isSpeciesidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("speciesid= ?");
                }
    
                if (pObject.isStandardidModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("standardid= ?");
                }
    
                if (pObject.isNormModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("norm= ?");
                }
    
                if (pObject.isBresultModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("bresult= ?");
                }
    
                if (pObject.isNresultModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("nresult= ?");
                }
    
                if (pObject.isTresultModified()) {
                    _dirtyCount++; 
                    _sqlWhere.append((_sqlWhere.length() == 0) ? " " : " AND ").append("tresult= ?");
                }
    
                if (_dirtyCount == 0)
                   throw new SQLException ("The pObject to look is unvalid : not initialized !");
    
                _sql.append(_sqlWhere);
                c = getConnection();
                ps = c.prepareStatement(_sql.toString(),ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    
                _dirtyCount = 0;
    
                if (pObject.isSampleitemreseachidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getSampleitemreseachid());
                }
    
                if (pObject.isContractsampleitemidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractsampleitemid());
                }
    
                if (pObject.isContractidModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getContractid());
                }
    
                if (pObject.isLabtestidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getLabtestid());
                }
    
                if (pObject.isPriceModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getPrice());
                }
    
                if (pObject.isRegbyidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getRegbyid());
                }
    
                if (pObject.isRegdateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getRegdate());
                }
    
                if (pObject.isDeletedModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getDeleted());
                }
    
                if (pObject.isStatusModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStatus());
                }
    
                if (pObject.isTotalsubtestModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getTotalsubtest());
                }
    
                if (pObject.isParenttestModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getParenttest());
                }
    
                if (pObject.isConfirmation1idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation1id());
                }
    
                if (pObject.isConfirmation2idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation2id());
                }
    
                if (pObject.isConfirmation3idModified()) {
                    Manager.setLong(ps, ++_dirtyCount, pObject.getConfirmation3id());
                }
    
                if (pObject.isDaynumModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDaynum());
                }
    
                if (pObject.isInstitutionidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getInstitutionid());
                }
    
                if (pObject.isQualitycontrolPersonModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getQualitycontrolPerson());
                }
    
                if (pObject.isQualitycontrolDatetimeModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getQualitycontrolDatetime());
                }
    
                if (pObject.isQualitycontrolAnswerModified()) {
                    ps.setString(++_dirtyCount, pObject.getQualitycontrolAnswer());
                }
    
                if (pObject.isResultModified()) {
                    ps.setString(++_dirtyCount, pObject.getResult());
                }
    
                if (pObject.isResultDatetimeModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getResultDatetime());
                }
    
                if (pObject.isResultNoteModified()) {
                    ps.setString(++_dirtyCount, pObject.getResultNote());
                }
    
                if (pObject.isResultInfoModified()) {
                    ps.setString(++_dirtyCount, pObject.getResultInfo());
                }
    
                if (pObject.isResultNormModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getResultNorm());
                }
    
                if (pObject.isConfiramtion1dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion1date());
                }
    
                if (pObject.isConfiramtion2dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion2date());
                }
    
                if (pObject.isConfiramtion3dateModified()) {
                    ps.setTimestamp(++_dirtyCount, pObject.getConfiramtion3date());
                }
    
                if (pObject.isDeviceidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getDeviceid());
                }
    
                if (pObject.isResultdescrModified()) {
                    ps.setString(++_dirtyCount, pObject.getResultdescr());
                }
    
                if (pObject.isSpeciesidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getSpeciesid());
                }
    
                if (pObject.isStandardidModified()) {
                    Manager.setInteger(ps, ++_dirtyCount, pObject.getStandardid());
                }
    
                if (pObject.isNormModified()) {
                    ps.setString(++_dirtyCount, pObject.getNorm());
                }
    
                if (pObject.isBresultModified()) {
                    Manager.setBoolean(ps, ++_dirtyCount, pObject.getBresult());
                }
    
                if (pObject.isNresultModified()) {
                    Manager.setDouble(ps, ++_dirtyCount, pObject.getNresult());
                }
    
                if (pObject.isTresultModified()) {
                    ps.setString(++_dirtyCount, pObject.getTresult());
                }
    
                return countByPreparedStatement(ps);
        }
        finally
        {
            getManager().close(ps);
            freeConnection(c);
        }
    }



    ///////////////////////////////////////////////////////////////////////
    // DECODE RESULT SET 
    ///////////////////////////////////////////////////////////////////////
    /**
     * Transforms a ResultSet iterating on the sampleitemreseach on a SampleitemreseachBean pObject.
     *
     * @param rs the ResultSet to be transformed
     * @return pObject resulting SampleitemreseachBean pObject
     */
    //72
    public SampleitemreseachBean decodeRow(ResultSet rs) throws SQLException
    {
        SampleitemreseachBean pObject = createSampleitemreseachBean();
        pObject.setSampleitemreseachid(Manager.getLong(rs, 1));
        pObject.setContractsampleitemid(Manager.getLong(rs, 2));
        pObject.setContractid(Manager.getLong(rs, 3));
        pObject.setLabtestid(Manager.getInteger(rs, 4));
        pObject.setPrice(Manager.getDouble(rs, 5));
        pObject.setRegbyid(Manager.getInteger(rs, 6));
        pObject.setRegdate(rs.getTimestamp(7));
        pObject.setDeleted(Manager.getBoolean(rs, 8));
        pObject.setStatus(Manager.getInteger(rs, 9));
        pObject.setTotalsubtest(Manager.getInteger(rs, 10));
        pObject.setParenttest(Manager.getLong(rs, 11));
        pObject.setConfirmation1id(Manager.getLong(rs, 12));
        pObject.setConfirmation2id(Manager.getLong(rs, 13));
        pObject.setConfirmation3id(Manager.getLong(rs, 14));
        pObject.setDaynum(Manager.getInteger(rs, 15));
        pObject.setInstitutionid(Manager.getInteger(rs, 16));
        pObject.setQualitycontrolPerson(Manager.getInteger(rs, 17));
        pObject.setQualitycontrolDatetime(rs.getTimestamp(18));
        pObject.setQualitycontrolAnswer(rs.getString(19));
        pObject.setResult(rs.getString(20));
        pObject.setResultDatetime(rs.getTimestamp(21));
        pObject.setResultNote(rs.getString(22));
        pObject.setResultInfo(rs.getString(23));
        pObject.setResultNorm(Manager.getBoolean(rs, 24));
        pObject.setConfiramtion1date(rs.getTimestamp(25));
        pObject.setConfiramtion2date(rs.getTimestamp(26));
        pObject.setConfiramtion3date(rs.getTimestamp(27));
        pObject.setDeviceid(Manager.getInteger(rs, 28));
        pObject.setResultdescr(rs.getString(29));
        pObject.setSpeciesid(Manager.getInteger(rs, 30));
        pObject.setStandardid(Manager.getInteger(rs, 31));
        pObject.setNorm(rs.getString(32));
        pObject.setBresult(Manager.getBoolean(rs, 33));
        pObject.setNresult(Manager.getDouble(rs, 34));
        pObject.setTresult(rs.getString(35));

        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    /**
     * Transforms a ResultSet iterating on the sampleitemreseach table on a SampleitemreseachBean pObject according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return pObject resulting SampleitemreseachBean pObject
     */
    //73
    public SampleitemreseachBean decodeRow(ResultSet rs, int[] fieldList) throws SQLException
    {
        SampleitemreseachBean pObject = createSampleitemreseachBean();
        int pos = 0;
        for(int i = 0; i < fieldList.length; i++)
        {
            switch(fieldList[i]) {
                case ID_SAMPLEITEMRESEACHID:
                    ++pos;
                    pObject.setSampleitemreseachid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTSAMPLEITEMID:
                    ++pos;
                    pObject.setContractsampleitemid(Manager.getLong(rs, pos));
                    break;
                case ID_CONTRACTID:
                    ++pos;
                    pObject.setContractid(Manager.getLong(rs, pos));
                    break;
                case ID_LABTESTID:
                    ++pos;
                    pObject.setLabtestid(Manager.getInteger(rs, pos));
                    break;
                case ID_PRICE:
                    ++pos;
                    pObject.setPrice(Manager.getDouble(rs, pos));
                    break;
                case ID_REGBYID:
                    ++pos;
                    pObject.setRegbyid(Manager.getInteger(rs, pos));
                    break;
                case ID_REGDATE:
                    ++pos;
                    pObject.setRegdate(rs.getTimestamp(pos));
                    break;
                case ID_DELETED:
                    ++pos;
                    pObject.setDeleted(Manager.getBoolean(rs, pos));
                    break;
                case ID_STATUS:
                    ++pos;
                    pObject.setStatus(Manager.getInteger(rs, pos));
                    break;
                case ID_TOTALSUBTEST:
                    ++pos;
                    pObject.setTotalsubtest(Manager.getInteger(rs, pos));
                    break;
                case ID_PARENTTEST:
                    ++pos;
                    pObject.setParenttest(Manager.getLong(rs, pos));
                    break;
                case ID_CONFIRMATION1ID:
                    ++pos;
                    pObject.setConfirmation1id(Manager.getLong(rs, pos));
                    break;
                case ID_CONFIRMATION2ID:
                    ++pos;
                    pObject.setConfirmation2id(Manager.getLong(rs, pos));
                    break;
                case ID_CONFIRMATION3ID:
                    ++pos;
                    pObject.setConfirmation3id(Manager.getLong(rs, pos));
                    break;
                case ID_DAYNUM:
                    ++pos;
                    pObject.setDaynum(Manager.getInteger(rs, pos));
                    break;
                case ID_INSTITUTIONID:
                    ++pos;
                    pObject.setInstitutionid(Manager.getInteger(rs, pos));
                    break;
                case ID_QUALITYCONTROL_PERSON:
                    ++pos;
                    pObject.setQualitycontrolPerson(Manager.getInteger(rs, pos));
                    break;
                case ID_QUALITYCONTROL_DATETIME:
                    ++pos;
                    pObject.setQualitycontrolDatetime(rs.getTimestamp(pos));
                    break;
                case ID_QUALITYCONTROL_ANSWER:
                    ++pos;
                    pObject.setQualitycontrolAnswer(rs.getString(pos));
                    break;
                case ID_RESULT:
                    ++pos;
                    pObject.setResult(rs.getString(pos));
                    break;
                case ID_RESULT_DATETIME:
                    ++pos;
                    pObject.setResultDatetime(rs.getTimestamp(pos));
                    break;
                case ID_RESULT_NOTE:
                    ++pos;
                    pObject.setResultNote(rs.getString(pos));
                    break;
                case ID_RESULT_INFO:
                    ++pos;
                    pObject.setResultInfo(rs.getString(pos));
                    break;
                case ID_RESULT_NORM:
                    ++pos;
                    pObject.setResultNorm(Manager.getBoolean(rs, pos));
                    break;
                case ID_CONFIRAMTION1DATE:
                    ++pos;
                    pObject.setConfiramtion1date(rs.getTimestamp(pos));
                    break;
                case ID_CONFIRAMTION2DATE:
                    ++pos;
                    pObject.setConfiramtion2date(rs.getTimestamp(pos));
                    break;
                case ID_CONFIRAMTION3DATE:
                    ++pos;
                    pObject.setConfiramtion3date(rs.getTimestamp(pos));
                    break;
                case ID_DEVICEID:
                    ++pos;
                    pObject.setDeviceid(Manager.getInteger(rs, pos));
                    break;
                case ID_RESULTDESCR:
                    ++pos;
                    pObject.setResultdescr(rs.getString(pos));
                    break;
                case ID_SPECIESID:
                    ++pos;
                    pObject.setSpeciesid(Manager.getInteger(rs, pos));
                    break;
                case ID_STANDARDID:
                    ++pos;
                    pObject.setStandardid(Manager.getInteger(rs, pos));
                    break;
                case ID_NORM:
                    ++pos;
                    pObject.setNorm(rs.getString(pos));
                    break;
                case ID_BRESULT:
                    ++pos;
                    pObject.setBresult(Manager.getBoolean(rs, pos));
                    break;
                case ID_NRESULT:
                    ++pos;
                    pObject.setNresult(Manager.getDouble(rs, pos));
                    break;
                case ID_TRESULT:
                    ++pos;
                    pObject.setTresult(rs.getString(pos));
                    break;
            }
        }
        pObject.isNew(false);
        pObject.resetIsModified();

        return pObject;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of SampleitemreseachBean 
     */
    //41
    public SampleitemreseachBean[] loadByPreparedStatement(PreparedStatement ps) throws SQLException
    {
        return loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of SampleitemreseachBean 
     */
    public SampleitemreseachBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws SQLException
    {
        ResultSet rs =  null;
        java.util.ArrayList v =  null;
        try
        {
            rs =  ps.executeQuery();
            v = new java.util.ArrayList();
            while(rs.next())
            {
                if(fieldList == null)
                    v.add(decodeRow(rs));
                else 
                    v.add(decodeRow(rs, fieldList));
            }
            return (SampleitemreseachBean[])v.toArray(new SampleitemreseachBean[0]);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    ///////////////////////////////////////////////////////////////////////
    // LISTENER 
    ///////////////////////////////////////////////////////////////////////
    private SampleitemreseachListener listener = null;

    /**
     * Registers a unique SampleitemreseachListener listener.
     */
    //66.5
    public void registerListener(SampleitemreseachListener listener) {
        this.listener = listener;
    }

    /**
     * Before the save of the SampleitemreseachBean pObject.
     *
     * @param pObject the SampleitemreseachBean pObject to be saved
     */
    //67
    void beforeInsert(SampleitemreseachBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeInsert(pObject);
    }

    /**
     * After the save of the SampleitemreseachBean pObject.
     *
     * @param pObject the SampleitemreseachBean pObject to be saved
     */
    //68
    void afterInsert(SampleitemreseachBean pObject) throws SQLException {
        if (listener != null)
            listener.afterInsert(pObject);
    }

    /**
     * Before the update of the SampleitemreseachBean pObject.
     *
     * @param pObject the SampleitemreseachBean pObject to be updated
     */
    //69
    void beforeUpdate(SampleitemreseachBean pObject) throws SQLException {
        if (listener != null)
            listener.beforeUpdate(pObject);
    }

    /**
     * After the update of the SampleitemreseachBean pObject.
     *
     * @param pObject the SampleitemreseachBean pObject to be updated
     */
    //70
    void afterUpdate(SampleitemreseachBean pObject) throws SQLException {
        if (listener != null)
            listener.afterUpdate(pObject);
    }

    ///////////////////////////////////////////////////////////////////////
    // UTILS  
    ///////////////////////////////////////////////////////////////////////

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //2
    Manager getManager() {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    void freeConnection(Connection c) {
        getManager().releaseConnection(c); // back to pool
    }
    /**
     * Gets the connection.
     */
    Connection getConnection() throws SQLException {
        return getManager().getConnection();
    }

// class+ 

// class- 
}
