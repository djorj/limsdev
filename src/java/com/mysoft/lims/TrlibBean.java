// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class TrlibBean
// extends+ 

// extends- 
{
    private Long trlibid;
    private boolean trlibid_is_modified = false;
    private boolean trlibid_is_initialized = false;
    
    private Integer langid;
    private boolean langid_is_modified = false;
    private boolean langid_is_initialized = false;
    
    private Long phraseid;
    private boolean phraseid_is_modified = false;
    private boolean phraseid_is_initialized = false;
    
    private String phrase;
    private boolean phrase_is_modified = false;
    private boolean phrase_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    TrlibBean()
    {
    }
    
    /**
     * Getter method for trlibid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: trlib.trlibid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of trlibid
     */
    public Long getTrlibid()
    {
        return trlibid; 
    }

    /**
     * Setter method for trlibid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to trlibid
     */
    public void setTrlibid(Long newVal) {
        if ((newVal != null && this.trlibid != null && (newVal.compareTo(this.trlibid) == 0)) || 
            (newVal == null && this.trlibid == null && trlibid_is_initialized)) {
            return; 
        } 
        this.trlibid = newVal; 
        trlibid_is_modified = true; 
        trlibid_is_initialized = true; 
    }

    /**
     * Setter method for trlibid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to trlibid
     */
    public void setTrlibid(long newVal) {
        setTrlibid(new Long(newVal));
    }

    /**
     * Determines if the trlibid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTrlibidModified() {
        return trlibid_is_modified; 
    }

    /**
     * Determines if the trlibid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTrlibidInitialized() {
        return trlibid_is_initialized; 
    }

    /**
     * Getter method for langid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: trlib.langid
     * <li> foreign key: lang.langid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of langid
     */
    public Integer getLangid()
    {
        return langid; 
    }

    /**
     * Setter method for langid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to langid
     */
    public void setLangid(Integer newVal) {
        if ((newVal != null && this.langid != null && (newVal.compareTo(this.langid) == 0)) || 
            (newVal == null && this.langid == null && langid_is_initialized)) {
            return; 
        } 
        this.langid = newVal; 
        langid_is_modified = true; 
        langid_is_initialized = true; 
    }

    /**
     * Setter method for langid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to langid
     */
    public void setLangid(int newVal) {
        setLangid(new Integer(newVal));
    }

    /**
     * Determines if the langid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLangidModified() {
        return langid_is_modified; 
    }

    /**
     * Determines if the langid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLangidInitialized() {
        return langid_is_initialized; 
    }

    /**
     * Getter method for phraseid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: trlib.phraseid
     * <li> foreign key: trlib.trlibid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of phraseid
     */
    public Long getPhraseid()
    {
        return phraseid; 
    }

    /**
     * Setter method for phraseid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to phraseid
     */
    public void setPhraseid(Long newVal) {
        if ((newVal != null && this.phraseid != null && (newVal.compareTo(this.phraseid) == 0)) || 
            (newVal == null && this.phraseid == null && phraseid_is_initialized)) {
            return; 
        } 
        this.phraseid = newVal; 
        phraseid_is_modified = true; 
        phraseid_is_initialized = true; 
    }

    /**
     * Setter method for phraseid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to phraseid
     */
    public void setPhraseid(long newVal) {
        setPhraseid(new Long(newVal));
    }

    /**
     * Determines if the phraseid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPhraseidModified() {
        return phraseid_is_modified; 
    }

    /**
     * Determines if the phraseid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPhraseidInitialized() {
        return phraseid_is_initialized; 
    }

    /**
     * Getter method for phrase.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: trlib.phrase
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of phrase
     */
    public String getPhrase()
    {
        return phrase; 
    }

    /**
     * Setter method for phrase.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to phrase
     */
    public void setPhrase(String newVal) {
        if ((newVal != null && this.phrase != null && (newVal.compareTo(this.phrase) == 0)) || 
            (newVal == null && this.phrase == null && phrase_is_initialized)) {
            return; 
        } 
        this.phrase = newVal; 
        phrase_is_modified = true; 
        phrase_is_initialized = true; 
    }

    /**
     * Determines if the phrase has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPhraseModified() {
        return phrase_is_modified; 
    }

    /**
     * Determines if the phrase has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPhraseInitialized() {
        return phrase_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return trlibid_is_modified || 
		langid_is_modified || 
		phraseid_is_modified || 
		phrase_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        trlibid_is_modified = false;
        langid_is_modified = false;
        phraseid_is_modified = false;
        phrase_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TrlibBean bean) {
        setTrlibid(bean.getTrlibid());
        setLangid(bean.getLangid());
        setPhraseid(bean.getPhraseid());
        setPhrase(bean.getPhrase());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[trlib] "
                 + "\n - trlib.trlibid = " + (trlibid_is_initialized ? ("[" + (trlibid == null ? null : trlibid.toString()) + "]") : "not initialized") + ""
                 + "\n - trlib.langid = " + (langid_is_initialized ? ("[" + (langid == null ? null : langid.toString()) + "]") : "not initialized") + ""
                 + "\n - trlib.phraseid = " + (phraseid_is_initialized ? ("[" + (phraseid == null ? null : phraseid.toString()) + "]") : "not initialized") + ""
                 + "\n - trlib.phrase = " + (phrase_is_initialized ? ("[" + (phrase == null ? null : phrase.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
