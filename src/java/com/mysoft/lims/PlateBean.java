// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class PlateBean
// extends+ 

// extends- 
{
    private Long plateid;
    private boolean plateid_is_modified = false;
    private boolean plateid_is_initialized = false;
    
    private String num;
    private boolean num_is_modified = false;
    private boolean num_is_initialized = false;
    
    private java.sql.Timestamp platedate;
    private boolean platedate_is_modified = false;
    private boolean platedate_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Integer deviceid;
    private boolean deviceid_is_modified = false;
    private boolean deviceid_is_initialized = false;
    
    private Long platetemplateid;
    private boolean platetemplateid_is_modified = false;
    private boolean platetemplateid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    PlateBean()
    {
    }
    
    /**
     * Getter method for plateid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plate.plateid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of plateid
     */
    public Long getPlateid()
    {
        return plateid; 
    }

    /**
     * Setter method for plateid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to plateid
     */
    public void setPlateid(Long newVal) {
        if ((newVal != null && this.plateid != null && (newVal.compareTo(this.plateid) == 0)) || 
            (newVal == null && this.plateid == null && plateid_is_initialized)) {
            return; 
        } 
        this.plateid = newVal; 
        plateid_is_modified = true; 
        plateid_is_initialized = true; 
    }

    /**
     * Setter method for plateid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to plateid
     */
    public void setPlateid(long newVal) {
        setPlateid(new Long(newVal));
    }

    /**
     * Determines if the plateid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlateidModified() {
        return plateid_is_modified; 
    }

    /**
     * Determines if the plateid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlateidInitialized() {
        return plateid_is_initialized; 
    }

    /**
     * Getter method for num.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plate.num
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of num
     */
    public String getNum()
    {
        return num; 
    }

    /**
     * Setter method for num.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to num
     */
    public void setNum(String newVal) {
        if ((newVal != null && this.num != null && (newVal.compareTo(this.num) == 0)) || 
            (newVal == null && this.num == null && num_is_initialized)) {
            return; 
        } 
        this.num = newVal; 
        num_is_modified = true; 
        num_is_initialized = true; 
    }

    /**
     * Determines if the num has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNumModified() {
        return num_is_modified; 
    }

    /**
     * Determines if the num has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNumInitialized() {
        return num_is_initialized; 
    }

    /**
     * Getter method for platedate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plate.platedate
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of platedate
     */
    public java.sql.Timestamp getPlatedate()
    {
        return platedate; 
    }

    /**
     * Setter method for platedate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to platedate
     */
    public void setPlatedate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.platedate != null && (newVal.compareTo(this.platedate) == 0)) || 
            (newVal == null && this.platedate == null && platedate_is_initialized)) {
            return; 
        } 
        this.platedate = newVal; 
        platedate_is_modified = true; 
        platedate_is_initialized = true; 
    }

    /**
     * Setter method for platedate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to platedate
     */
    public void setPlatedate(long newVal) {
        setPlatedate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the platedate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlatedateModified() {
        return platedate_is_modified; 
    }

    /**
     * Determines if the platedate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlatedateInitialized() {
        return platedate_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plate.regbyid
     * <li> foreign key: personell.personellid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plate.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for deviceid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plate.deviceid
     * <li> foreign key: device.deviceid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of deviceid
     */
    public Integer getDeviceid()
    {
        return deviceid; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(Integer newVal) {
        if ((newVal != null && this.deviceid != null && (newVal.compareTo(this.deviceid) == 0)) || 
            (newVal == null && this.deviceid == null && deviceid_is_initialized)) {
            return; 
        } 
        this.deviceid = newVal; 
        deviceid_is_modified = true; 
        deviceid_is_initialized = true; 
    }

    /**
     * Setter method for deviceid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to deviceid
     */
    public void setDeviceid(int newVal) {
        setDeviceid(new Integer(newVal));
    }

    /**
     * Determines if the deviceid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDeviceidModified() {
        return deviceid_is_modified; 
    }

    /**
     * Determines if the deviceid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDeviceidInitialized() {
        return deviceid_is_initialized; 
    }

    /**
     * Getter method for platetemplateid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: plate.platetemplateid
     * <li> foreign key: platetemplate.platetemplateid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of platetemplateid
     */
    public Long getPlatetemplateid()
    {
        return platetemplateid; 
    }

    /**
     * Setter method for platetemplateid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to platetemplateid
     */
    public void setPlatetemplateid(Long newVal) {
        if ((newVal != null && this.platetemplateid != null && (newVal.compareTo(this.platetemplateid) == 0)) || 
            (newVal == null && this.platetemplateid == null && platetemplateid_is_initialized)) {
            return; 
        } 
        this.platetemplateid = newVal; 
        platetemplateid_is_modified = true; 
        platetemplateid_is_initialized = true; 
    }

    /**
     * Setter method for platetemplateid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to platetemplateid
     */
    public void setPlatetemplateid(long newVal) {
        setPlatetemplateid(new Long(newVal));
    }

    /**
     * Determines if the platetemplateid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isPlatetemplateidModified() {
        return platetemplateid_is_modified; 
    }

    /**
     * Determines if the platetemplateid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isPlatetemplateidInitialized() {
        return platetemplateid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return plateid_is_modified || 
		num_is_modified || 
		platedate_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		deviceid_is_modified || 
		platetemplateid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        plateid_is_modified = false;
        num_is_modified = false;
        platedate_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        deviceid_is_modified = false;
        platetemplateid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(PlateBean bean) {
        setPlateid(bean.getPlateid());
        setNum(bean.getNum());
        setPlatedate(bean.getPlatedate());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setDeviceid(bean.getDeviceid());
        setPlatetemplateid(bean.getPlatetemplateid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[plate] "
                 + "\n - plate.plateid = " + (plateid_is_initialized ? ("[" + (plateid == null ? null : plateid.toString()) + "]") : "not initialized") + ""
                 + "\n - plate.num = " + (num_is_initialized ? ("[" + (num == null ? null : num.toString()) + "]") : "not initialized") + ""
                 + "\n - plate.platedate = " + (platedate_is_initialized ? ("[" + (platedate == null ? null : platedate.toString()) + "]") : "not initialized") + ""
                 + "\n - plate.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - plate.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - plate.deviceid = " + (deviceid_is_initialized ? ("[" + (deviceid == null ? null : deviceid.toString()) + "]") : "not initialized") + ""
                 + "\n - plate.platetemplateid = " + (platetemplateid_is_initialized ? ("[" + (platetemplateid == null ? null : platetemplateid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
