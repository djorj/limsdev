// --------------------------------------------------------
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: org.postgresql.Driver
// 
// Please help us improve this tool by reporting:
//    problems,
//    suggestions,
//    feedbacks,
//    ideas,
//  to http://sourceforge.net/projects/sql2java/
// --------------------------------------------------------

package com.mysoft.lims;

// imports+ 

// imports- 

public class ContractlabtestBean
// extends+ 

// extends- 
{
    private Long contractlabtestid;
    private boolean contractlabtestid_is_modified = false;
    private boolean contractlabtestid_is_initialized = false;
    
    private Long contractid;
    private boolean contractid_is_modified = false;
    private boolean contractid_is_initialized = false;
    
    private Long labtestid;
    private boolean labtestid_is_modified = false;
    private boolean labtestid_is_initialized = false;
    
    private Double maxprice;
    private boolean maxprice_is_modified = false;
    private boolean maxprice_is_initialized = false;
    
    private Long maxcnt;
    private boolean maxcnt_is_modified = false;
    private boolean maxcnt_is_initialized = false;
    
    private Integer regbyid;
    private boolean regbyid_is_modified = false;
    private boolean regbyid_is_initialized = false;
    
    private java.sql.Timestamp regdate;
    private boolean regdate_is_modified = false;
    private boolean regdate_is_initialized = false;
    
    private Long minday;
    private boolean minday_is_modified = false;
    private boolean minday_is_initialized = false;
    
    private Long maxday;
    private boolean maxday_is_modified = false;
    private boolean maxday_is_initialized = false;
    
    private String info;
    private boolean info_is_modified = false;
    private boolean info_is_initialized = false;
    
    private Integer sampletypeid;
    private boolean sampletypeid_is_modified = false;
    private boolean sampletypeid_is_initialized = false;
    
    private boolean _isNew = true;
    
    /**
     * Do not use this constructor directly, please use the factory method
     * available in the associated manager.
     */
    ContractlabtestBean()
    {
    }
    
    /**
     * Getter method for contractlabtestid.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.contractlabtestid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractlabtestid
     */
    public Long getContractlabtestid()
    {
        return contractlabtestid; 
    }

    /**
     * Setter method for contractlabtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractlabtestid
     */
    public void setContractlabtestid(Long newVal) {
        if ((newVal != null && this.contractlabtestid != null && (newVal.compareTo(this.contractlabtestid) == 0)) || 
            (newVal == null && this.contractlabtestid == null && contractlabtestid_is_initialized)) {
            return; 
        } 
        this.contractlabtestid = newVal; 
        contractlabtestid_is_modified = true; 
        contractlabtestid_is_initialized = true; 
    }

    /**
     * Setter method for contractlabtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractlabtestid
     */
    public void setContractlabtestid(long newVal) {
        setContractlabtestid(new Long(newVal));
    }

    /**
     * Determines if the contractlabtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractlabtestidModified() {
        return contractlabtestid_is_modified; 
    }

    /**
     * Determines if the contractlabtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractlabtestidInitialized() {
        return contractlabtestid_is_initialized; 
    }

    /**
     * Getter method for contractid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.contractid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of contractid
     */
    public Long getContractid()
    {
        return contractid; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(Long newVal) {
        if ((newVal != null && this.contractid != null && (newVal.compareTo(this.contractid) == 0)) || 
            (newVal == null && this.contractid == null && contractid_is_initialized)) {
            return; 
        } 
        this.contractid = newVal; 
        contractid_is_modified = true; 
        contractid_is_initialized = true; 
    }

    /**
     * Setter method for contractid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contractid
     */
    public void setContractid(long newVal) {
        setContractid(new Long(newVal));
    }

    /**
     * Determines if the contractid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContractidModified() {
        return contractid_is_modified; 
    }

    /**
     * Determines if the contractid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContractidInitialized() {
        return contractid_is_initialized; 
    }

    /**
     * Getter method for labtestid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.labtestid
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of labtestid
     */
    public Long getLabtestid()
    {
        return labtestid; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(Long newVal) {
        if ((newVal != null && this.labtestid != null && (newVal.compareTo(this.labtestid) == 0)) || 
            (newVal == null && this.labtestid == null && labtestid_is_initialized)) {
            return; 
        } 
        this.labtestid = newVal; 
        labtestid_is_modified = true; 
        labtestid_is_initialized = true; 
    }

    /**
     * Setter method for labtestid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to labtestid
     */
    public void setLabtestid(long newVal) {
        setLabtestid(new Long(newVal));
    }

    /**
     * Determines if the labtestid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isLabtestidModified() {
        return labtestid_is_modified; 
    }

    /**
     * Determines if the labtestid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isLabtestidInitialized() {
        return labtestid_is_initialized; 
    }

    /**
     * Getter method for maxprice.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.maxprice
     * <li>default value: 0
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.DOUBLE
     * </ul>
     *
     * @return the value of maxprice
     */
    public Double getMaxprice()
    {
        return maxprice; 
    }

    /**
     * Setter method for maxprice.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to maxprice
     */
    public void setMaxprice(Double newVal) {
        if ((newVal != null && this.maxprice != null && (newVal.compareTo(this.maxprice) == 0)) || 
            (newVal == null && this.maxprice == null && maxprice_is_initialized)) {
            return; 
        } 
        this.maxprice = newVal; 
        maxprice_is_modified = true; 
        maxprice_is_initialized = true; 
    }

    /**
     * Setter method for maxprice.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to maxprice
     */
    public void setMaxprice(double newVal) {
        setMaxprice(new Double(newVal));
    }

    /**
     * Determines if the maxprice has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMaxpriceModified() {
        return maxprice_is_modified; 
    }

    /**
     * Determines if the maxprice has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMaxpriceInitialized() {
        return maxprice_is_initialized; 
    }

    /**
     * Getter method for maxcnt.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.maxcnt
     * <li>default value: 0
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of maxcnt
     */
    public Long getMaxcnt()
    {
        return maxcnt; 
    }

    /**
     * Setter method for maxcnt.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to maxcnt
     */
    public void setMaxcnt(Long newVal) {
        if ((newVal != null && this.maxcnt != null && (newVal.compareTo(this.maxcnt) == 0)) || 
            (newVal == null && this.maxcnt == null && maxcnt_is_initialized)) {
            return; 
        } 
        this.maxcnt = newVal; 
        maxcnt_is_modified = true; 
        maxcnt_is_initialized = true; 
    }

    /**
     * Setter method for maxcnt.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to maxcnt
     */
    public void setMaxcnt(long newVal) {
        setMaxcnt(new Long(newVal));
    }

    /**
     * Determines if the maxcnt has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMaxcntModified() {
        return maxcnt_is_modified; 
    }

    /**
     * Determines if the maxcnt has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMaxcntInitialized() {
        return maxcnt_is_initialized; 
    }

    /**
     * Getter method for regbyid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.regbyid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of regbyid
     */
    public Integer getRegbyid()
    {
        return regbyid; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(Integer newVal) {
        if ((newVal != null && this.regbyid != null && (newVal.compareTo(this.regbyid) == 0)) || 
            (newVal == null && this.regbyid == null && regbyid_is_initialized)) {
            return; 
        } 
        this.regbyid = newVal; 
        regbyid_is_modified = true; 
        regbyid_is_initialized = true; 
    }

    /**
     * Setter method for regbyid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regbyid
     */
    public void setRegbyid(int newVal) {
        setRegbyid(new Integer(newVal));
    }

    /**
     * Determines if the regbyid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegbyidModified() {
        return regbyid_is_modified; 
    }

    /**
     * Determines if the regbyid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegbyidInitialized() {
        return regbyid_is_initialized; 
    }

    /**
     * Getter method for regdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.regdate
     * <li>default value: now()
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.TIMESTAMP
     * </ul>
     *
     * @return the value of regdate
     */
    public java.sql.Timestamp getRegdate()
    {
        return regdate; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(java.sql.Timestamp newVal) {
        if ((newVal != null && this.regdate != null && (newVal.compareTo(this.regdate) == 0)) || 
            (newVal == null && this.regdate == null && regdate_is_initialized)) {
            return; 
        } 
        this.regdate = newVal; 
        regdate_is_modified = true; 
        regdate_is_initialized = true; 
    }

    /**
     * Setter method for regdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to regdate
     */
    public void setRegdate(long newVal) {
        setRegdate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the regdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRegdateModified() {
        return regdate_is_modified; 
    }

    /**
     * Determines if the regdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRegdateInitialized() {
        return regdate_is_initialized; 
    }

    /**
     * Getter method for minday.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.minday
     * <li>default value: 2
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of minday
     */
    public Long getMinday()
    {
        return minday; 
    }

    /**
     * Setter method for minday.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to minday
     */
    public void setMinday(Long newVal) {
        if ((newVal != null && this.minday != null && (newVal.compareTo(this.minday) == 0)) || 
            (newVal == null && this.minday == null && minday_is_initialized)) {
            return; 
        } 
        this.minday = newVal; 
        minday_is_modified = true; 
        minday_is_initialized = true; 
    }

    /**
     * Setter method for minday.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to minday
     */
    public void setMinday(long newVal) {
        setMinday(new Long(newVal));
    }

    /**
     * Determines if the minday has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMindayModified() {
        return minday_is_modified; 
    }

    /**
     * Determines if the minday has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMindayInitialized() {
        return minday_is_initialized; 
    }

    /**
     * Getter method for maxday.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.maxday
     * <li>default value: 3
     * <li>column size: 8
     * <li>jdbc type returned by the driver: Types.BIGINT
     * </ul>
     *
     * @return the value of maxday
     */
    public Long getMaxday()
    {
        return maxday; 
    }

    /**
     * Setter method for maxday.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to maxday
     */
    public void setMaxday(Long newVal) {
        if ((newVal != null && this.maxday != null && (newVal.compareTo(this.maxday) == 0)) || 
            (newVal == null && this.maxday == null && maxday_is_initialized)) {
            return; 
        } 
        this.maxday = newVal; 
        maxday_is_modified = true; 
        maxday_is_initialized = true; 
    }

    /**
     * Setter method for maxday.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to maxday
     */
    public void setMaxday(long newVal) {
        setMaxday(new Long(newVal));
    }

    /**
     * Determines if the maxday has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMaxdayModified() {
        return maxday_is_modified; 
    }

    /**
     * Determines if the maxday has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMaxdayInitialized() {
        return maxday_is_initialized; 
    }

    /**
     * Getter method for info.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.info
     * <li>column size: -1
     * <li>jdbc type returned by the driver: Types.VARCHAR
     * </ul>
     *
     * @return the value of info
     */
    public String getInfo()
    {
        return info; 
    }

    /**
     * Setter method for info.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to info
     */
    public void setInfo(String newVal) {
        if ((newVal != null && this.info != null && (newVal.compareTo(this.info) == 0)) || 
            (newVal == null && this.info == null && info_is_initialized)) {
            return; 
        } 
        this.info = newVal; 
        info_is_modified = true; 
        info_is_initialized = true; 
    }

    /**
     * Determines if the info has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isInfoModified() {
        return info_is_modified; 
    }

    /**
     * Determines if the info has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isInfoInitialized() {
        return info_is_initialized; 
    }

    /**
     * Getter method for sampletypeid.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: contractlabtest.sampletypeid
     * <li>column size: 4
     * <li>jdbc type returned by the driver: Types.INTEGER
     * </ul>
     *
     * @return the value of sampletypeid
     */
    public Integer getSampletypeid()
    {
        return sampletypeid; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(Integer newVal) {
        if ((newVal != null && this.sampletypeid != null && (newVal.compareTo(this.sampletypeid) == 0)) || 
            (newVal == null && this.sampletypeid == null && sampletypeid_is_initialized)) {
            return; 
        } 
        this.sampletypeid = newVal; 
        sampletypeid_is_modified = true; 
        sampletypeid_is_initialized = true; 
    }

    /**
     * Setter method for sampletypeid.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sampletypeid
     */
    public void setSampletypeid(int newVal) {
        setSampletypeid(new Integer(newVal));
    }

    /**
     * Determines if the sampletypeid has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSampletypeidModified() {
        return sampletypeid_is_modified; 
    }

    /**
     * Determines if the sampletypeid has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSampletypeidInitialized() {
        return sampletypeid_is_initialized; 
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew() {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew) {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified() {
        return contractlabtestid_is_modified || 
		contractid_is_modified || 
		labtestid_is_modified || 
		maxprice_is_modified || 
		maxcnt_is_modified || 
		regbyid_is_modified || 
		regdate_is_modified || 
		minday_is_modified || 
		maxday_is_modified || 
		info_is_modified || 
		sampletypeid_is_modified;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified() {
        contractlabtestid_is_modified = false;
        contractid_is_modified = false;
        labtestid_is_modified = false;
        maxprice_is_modified = false;
        maxcnt_is_modified = false;
        regbyid_is_modified = false;
        regdate_is_modified = false;
        minday_is_modified = false;
        maxday_is_modified = false;
        info_is_modified = false;
        sampletypeid_is_modified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContractlabtestBean bean) {
        setContractlabtestid(bean.getContractlabtestid());
        setContractid(bean.getContractid());
        setLabtestid(bean.getLabtestid());
        setMaxprice(bean.getMaxprice());
        setMaxcnt(bean.getMaxcnt());
        setRegbyid(bean.getRegbyid());
        setRegdate(bean.getRegdate());
        setMinday(bean.getMinday());
        setMaxday(bean.getMaxday());
        setInfo(bean.getInfo());
        setSampletypeid(bean.getSampletypeid());
    }

    /**
     * Returns the object string representation.
     *
     * @return the object as a string
     */
    public String toString() {
        return   "\n[contractlabtest] "
                 + "\n - contractlabtest.contractlabtestid = " + (contractlabtestid_is_initialized ? ("[" + (contractlabtestid == null ? null : contractlabtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.contractid = " + (contractid_is_initialized ? ("[" + (contractid == null ? null : contractid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.labtestid = " + (labtestid_is_initialized ? ("[" + (labtestid == null ? null : labtestid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.maxprice = " + (maxprice_is_initialized ? ("[" + (maxprice == null ? null : maxprice.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.maxcnt = " + (maxcnt_is_initialized ? ("[" + (maxcnt == null ? null : maxcnt.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.regbyid = " + (regbyid_is_initialized ? ("[" + (regbyid == null ? null : regbyid.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.regdate = " + (regdate_is_initialized ? ("[" + (regdate == null ? null : regdate.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.minday = " + (minday_is_initialized ? ("[" + (minday == null ? null : minday.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.maxday = " + (maxday_is_initialized ? ("[" + (maxday == null ? null : maxday.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.info = " + (info_is_initialized ? ("[" + (info == null ? null : info.toString()) + "]") : "not initialized") + ""
                 + "\n - contractlabtest.sampletypeid = " + (sampletypeid_is_initialized ? ("[" + (sampletypeid == null ? null : sampletypeid.toString()) + "]") : "not initialized") + ""
            ;
    }

// class+ 

// class- 
}
